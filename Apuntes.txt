Contraseña del wifi:
2E0zPNQgcseVxvtZWzkg
Número: 14
Directorio: JoseLuis

Nombres profesores:
Javier: Chaqueta con hombreras
Sergio Bamberg

Para acceder a las webs:

www.estudio23.es/josemanuel/reproductor/reproductor.html

CLASE 2: 08/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Sublimetext: Editor html a utilizar en el curso

Cambiar barra superior de la plantilla:
<nav>: barra de navegación de la página
En style css (nav, la cabecera) estará definido por .header
en .header background se puede cambiar el color de fondo
en .header hover se puede especificar el color que cambia al sobrepasar el ratón por encima.
<footer>: barra inferior

Nosotros solo usaremos plantillas con el estándar html5. Para saber si cumplen el estándar deben llevar:
<!DOCTYPE html>
<html lang="es">
</html>

webs para descargar plantillas y estilos:
- bootstrap cdn

https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css

copiamos el código para html:
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

etiqueta para listas ordenadas:
<ol></ol>

etiqueta para listas no ordenadas:
<ul></ul>

etiqueta para listas de definición:
<dl></dl>
	- Elemento a definir: <dt></dt>
	- Descripción del elemento: <dd></dd>

clases creadas por bootstrap para listas:
- list-unstyled
- list-inline
- dl-horizontal

Tablas:
<table></table>

Fila de una tabla:
<tr></tr>

Celda de una fila:
<td></td>

Clases para tablas:
- class="table"
- "table-bordered" (esta necesita la anterior table para funcionar)
- "table-striped"
- "table-hover"

Filas de cabecera:
	- Etiqueta para la primera fila de cabecera: <thead></thead>
	- Luego para los componentes de la fila se utiliza tr para abrir la fila y <th></th> para los elementos
	- Luego se coloca la etiqueta <tbody> y </tbody> para cerrar. Similar a un docmento html.

Clases para filas o celdas:
"active": Hace que se quede de un tono mas oscuro.
"success": Hace que se quede de un tono verde, haciendo un simil de resultado exitoso.
"danger": Hace que se quede de un tono rojo, haciendo un simil de resultado fallido.
"warning": Hace que se quede de un tono amarillento, haciendo un simil de aviso.
"info": Hace que se quede de un tono azul claro, haciendo un simil de informar.

colspan: Se coloca dentro de una celda y tiene un valor. Sirve para combinar varias celdas en 1
Por ejemplo: <th colspan="3">Tabla de ejemplo</th>
De esta forma se crea una celda que ocupe el espacio de 3 columnas. Puede aplicarse también la opción rowspan para hacer que una celda ocupe varias filas.


CLASE 3: 09/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Ejercicios:

Sistema binario:
110101 = 32 + 16 + 4 + 1 = 53
100111 = 32 + 4 + 2 + 1 = 39

58 = 32 + 16 + 8 + 2 = 111010
33 = 32 + 1 = 100001

Sistema hexadecimal:
A3 = 163
CD = 12 * 16 + 13 = 205

100:

100:16 = 6 y resto 4
100 = 64

200:

200:16 = 12 y resto 8
12 es C, por lo que 200 = C8

Para que aparezca la ñ, se escribe "&ntilde;"
Por ejemplo, para poner España habríaque poner "Espa&ntilde;a"

Para colocar un acento hay que poner &LETRAacute;
Por ejemplo, para acentuar la i hay que escribir &iacute;

Hoy día ya no es necesario utilizar este método. Para ello, hay que añadir dentro del <head>:
<meta charset="utf-8"/>

Con esta etiqueta se describe el contenido de la web y esto será lo que aparezca en el buscador.
<meta name="Description" content="El contenido que sea"/>

Con esta etiqueta se permite la indexación en los buscadores. Follow significa que también se indexen los enlaces de la página en cuestión.
<meta name="robots" content="index, follow" />
Si se colocan "noindex" o "nofollow" es para lo contrario, para que no se indexe y para que no se sigan sus enlaces en el buscador.

"nosnippet" sirve para que aparezca la web en el buscador, pero no descripción sobre la misma.
"noodp" sirve para almacenar definiciones alternativas de los sitios.
"noarchive" sirve para que la página no se guarde en la caché de google.
"unavailable_after:[date]" sirve para que la web no se indexe después de la fecha indicada.
"none" es lo mismo que dejarla vacía.

<meta name="google" content="nositeslinksearchbox"/> Sirve para que no aparezca un buscador en los resultados de búsqueda de la página. Es decir, que no aparezca un subbuscador en google al buscar la pagina.

<meta name="google" content="notranslate" /> Sirve para que la página no se traduzca y siempre aparezca en el idioma original.

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> Etiqueta antigua para especificar el formato utf8 y html. También se usa actualmente para generar otro tipo de página que no sea html, como por ejemplo pdf.

<meta http-equiv="refresh" content="5; url=http://www.google.com/"> Sirve para refrescar la página en el tiempo indicado y que te lleve a la url establecida.

CSS orientado a texto:

.estilo
{
	text-align: left | right | center | justify; (solo puede usarse uno de ellos)
	line-height: 1.2em; cambia el espacio entre dos líneas. em es el espacio entre dos líneas, por lo que 1.2 es un 20% superior al tamaño normal. También puede sustituirse por 120%
	font-size: 16px; sirve para cambiar le tamaño de la fuente
	text-decoration: underline | overline | line-through | blink; Underline sirve para subrayado, overline sirve para colocar una línea por encima del texto, line-through sirve para tachar el texto y blink sirve para que el texto parpadee.
	text-transform: capitalize | uppercase | lowercase | none; Capitalize hace que el texto esté escrito con la primera letra  de cada palabra en mayúscula. uppercase hace que todas las letras estén en mayúsculas, lowercase hace que estén todas en minúscula y none no realiza nada.
	vertical-align: baseline | sub | super | top | text-top | middle | bottom | text-bottom | % | UM;
	text-indent: UM | %; Sirve para tabular la primera línea de un texto. UM es una unidad de medidaquepuede ser por ejemplo, pixeles (px).
	letter-spacing: UM; Sirve para especificar la distancia en unidades de medida (pixeles por ejmplo) entre caracteres.
	word-spacing: UM; Sirve para especificar la distancia en unidades de medida (pixeles por ejmplo) entre palabras.
	white-space: normal | pre | nowrap | pre-wrap | pre-line; pre sirve para que si hay varios espacios en medio, aparezcan todos. nowrap sirve para que si hay una línea y llega al final, no la rompa y siga. pre-wrap sirve para que respete todos los saltos y espacios de línea y pre-line
	font-family: para cambiar la fuente. Siempre es conveniente colocar mas de una por si esta no se encuentra disponible. La prioridad es de izquierda a derecha y se procura que la útlima sea la mas común.
	font-style: normal | italic | oblique;
	font-variant: normall | small-caps;
	font-weight: normal | bold | bolder |light | lighter | nº; Sirve para establecer el grosor de la fuerte. El número suele ir entre 100 y 900. Cuanto mas número mas gureso es. La letra normal es 500. No lleva unidad de medida.
	font-color: #2323ab. Sirve para cambiar el color de la fuente. se puede usar "color picket" en google para buscar colores.
}

En una imagen se puede usar la etiqueta "title=" para añadirle una descripción a la misma. La etiqueta "alt=" sirve para que en el caso de que no se muestre la imagen, se muestre ese texto.

Práctica: Realizar una web completa con varias páginas con un título grande de imagen. Debajo una lista grande con platos de cocina.


CLASE 4: JUEVES 10/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Clase práctica de habilidades personales SUMA

CLASE 5: VIERNES 11/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Tutoría. Este día no he asistido a clases al tratarse de opcional y resolución de dudas.


CLASE 6: LUNES 14/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Hoy vamos a dar etiquetasde vídeo y de audio con javascript.

Al entrar en la ftp tendremos un directorio con el nombre

Etiquetas de vídeo y audio:

<video src="url del vídeo" controls> Menasje de error en caso que se produzca. </video>
<video src="url del audio" controls> Menasje de error en caso que se produzca. </video>

La etiqueta controls hace que aparecan los controles de play, pause y volumen.

Personalizar controles del audio:

<h1>Audio de prueba con controles personalizados</h1>
<audio id="audio" src="audioClase4.m4a"></audio>
<div>
<button onclick="document.getElementById('audio').play()">Reproducir el audio</button>
<button onclick="document.getElementById('audio').pause()">Pausar el audio</button>
<button onclick="document.getElementById('audio').volume+=0.1()">Aumentar el Volumen</button>
<button onclick="document.getElementById('audio').volume-=0.1()">Disminuir el Volumen</button>
</div>

Dentro del () hay que introducir la misma id que se había puesto en el código html. Entre comillas simples.

Datos para  la ftp:
servidor: hl44.dinaserver.com/
usuario: cursophp
contraseña: Cursophp159
puerto: 21

Cuando se accede a una web en xampp, primero busca si existe index.php y si no lo encuentra, busca index.html.

Hay 3 niveles en el desarrollo de una página web:
1. Presentación
2. Ejecución
3. Datos

También se conoce como modelo vita controlador (MVC)

Formularios:
<body>
<form action="" method="" target=""></form>
</body>

En action se introduce la web de destino.

En method hay dos formas: GET y POST. En GET los datos de formulario aparecen en la url de la web y en POST no. Hay mas diferencias pero esa es la mas notoria. El primero se usa para enlaces permanentes y POST se usa para mantener la privacidad (por ejemplo, contraseñas). Si no se pone nada, por defecto es GET.

Target puede ser _self (misma pestaña) o _blank (pestaña nueva).

Los datos a enviar siempre deben estar en el interior de las etiquetas de form.

Hay 3 tipos de botones:

- submit: para enviar datos
	<input type="submit" value="texto del botón"/>
	
- Caja de texto:
	<input type="text" name="nombre" value="texto por defecto"/>
	o bien también 	<input type="text" id="nombre" value="texto por defecto"/>

- Caja de texto para contraseñas:
	<input type="password" name="pass"/>
	o bien tabién <input type="password" id="pass"/>

- Etiqueta descriptiva para los elementos de un formulario:
	<label>Nombre: </label>
	o bien <label for="nombre del elemento">Nombre: </label> para asignarlo a un elemento del formulario y que se quede ligado. En algunos casos habrá que usar id, en lugar de nombre según el navegador (a la hora de definir elementos).
	
Mas tipos: number (solo deja introducir números), search (para cuadros de búsqueda), url(para introducir urls), tel(para números de teléfono), email (para introducir correos electrónicos), color (te permite seleccionar un color que es devuelto en formato hexadecimal).

<textarea rows="10" cols="50">Texto predefinico</textarea>

Etiquetas que se pueden añadira las imputs:
	- disabled="enabled" o "disabled": Para desactivar una casilla
 	- readonly="readonly"
	- placeholder="Texto de sugerencia en el elemento del formulario": Aparece ese texto dentro del elemento que se borra al escribir.
	- value="texto": Lo que se introduzca dentro de value aparecerá como escrito al cargar. Se trata del texto por defecto.
	- required="required": Hace que ese campo sea obligatorio y no sea posible avanzar sin estar relleno.
	
Ejercicio: Realizar un formulario de registro de usuario donde será necesario introducir nombre, apellidos, edad, correo electrónico, teléfono y breve biografía. Obligatorio que nombre y email estén rellenos. Es obligatorio que tengan label y placeholder.
	
CLASE 7: MARTES 15/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Esta será la última semana de HTML. A partir de la semana que viene trataremos Proyectos con PHP y MySQL

-webkit son fragmentos de código para compatibilidad con navegadores.

fa icons (busqueda en google) para cargar iconos.

Para las fechas y horas:
<input type="datetime-local" name="fechayhora" />
No se ha especificado en que zona horaria está

Solo para fecha: Día, mes y año.
<input type="date" name="fecha" />

Solo para un mes:
<input type="Month" name="mes" />

Semana:
<input type="Week" name="semana" /></td>

Hora:
<input type="Time" name="hora" /></td>

Vuelve a poner los valores por defecto del formulario y elimina los datos añadidos:
<input type="reset" value="Reset"/>

Crear un botón vacío:
<input type="but ton" value="Nombre Botón"/>
Este botón no realiza ninguna acción predeterminada. Para asignarle un efecto se utiliza javascript.

Checkbox (casilla de marcado)
<input type="checkbox" value="1" name="casilla1" checked="checked" readonly="readonly"><input type="checkbox" value="1" name="casilla1" checked="checked" readonly="readonly"> Texto de la casilla <br/>
Donde value es el valor que se envía si se marca dicha casilla, nombre es la identificación del checkbox para tratarse la información posteriormente y texto es el texto que aparece en la web que visualiza el usuario. Checked sirve si quires que aparezca como marcada por defecto.

botones radio: Parecido a checkbox, pero solo te permite elegir uno entre varias opciones. (Checkbox circular)
<input type="radio" value="valor" name="nombre">texto<br>
Donde valor es el valor que se envía al marcarse, nombre es el identificador con el que se envía y texto el texto que ve el usuario en la web. Para que solo puedas seleccionar 1 de un grupo es necesario que tengan el mismo nombre.

Lista desplegable:
<select name="pais">
<option value="ES">España</option>
</select>

Nombre será el valor con el que se identifique al enviar y para añadir opciones se utiliza la etiqueta <option></option>. En el interior de la etiqueta se coloca value="texto" que será lo que se envíe y el texto entre las etiquetas será lo que visualice el usurio. Ejemplo:

<select name="pais">
<option value="ES">España</option>
<option value="PT">Portugal</option>
<option value="FR" selected="selected">Francia</option>
</select> Elegir pais <br>

Para seleccionar otro valor por defecto en la seleccion se utiliza selected="selected". Si se añade multiple="multiple" al principio es posible seleccionar mas de una opción. Con el parámetro size se puede indicar cuantos elementos saldrán en la pantalla al desplegar lalista. Ejemplo:

<select name="pais" multiple="multiple" size="10">
<option value="ES">España</option>
<option value="PT">Portugal</option>
<option value="FR" selected="selected">Francia</option>
<option value="GE">Alemania</option>
<option value="GB">Reino Unido</option>
</select> Elegir pais <br>


Si se utiliza la opción <optgroup> se agrupan varias opciones bajo un título y se puede utilizar para dividir en subgrupos. Ejemplo:

<select name="pais2">
<optgroup label="Países mediterráneos">
	<option value="ES">España</option>
	<option value="PT">Portugal</option>
	<option value="FR" selected="selected">Francia</option>
</optgroup>
	<option value="GE">Alemania</option>
	<option value="GB">Reino Unido</option>
</select> Elegir pais <br>


CLASE 8: MIÉRCOLES 16/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Ejemplo de edición de inmobiliaria. Para ello utilizamos la plantilla inmobiliaria.

En la carpeta de fuentes encontramos las utilizadaspara la web. Las fuentes .eot y .ttf funcionan en la mayoría de los navegadores actuales. El resto de fuetnes son para navegadores mas antiguos.

En la carpeta css se guardan los css utilizados para la web, sacados de bootstrap.

Lo primero a hacer en la web de la inmobiliaria es editar el <html lang="en"> por <html lang="es">. Después des necesario modificar la descripcion y el autor:

  <meta name="description" content="">
  <meta name="author" content="">
  
  Ejemplo:

  <meta name="Venta Pisos" content="Venta pisos casas alquileres">
  <meta name="Jose" content="Desarrollos de web Dictea">
  
En la descripción lo ideal es utilizar palabras clave y no excederse de 50 palabras, ya que si se añaden demasiadas los buscadores te penalizan.
En autor es ideal no utilizar tildes ni ñ.

Después se modifica el título:

    <title>Shop Homepage - Start Bootstrap Template</title>

	Ejemplo:
	
	<title>Inmobiliaria de prácticas</title>
	
Favicons:
Sirven para colocarle un icono a la página, y que este icono además pueda aparecer en la pestaña de favoritos. Generalmente el favicon va con extensión .ico. A su vez hay que poner un enlace al mismo icono pero en .png. Por eso se desarrolló un código universal en el que no fuera necesario añadir las imagenes. De esta manera además, sale al instante.

Eliminamos la linea de los favicon comentada:
<!-- link para poner favicon -->

De esta forma se activan las siguientes líneas para el favicon:

<head profile="http://www.w3.org/2005/10/profile">
<link rel="icon" type="image/png" href="favicon.png">

Donde cambiamos el href por la ruta de nuestra imagen y de esta forma ya nos aparece en la pestaña.

Se puede eliminar el menú de la izquierda borrando las siguientes líneas:

            <div class="col-md-3">
                <p class="lead">Shop Name</p>
                <div class="list-group">
                    <a href="#" class="list-group-item">Category 1</a>
                    <a href="#" class="list-group-item">Category 2</a>
                    <a href="#" class="list-group-item">Category 3</a>
                </div>
            </div>
			
Pero entonces la página aparecería con espacio en la derecha. Para solucionar este problema basta con modificar la línea <div class="col-md-9"> y cambiarla por <div class="col-md-12">

carrousel inner: Sirve para hacer que las imagenes vayan cambiando cada x tiempo o cuando se pulsen los botones. En el código se pueden ver de la siguiente manera:

                            <div class="carousel-inner">
                                <div class="item active">
                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">
                                </div>
                                <div class="item">
                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">
                                </div>
                                <div class="item">
                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">
                                </div>
                            </div>
		
La definición de la classe carousel-inner se encuentra en el css de la plantilla. Cambiamos la ruta por nuestras imagenes y ya se cargan en la web.

Lueo modificamos el resto de las imágenes de la plantila (320x150):

<img src="http://placehold.it/320x150" alt="">

Ejemplo:   <img src="img/casa5.jpg" alt="Casa número 5">

Cambiar los iconos de las estrellas por otros:

<span class="glyphicon glyphicon-star"></span>

Buscamos en google "glyphicon" para ver que otros modelos hay:

http://getbootstrap.com/components/

Y sustituimos la estrella por otro:

<span class="glyphicon glyphicon-warning-sign"></span>

Cambiar el color del botón "Ver tutorial"

Buscamos el botón en el código, el cual está en el siguiente div:

                    <div class="col-sm-4 col-lg-4 col-md-4">
                        <h4><a href="#">Like this template?</a>
                        </h4>
                        <p>If you like this template, then check out <a target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">this tutorial</a> on how to build a working review system for your online store!</p>
                        <a class="btn btn-prmiary" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">View Tutorial</a>
                    </div>
					
Bucando la clase btn btn-prmiary en google podemos ver los distintos tipos de botones que tiene bootstrap:
http://www.w3schools.com/bootstrap/bootstrap_buttons.asp

En este caso, cambiamos primary por danger y ya estará en color rojo.

Crear un botón de cada color: Copiamos las líneas referentes al boton y nos queda de esta manera:

						<a class="btn btn-default" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 1</a>
						<a class="btn btn-primary" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 2</a>
						<a class="btn btn-success" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 3</a>
						<a class="btn btn-info" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 4</a>
						<a class="btn btn-warning" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 5</a>
						<a class="btn btn-danger" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 6</a>
						<a class="btn btn-link" target="_blank" href="http://maxoffsky.com/code-blog/laravel-shop-tutorial-1-building-a-review-system/">Color 7</a>
						
Dibujar una línea en la página: <hr/>

Colocación de los scripts:
Se colocan al final de la página para facilitar la carga de la misma. Estos scripts ya venían en la plantilla.

    <!-- jQuery -->
    <script src="js/jquery.js"></script>

    <!-- Bootstrap Core JavaScript -->
    <script src="js/bootstrap.min.js"></script>
	
Mas elementos de formulario:

Elemento oculto:
<inmput type="hidden" value="123" name="oculto" />
Este elemento tendrá mas utilidad en la parte de php.

Otra forma de declarar un botón:
<button name="boton">Enviar con botón</button>

Botón para subir un fichero:
<input type="file" name="archivo" />

Para que esto funcione, hay que añadir al formulario la siguiente sentencia enctype="multipart/form-data">

Ejemplo:

<form action="salida.php" method="GET" enctype="multipart/form-data"></form>

Elemento output:
<output name="resultado" for="valor1 valor2"></output>
En for se coloca el identificador de los elementos que están enlazados en la operación. Para que esta funcione es necesario usar javascript. Ejemplo para la suma de dos números:

oninput="resultado.value=parseInt(valor1.value)+parseInt(valor2.value)"

Esto debe añadirse a la descripción del formulario:
<form action="salida.php" method="GET" enctype="multipart/form-data" oninput="resultado.value=parseInt(valor1.value)+parseInt(valor2.value)"></form>

Concatenar 2 cadenas de texto con espacio en medio: Similar a la anterior:
oninput="resultado2.value=valor3.value + ' ' + valor4.value"

Se coloca también en la descripción del formulario:

<form action="salida.php" method="GET" enctype="multipart/form-data" oninput="resultado2.value=valor3.value + ' ' + valor4.value""></form>

Es posible poner varias operaciones en un mismo formulario, utilizando ;. Ejemplo con las dos operaciones anteriores:

oninput="resultado.value=parseInt(valor1.value) + parseInt(valor2.value);resultado2.value=valor3.value + ' ' + valor4.value"

Elemento fieldset: Sirve para separar distintos elementos del formulario

<fieldset>
	<legend>leyenda</legend>
</fieldset>

Ejemplo de fieldset completo:

<fieldset>
	<legend>Suma de números</legend>
	<input type="number" id="valor1" value="0" /> +
	<input type="number" id="valor2" value="0" /> = 
	<output name="resultado" for="valor1 valor2"></output>
</fieldset>

Tendriamos dos campos para introducir 2 números a sumar y su resultado, y estaría destacado con respecto al resto del formulario.

Barra de carga:
<meter min="0" max="500" value="350" low="300" high="400">texto</meter>

El texto sale cuando no se puede cargar la barra. Las etiquetas low y hight sirven para dividir la barra y cambiar los colores si la barra está por debajo. Aparecerá de color verde si está por debajo de low, amarillo si está en intermedio y rojo si está en alto.

Barra de progreso:
<progress value="70" max="100">70%</progress>

Input list: Lista autocompletable con datos predefinidos.
<input list="identificadorDeOtroElemento" name="nombreDeInputList" />

Datalist: lista de los elementos que elige el autocompletar.
<datalist id="identificadorReferenciadoDelInputList">
	<option value="opcion1" />
	<option value="opcion1" />
	<option value="opcion3" />
</datalist>

barra de medición
<input type="range" min="1" max="10" value="5 name="rango"></range>
Permite seleccionar valores entre mínimo y máximo seleccionables en una barra.

Etiquetas para elementos de formulario:

- autofocus="autofocus"
	Predetermina el elemento activo al cargar la página. Es decir, si se le coloca a un elemento de escritura (como text o number) al cargar estará seleccionado directamente para escribir en el. Ejemplo:
	<input type="text" name="nombre" autofocus="autofocus"/>
	
- autocomplete="valor"
	Valor puede tener dos valores: on y off. Si se establece en on se quedará guardado lo escrito anteriormente para cuando se quiera volver a entrar en la página. En off se desactiva el autocompletar.
	
- formaction="dirección"
	Cambia la dirección a la cual se envían los datos del formulario con otro botón. Ejemplo:
	<input type="submit" value="Enviar a otro sitio" formaction="http://www.google.es" />
	
- formmethod="método"
	Similar al anterior, cambiando el método de envío de datos del formulario a través de otro botón.
	<input type="submit" value="Enviar a otro sitio" formaction="http://www.google.es" formmethod="GET"/>
	
- formtarget="método"
	Sirve para especificar como se abre la nueva página a la que se envían los datos. El valor es _self para la misma página o _blank para una pestaña nueva
	
- formenctype="método"
	Sirve para decirle como enviar los datos (si lleva un fichero, si se genera un pdf, etc). Por defecto es aplication/x-www-form-urlencoded el cual se mantiene por defecto y no es necesario escribirlo.

- formnovalidate="novalidate"
	Evita la validación de los datos y permite enviar información aunque los campso requeridos no estén llenos o correctos. Las acciones afectan a todo el formulario pero es posible hacer que solo se afecte a un elemento.
	
- min y max:
	Se puede poner un número mínimo y máximo permitido a un campo de entrada de tipo numérico. Ejemplo:
	<input type="number" id="valor1" value="0" min="0" max="200"/>
	Este parámetro también se puede usar para fechas y meter.
	
- multiple="multiple":
	Permite introducir mas datos de un mismo tipo.
	<input type="file" name="archivo" multiple="multiple"/>
	Permite introducir varios archivos. Se puede usar también en emails.

- pattern="expresion":
	Hace que los textos a introducir tengan que cumplir una expresión regular para validar los datos. Por ejemplo:
	pattern="[6-7][0-9]{8}"
	Debe empezar por 6 o 7 y luego tener 8 números que vayan del 0 al 9.
	
- step:
	Sirve para campos numéricos. Solo acepta múltiplos de ese elemento.
	<input type="number" id="valor1" value="0" step="30"/>
	En este caso solo aceptaría múltiplos de 30. Es decir, 0, 30, 60, 90, etc. Por defecto es 1 y no deja admitir números decimales en un campo de tipo number. Si se coloca step="any" te permite meter cualquier número. Tambié funciona para range.
	
- tabindex="número"
	Permite definir el orden de seleccion de los campos al usar tabulador. Ejemplo:
	<input type="number" id="valor1" value="0" min="0" max="200" tabindex="2"/>
	Será el segundo seleccionado a la hora de usar tabulador. Si se pone -1 no es posible acceder a el con tabulador.


	
CLASE 9: JUEVES 17/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Introducción a las bases de datos.

Diferencias entre decimal, float y double: Si el resultado de una operacion da como resultado un número decimal, se debe usar un float o un double. El double posee mucho mas precisión que un float. Ejemplo: flaot = 3.34 y double: 3.33333333

Hoy vamos a empezar a realizar una maqueta de una página desde 0. Para ello usaremos el modelo de cajas (div) en lugar del modelo de tablas, al ser este mas versátil.

ejemplo: <div id="contenedor"></div>

Para la cabecera de un div de utiliza la etiqueta header. Ejemplo:

<div id="contenedor">
	<header>
	</header>
</div>

Menú de navegación: etiqueta nav. Se puede ponder dentro de cualquier caja. Ejemplo:

	<div id="contenedor">
		<nav>
		</nav>
	</div>
	
Barra de navegación: aside

	<div id="contenedor">
		<aside>
		</aside>
	</div>
	
Contenido principal: section

	<div id="contenedor">
		<section>
		</section>
	</div>
	
Pié de página: footer.

	<div id="contenedor">
		<footer>
		</footer>
	</div>
	
Sumando todo ello, tenemos la estructura básica de una página:

	<div id="contenedor">
		<header>
		</header>
		<nav>
		</nav>
		<aside>
		</aside>
		<section>
		</section>
		<footer>
		</footer>
	</div>
	
Para notar mejor la división en cajas, utilizamos un css para la página cambiadno el color de fondo de cada parte de la caja:

header
{
	background-color: #fcc;

}

nav
{
	background-color: #cfc;
	
}

aside
{
	background-color: #cce;

}

section
{
	background-color: #fcf;
	
}

footer
{
	background-color: #ffc;

}

Creamos ahora un menú para la seción "nav" y otro para aside, el cual es un menú lateral:

		<nav>
			<ul>
				<li>¿Quienes somos?</li>
				<li>Servicios</li>
				<li>Galería de imágenes</li>
				<li>Contacto</li>
				<li>Como llegar</li>
			</ul>
		</nav>
		
		<aside>
			<p>Sección 1</p>
			<p>Sección 2</p>
			<p>Sección 3</p>
			<p>Sección 4</p>
		</aside>
		
Dentro de section se puede uasr la etiqueta article para diferenciar un contenido específico que se trate de una noticia por ejemplo, o publicaciones, o blogs. Esto se usa para que los buscadores puedan identificar de que se trata. Hgroup se utiliza para juntar titulo y subtítulo. No tiene cambios a nivel estético pero si es útil para los buscadores.

		<section>
			<article>
				<header>
					<hgroup>
						<h2>Mi primera entradada</h2>
						<h3>Aquí cuento mi primera entrdad</h3>
					<hgroup
				</header>
				Lorem Ipsum es simplemente el texto de relleno de las imprentas y archivos de texto. Lorem Ipsum ha sido el texto de relleno estándar de las industrias desde el año 1500, cuando un impresor (N. del T. persona que se dedica a la imprenta) desconocido usó una galería de textos y los mezcló de tal manera que logró hacer un libro de textos especimen.
				<footer>
					Jose Luis Martín Ávila
				</footer>
			</article>
		</section>
		
Sin embargo, al visualizar la web al utilizar header y footer dentro de article, coge los estilos del css en lugar de los estilos de section. Para solucionar esto lo que hacemos es nombrar con un identificador a header y footer principarl. De esta forma quedaría:

		<header id="cabeceraPrincipal">
			<h1>Mi maqueta web</h1>
		</header>

		<footer id="pieDePagina">
			texto del footer
		</footer>
		
y en el css modificamos header y footer para que quede de esta manera:
		
#cabeceraPrincipal
{
	background-color: #fcc;

}

#pieDePagina
{
	background-color: #ffc;

}

Para hacerque los margenes desaparezcan, hay que modificar el css. Para ello lo hacemos de la siguienta manera:

*
{
	margin: 0
}

* hace que se aplique a todos los elementos de la página. Hay dos elementos a tener en cuenta: margin y padding.

Margin mide la distancia desde fuera de la caja a otros elementos. Padding mide la distancia entre el borde de la caja a los elementos internos.

Ademas, no solo las cajas tienen margen. Cada elemento tiene su propio margen (listas, etc).

Para hacer que todos los elementos de una lista, y que estén dentro de nav (ya que si afectaría a toda las listas de la web) lo hacemos de la siguiente manera en el css:

nav li
{
	display: inline;
}

Para hacer que el menú lateral se coloque en la izquierda, añadimos la directiva float. Además, ampliamos el ancho del menú para que no quede tan pegado:

aside
{
	background-color: #cce;
	float: left;
	width: 200px;

}

Ahora la sección quedará dentro del menú lateral, por lo cual aumentamos su margen interno de la sección:

section
{
	background-color: #fcf;
	padding-left: 200px;
}

Para centrar la página, utilizamos las siguientes directivas:

#contenedor
{
	width: 900px;
	margin: 0 auto;
}

de esta forma hacemos que el ancho de nuestro primer div (al cual le hemos llamado contenedor) ocupe 900 pixeles. La segunda directiva (margin) o auto, al introducir dos datos, el primer dato (0) funciona para el margen superior e inferior. El segundo parámetro se trata para izquierda y derecha y al estar en auto, lo que hace es centrarlo.

	padding-left: 210px;
	padding-right: 10px;
	
Esto se puede sustituir por:
	
	padding: 0 10px 0 210px;
	
El orden de los margenes va en sentido de las agujas del reloj: arriba, derecha, abajo, izquierda.

Quitamos el margen a la lista no ordenada para que la caja flotante de la izquierda quede pegada, ya que es esta la que causa la mala colocación:

nav ul
{
	margin: 0;
}

Ponemos los margenes a 0 de h1 y h2 para que todo quede centrado. En algunos casos será complicado encontrar cual margen está provocando la mala colocación por lo que habrá que probar por elementos. En este caso, han sido los encabezados. Se pueden agrupar varios elementos para aplicarles un mismo cambmio a todos, de esta manera:

h1, h2
{
	margin: 0;
}

Colocar un pie de foto a una imagen:
<figure><img src="url de la imagen" /><figcaption>Texto del pie de foto</figure>

Al estar dentro de la cabecera, podemos modificar su tamaño de esta manera:

#cabeceraPrincipal img, figcaption
{
	width: 200px;
	height: auto;
	margin: 0 auto;
	display: block;
}

Así queda también centrada la imagen.

Añadir una fuente al css:

@font-face
{
	font-family: nombreQueQueramosDarle;
	src: url(urlDeLaFuente.ttf);

}

Por ejemplo:

@font-face
{
	font-family: SegoeFuente;
	src: url(../fonts/segoepr.ttf);

}

Ahroa procedemos a cambiar el estilo del menú principal. Primero le creamos una id para que los cambios solo afecten a ese:

<nav id="menuPrincipal">

y modificamos el menúPrincipal en el css:

#menuPrincipal
{
	background-color: #222266; /* Color del fondo */
	height: 40px; /* altura del menú */
	color: #fff; /* Color de la fuente */
	font-family: Helvetica; /* Tipo de fuente */
	font-weight: bold; /* Negrita */
}

#menuPrincipal ul
{
	padding: 0; /* Para arrimar la lista al principio del menú */
}

#menuPrincipal li
{
	margin: 0 20px; /* Para separar mas los elementos de la lista*/
}

CLASE 10: VIERNES 18/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Hay 3 tipos de relaciones: 1:N, 1:1 y N:M. Las relaciones sirven para enlazar. En la mayoría de las tablas de datos debe haber siempre un identificador que será id_identificador. Por ejemplo: id_nombre o id_padres, etc.

Para centrar el menú en línea, en la parte de arriba:

#menuPrincipal li
{
	margin: 0 20px; /* Para separar mas los elementos de la lista*/
	line-height: 40px;
}

Añadimos estras directivas para separar el margen del menú principal y darle forma redondeada:

	margin-bottom: 20px;
	border-radius: 20px; /* Si se introducen dos valores funciona en diagonal */
	
Quedaría de esta manera:

#menuPrincipal
{
	background-color: #222266; /* Color del fondo */
	height: 40px; /* altura del menú */
	color: #fff; /* Color de la fuente */
	font-family: Helvetica; /* Tipo de fuente */
	font-weight: bold; /* Negrita */
	margin-bottom: 20px;
	border-radius: 20px 50px 10px 25px; /* Si se introducen dos valores funciona en diagonal */
}

Colocar una sombra:

box-shadow: desplazamientoDerecha desplazamientoAbajo difuminado color;

Ejemplo:

box-shadow: 10px 10px 5px #888;

Borde a la sección:

section
{
	background-color: #fcf;
	padding: 0 10px 0 210px;
	border: 2px solid #8a8; /* Los parámetros son ancura del borde, tipo de borde (solido = linea) y el color */
}

Sin embargo, en el menú lateral no aparece el borde de forma correcta. Para ello hacemos que también muestre el borde en la esquina, es decir, arriba y a la izquierda. De la siguiente manera:

aside
{
	background-color: #cce;
	float: left;
	width: 200px;
	border-left: 2px solid #8a8;
	border-top: 2px solid #8a8;

}

Los estilos pueden sobreescribirse. Por ejemplo, vamos a hacer que muestre borde en toda la sección menos en la parte inferior. Quedaría definido de esta manera:

section
{
	background-color: #fcf;
	padding: 0 10px 0 210px;
	border: 2px solid #8a8; /* Los parámetros son ancura del borde, tipo de borde (solido = linea) y el color */
	border-bottom: 0; /* A pesar de haber dicho que dibuje todo el borde, ahora hacemos que no muestre la parte de abajo. */
}

Directiva Important: Hace que prevalezca la directiva escogida a peasar de que se cambie. Un ejemplo:

section
{
	background-color: #fcf;
	padding: 0 10px 0 210px;
	border-bottom: 0 !important; 
	border: 2px solid #8a8;
}

A pesar de que luego le decimos que dibuje el borde entero, estamos estableciendo que tiene que respetar si o si el borde inferior 0, es decir, que no se dibuje.

Ahora introducimos un poco mas hacia dentro el contenido del menú lateral:

aside
{
	background-color: #cce;
	float: left;
	width: 200px;
	border-left: 2px solid #8a8;
	border-top: 2px solid #8a8;
	padding-left: 20px;
	box-sizing: border-box; /* Ignora el tamaño del borde y margenenes internos para meterlo en el interior. Es decir, no crece mas aunque cabmies el ancho de los margenes internos */

}

Sin embargo, al introducir el padding también se amplia el tamaño de la caja, con lo cual hace descuadrar con el tamaño de la sección. Para ello se utiliza la directiva box-sizing: border-box

Fecha y hora:
Añadimos la directiva datetime con una fecha justo debajo del hgroup. De esta manera:

			<hgroup>
				<h2>Mi primera entradada</h2>
				<h3>Aquí cuento mi primera entrdad</h3>
			</hgroup>
			<time datetime="2016-11-18" pubdate="pubdate">Publicado el 18/11/2016</time>
			
Esto se utiliza para la web semántica, y que los buscadores sepan que esto corresponde a la fecha de publicación.
 
Etiqueta Address: Sirve para colocar la dirección o quien ha hecho la página. Además de publicar el contenido en cursiva, ayuda a que los buscadores lo identifiquen como dirección:

		<footer id="pieDePagina">
		<small>
		Copyright &copy;. Todos los derechos reservados. 
			<address>
				Jose Luis Martín Ávila: joseluis_f1@hotmail.com
			</address>
		</small>
		</footer>
		
Mas etiquetas:
	- Blockquote: Sirve para citar textos de otros autores
		<blockquote>Texto de la cita</blockquote>
	- Mark: Remarca un texto, parecido al de un rotulador.
		<mark>Esto es una etiqueta de mark</mark>
	- Cite: Sirve para citar contenido, al igual que blockquote. Generalmente se usa para citar dentro de un texto en lugar de estar aparte
		<cite>Esto es otra cita</cite>
	- Code: Sirve para que meustre contenido en letar monoespaciada, dando a ver que se trata de código informático.
		<code>Muestra codigo</code>
		
Mas directivas de css:
	- Hijo directo. De la misma forma que ponemos por ejemplo #menuPrincipal li, afecta a todos los li dentro del menú principal, también funcionaría si hubiera mas etiquetas entre medio. Si ponemos >, obligamos a que solo se modifiquen los que están justo debajo. Por ejemplo aside > p{hoja de estilos} no funcionaría si el código html estuviera de eta forma: <aside><span><p></p></span></aside>. Sin embargo, si funcionaría si estuviera de esta forma: <aside><p></p></aside>
	- Aplicar estilos a clases adyacentes:
	h2 + h3
	{
		font-size: 60px;
	}
	Se aplcian a todos los h2 y h3 que sean hijos del miso padre. Por ejemplo, del hgroup de la práctica. Es poco utilizado.
	- *: Por ejemplo #menuPrincipal * div. Afecta a todos los divs que NO sean hijos directos de menuPrincipal
	- selectores: Por ejemplo p[name="hola"]: Afecta a todos los párrafos que tengan algún atributo que se llame hola. Esto se puede aplicar a muchas otras etiquetas y clases.
	- p:first-child: Afecta a todos los primeros hijos p de un mismo padre. Aplicable a todos los hijos de la etiqueta que se establezca. Por ejemplo:
	
			aside p:first-child
			{
				font-size: 40px;
			}
			
	De esta forma solo el primer párrafo de aside se vería afectado. También se puede usar last-child o el enesimo: p:nth-child(2) En este caso sería el segundo. También se puede poner odd que significa impar o even, que significa par u only-child (por ejemplo p:only-child) que se aplica si solo tiene un hijo.
	
	Diferencias entre:
	
	p.nombre{}		Afecta a todos los párrafos que tengan la clase nombre.
		Ejemplo: 	<p class="nombre>
	p .nombre{}		Afecta a todos los elementos descendientse de párrafo que tengan la clase nombre.
		Ejemplo:	<p><div class="nombre">
	p, .nombre{}	Afecta a todos los elementos que sean párrafos o tengan la clase nombre.
		Ejejplo:	<p>
					<div class="nombre">

######################################################### P H P #########################################################

PHP: Lenguaje de procesado de hipertexto

Primera página PHP:

index.php:

<!DOCTYPE html>
<html lang="es">
<html>
<head>
	<title>Mi primera página PHP</title>
</head>
<body>
	<?php
	phpinfo();
	?>
</body>
</html>

Todo lo que se ponga entre <?php ?> no aparece en el navegador. Página en la que creamos una variable (nombre), le damos un valor y nos lo muestra por pantalla

<?php
		$nombre = "Jose Luis";
?>

<!DOCTYPE html>
<html lang="es">
<html>
<head>
	<title>Mi primera página PHP</title>
</head>
<body>
	<p>Hola, me llamo <?php echo($nombre); ?></p>
</body>
</html>

Colocando la declaración de la variable fuera, el código queda mas limpio

También funcionaría si se utiliza esta línea (solo para echo)

<p>Hola, me llamo <?=($nombre); ?></p>
					
CLASE 11: LUNES 21/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Tipos de datos:

- Cadena: $cadena = "Esto es una cadena"; . Todo lo que esté entre comillas es una cadena de texto
- Entero: $entero = 33; Esto es un número entero
- Float: $123.67; En php no hay diferencia entre float y double.
- Booleano: $bool = TRUE;
- Nulo: $nulo = NULL;

Marca de fin de línea:
- \n
- PHP_EOL. Es preferible usar esta anotación al ser mas universal.

Concatenar cadenas: .
Ejemplo: <?php echo "Hola, tengo " . $edad . " años </br>" ?>
Ejemplo2:

	<?php
		$numero1 = 2;
		$numero2 = 5;
		echo "La suma de $numero1 y $numero2 es " . ($numero1 + $numero2) . "<br>";
	?>

Saber el tipo de una variable: Gettype
echo gettype($numero1);

Ejercicio:
Crear una variable de tipo cadena, integer, float y boolean.
Crear 4 frases que digan "La variable X es de tipo":

	<?php 
		$varCad = "Cadena de Prueba";
		$varInt = 8;
		$varFloat = 23.54;
		$varBool = True;
		echo "<p>La variable varCad vale " . $varCad . " y es de tipo " . gettype($varCad) . "</p>" . PHP_EOL;
		echo "<p>La variable varInt vale " . $varInt . " y es de tipo " . gettype($varInt) . "</p>" . PHP_EOL;
		echo "<p>La variable varFloat vale " . $varFloat . " y es de tipo " . gettype($varFloat) . "</p>" . PHP_EOL;
		echo "<p>La variable varBool vale " . $varBool . " y es de tipo " . gettype($varBool) . "</p>" . PHP_EOL;
	?>

Operadores:	
	<?php
		$valor1 = 3;
		$valor2 = 7;
		echo $valor1 + $valor2 . "</br>"; /* Suma */
		echo $valor1 - $valor2 . "</br>"; /* Resta */
		echo $valor1 * $valor2 . "</br>"; /* Multiplicación */
		echo $valor1 / $valor2 . "</br>"; /* División */
		echo $valor2 % $valor1 . "</br>"; /* Módulo (Resto) */
		echo $valor1 ** $valor2 . "</br>"; /* Potencia */
	?>

Ejercicio:
Definir un número entero del 1 al 9 y realizar su tabla de multiplicar:

	<?php
	$n = 7; /* Número a multiplicar */
	echo "<center><table border=1>
	<tr>
		<td colspan=2 ><h2>Tabla del " . $n . "</h2></td>
	</tr>";
		for ($i = 1; $i <= 10; $i++) /* Bucle que repite una acción 10 veces */
		{
			echo "<tr>
			<td>" . $n . " x " . $i . "</td>
			<td>" . $n*$i . "</td>
			</tr>"; /* Primera columna y segunda columna */
		}
		echo "</table></center>" /* Cerramos la tabla y su centrado*/
	?>

Cheat sheet php (funciones mas utilizadas):
http://www.sindikos.com/wp-content/uploads/2011/09/php-cheat-sheet-v2.png


Operación +=
$var += 1; es lo mismo que $var = $var + 1;
Tamién funcionan las operaciones -=, *=, /= e %=

Operadoes unarios (de 1 sola variable):
$var = TRUE; /* pone a  verdadero */
!$var; /* Niega el valor */
$var++; /* Incrementa en 1 el valor de la misma */
$var--; /* Reduce en 1 el valor de la misma */

Declaración de constantes:
define("NOMBRE", valor);
Ejemplo:
define("NUMERO", 7);

Otra forma de concatenar cadenas:
$cadena = "Hola ";
$cadena .="mundo";
echo $cadena;

Condiciones:

$minumero = 3;
echo "mayor que 5: " . ($minumero > 5) . "<br>";
echo "mayor o igual que 5: " . ($minumero >= 5) . "<br>";
echo "menor que 5: " . ($minumero < 5) . "<br>";
echo "menor que 5: " . ($minumero <= 5) . "<br>";
echo "negar mayor que 5: " . !($minumero > 5) . "<br>";
echo "es igual que 5: " . !($minumero == 5) . "<br>";
echo "es distinto a 5: " . !($minumero != 5) . "<br>";

Estructuras de control:
- IF:
	if (condicion)
	{
		acciones;
	}
	
	Ejemplo:
	<?php
	$var1 = 4;
	$var2 = 7;

	if ($var1 < $var2)
	{
		echo "La variable 1 es mas pequeña que la variable 2";
	}
	?>
	
Ejercicio: Comprobar si un número es múltipo de otro:

	<?php
	$var1 = 20;
	$var2 = 5;

	if (($var1 % $var2) == 0)
	{
		echo "<p>" . $var1 . " es múltiplo de " . $var2 . "</p>"; /* Un valor es múltiplo de otro si es divisible entre el (resto divison = 0) */
	}
	?>


CLASE 12: MARTES 22/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Agregamos la condición en caso de que no se cumpla (else)

	<?php
	$var1 = 21;
	$var2 = 5;

	if (($var1 % $var2) == 0)
	{
		echo "<p>" . $var1 . " es múltiplo de " . $var2 . "</p>"; /* Un valor es múltiplo de otro si es divisible entre el (resto divison = 0) */
	}
	else
	{
		echo "<p>" . $var1 . " no es múltiplo de " . $var2 . "</p>"; /* Si no es divisible, muestra este mensaje */
	}
	?>
	
Comprobar si un número es múltiplo de otro y que además sea par el mas pequeño de los dos.

	if ((($var1 % $var2) == 0) && (($var2 % 2) == 0))
	{
		echo "<p>" . $var1 . " es múltiplo de " . $var2 . " y además " . $var2 . " es número par</p>";
	}
	else
	{
		if(!($var1 % $var2) == 0)
		{
			echo "<p>El número $var1 no es múltimplo de $var2<p>"; /* Si no es divisible, muestra este mensaje */
		}
		if (!($var2 % 2) == 0)
		{
			echo "<p>El número $var2 no es par</p>";
		}
	}
	
Mismo ejercicio pero aplicando sentencias elseif:
	
	if (($var1 % $var2) != 0)
	{
		echo "<p>El número $var1 no es múltimplo de $var2<p>"; /* Si no es divisible, muestra este mensaje */
	}
	elseif (($var2 % 2) != 0)
	{
		echo "<p>El número $var2 no es par</p>";
	}
	else
	{
		echo "<p>" . $var1 . " es múltiplo de " . $var2 . " y además " . $var2 . " es número par</p>";
	}
	
Switch: Permite distinguir entre variso casos y escoger uno. Ejemplo:

	switch ($var)
	{
		case 1:
			echo "<p>$var vale 1</p>";
			break;
		case 2:
			echo "<p>$var vale 2</p>";
			break;
		case 3:
			echo "<p>$var vale 3</p>";
			break;
		
		default:
			echo "<p>$var no vale ni 1, ni 2 ni 3</p>";
			break;
	}
	
Como hacer que aparezca el texto de la variable: \

\$var aparecerá en la web como $var, en lugar del valor de la variable. Cuando se le añade \ delante de un caracter este aparece. Funciona por ejemplo, con \"

Ejercicio: Crear una variable llamda día y según el valor que diga que día es.

	switch ($dia)
	{
		case 1:
			echo "<p>Hoy es lunes</p>";
			break;
		case 2:
			echo "<p>Hoy es martes</p>";
			break;
		case 3:
			echo "<p>Hoy es miércoles</p>";
			break;
		case 4:
			echo "<p>Hoy es jueves</p>";
			break;
		case 5:
			echo "<p>Hoy es viernes</p>";
			break;
		case 6:
			echo "<p>Hoy es sábado</p>";
			break;
		case 7:
			echo "<p>Hoy es domingo</p>";
			break;			
		default:
			echo "<p>Ese día no es válido</p>";
			break;
	}
	
Bucles while: Repite una acción mientras se cumpla una condición:

	$numero = 10;
	while($numero < 20)
	{
		echo "Hola<br>"; 
		$numero++;
	}

En	este caso escribiriá Hola 10 veces. En cada vuelta del bucle se incrementa en 1 el valor de número.

Ejercicio:

Realizar una tabla de multiplicar utilizando bucles while

	/* Ejercicio de tablas de multiplicar utilizando bucle while*/

	$n = 9; /* Número a multiplicar */
	$i = 1; /* Variable contador */
	echo "<center><table border=1>
	<tr>
		<td colspan=2 ><h2>Tabla del " . $n . " utilizando While</h2></td>
	</tr>";
	while ($i < 11)
	{
		echo "<tr>
		<td>" . $n . " x " . $i . "</td>
		<td>" . $n*$i . "</td>
		</tr>"; /* Primera columna y segunda columna */
		$i++;
	}
	echo "</table></center></br>"; /* Cerramos la tabla y su centrado*/
	

Otra forma de resolver el problema:

	<table border="1">
	<?php
		$multiplicador = 1;
		$numero = 7;
		while ($multiplicador <= 10)
		{
	?>
		<tr>
		<td>
			<?= $numero ?> x <?= $multiplicador ?>
		</td>
		<td>
			<?= $numero * $multiplicador ?>
		</td>
		</tr>
		<?php $multiplicador++; 
	}
	?>
	</table>
	
Estructura Do while
Realiza una acción, y luego la repite tantas veces como quieras

do
{
	Acciones
} while(condicion);

Ejemplo:

	<?php

		$valor = 10;
		do
		{
			echo "Hola</br>"; /* Lo ejecutará una vez */
		} while ($valor < 5);

	?>


CLASE 13: MIÉRCOLES 23/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Tipos de aplicaciones:
- Aplicaciones de escritorio: Se instalan y ejecutan en el ordenador. Utiliza los recursos locales para ejecución y tiene un único usuario.
	Inconvenientes: Inadecuado para entornos colaborativos. Mútliples instalacinoes del mismo producto, problemas con versiones, problemas si hay distinto sistemas operativos, posible duplicidad de datos en las distintas instalaciones y descentralización de la seguridad.
- Aplicaciones cliente-servidor: Servidor: núcleo de la aplicación ejecutando en un ordenador conectado a la red. Contiene Lógica, reglas de negcio y acceso a los datos. En el cliente, parte de la aplicación que se eejecuta en el ordenador del suario. Presenta la interfaz de usuario, envía las peticiones al servidor y muestra los resultados.
	Tipos de cliente:
		- Cliente pesado: Efectúa algunas tareas por su cuenta liberndo al servidor de ellas
		- Cliente ligero: depende completamente del servidor. Puede ser una aplicación que genera la vista usando ventanas o puede ser un navegador qu recibe páginas HTML del servidor.
	Ventajas:
		- Solo los ordenadores servidores tienen requierimientos de potencia
		- Administración del sistema simplificada. Especialmetne en el caso de una web
		- Centralización de la seguridad en el servidor
		- Sincronización de distintos usuarios accediendo a los datos a través de un único punto (el servidor)
	Inconvenientes:
		- Dependencia de la conexión a una red
		- Limitaciones de ancho de banda.
		- Si los datos están en un solo sitio se convierte en carne de cañon.

Arquitectura de 3 niveles:
- Nivel cliente: Presenta la interfaz de usuario e interactúa con el msimo.
- Nivel intermedio: Servidor que recibe las peticiones del cliente, las procesa y devuelve los resultados.
- Nivel de datos: Almacena y recupera la información que el nivel intermedio solicita.

Características de la arquitectura:
- Flexibilidad en la implementación de cada nivel.
- Permite aumentar la capacidad de cada nivel por separado: Escalabilidad.
- Aprovechamiento del nivel intermedio para alojar múltiples aplicaciones.
- Aprovechamiento del nivel de datos para almacenar la información de más de uan aplicación.
- Centralización de múltiples servicios en el nivel intermedio (seguridad, logs, etc).
- Centralización de la gestión de copias de seguridad en el nivel de datos.

Tecnologías en el nivel de cliente:
- Cliente pesado:
	- Aplicaciones que se instalan en el ordenadro cliente.
	- Se asemeja a una aplicación de escritorio y se lmita a comunicar con el servidor para enviar peticiones y mostrar las respuestas.
	- No efectúa ningún proceso.
	
Navegadores web:
	- Apliaciones con clientes ligeros.
	- No precisa ninguna instalación especial en el cliente.
	- Prácticamente cero mantenimiento a este nivel.

Tecnologías implicadas en alicaciones web:
HTML: Lenguaje de marcado basado en etiquetas con el que se puede describir una vista que mostrará un navegador.
CSS: Lenguaje creado para describir la apariencia que tendrá una vista HTML en el navegador. Se puede centralizar el aspecto de toda una aplicación entera con CSS.
JSON: JavaScript Object Notation, formato ligero pensado para el intercambio de datos entre el navegador (usando javascript) y el servidor.
XML: Extensible markup Languaje: Lenguaje de marcado con etiquetas usado para intercambio de datos con el servidor.
AdobeFlash: Tecnología propietaria que permiet a aplicaciones cliente ricas ejecutarse en un navegador. Necesita un plug-in en el navegador del cliente. En desaparición desde 2015
Applets: Tecnoloía relacionada con el lenguaje java que permite ejecutar aplicaciones ricas en un navegador. Necesita que el ordenador que muestar la web tenga instalada una Máquina Virtual de Java.
Java Web Start: Otra tecnología para desarrollar clientes ricos que se ejecutan en un navegador. Necesita la instalación previa de una Máquina Virtual de Java.
Servidor HTTP:
	- Entregan contenido HTML (estático) a los navegadores
	- Cada contenido es accedido mediante una URL distinta
	- Usan el protocolo HTTP

Tecnologías en el nivel intermedio:
Servidores de aplicacinoes Java
Un servidor desarrollado exclusivamente para ejecutar código java. Definido en una especificación, implementado por distintos fabricantes:
	- Tomcat (Apache)
	- JBoss (Redhat)
	- Websphere (IBM)
	- WebLogic (Oracle)

Base de datos relacionales
- Existentes desde los años 60 y el modelo de base de datos mas extendido
- Las entidades se almacenan en tablas
- Relaciones entre entidades
- ACID (Atomicidad, consistencia, aislamiento y durabilidad)
	Atomicidad: Operaciones atomicas, se hacen todas de una vez.
	Consistencia: No hay datos duplicados y está bien formada.
	Aislamiento: Puede etar perfectamente en otro servidor.
	Durabilidad: Los datos se guardan de forma permanente.

SQL:
DDL: Lenguaje de Descripción de datos. Para generar y modificar la base de datos
	CREATE TABLE cliente
	{
		nombre varchar(50);
		edad integer;
	};
DML: Lenguaje de manipulación de datos. Para trabajar cno los datos almacenados.
	SELECT nombre, edad FROM cliente;
	
Bases de datos no relacionales:
- No usan el lenguaje de consulta SQL
- No usan tablas
- No cumplen ACID
- Enfocadas a sistemas que requieren alta escalabilidad

Tipos:
- Orientadas a documentos: La información no se guarda en tables si no en documetnos con formato XML o JSON. Cuenta con un lenguaje de búsqueda
- BBDD clave/valor : Guarda la informaci´no en estructuras de datos tipo diccinoario. Cada elemento se asocia a una clave y solo puede consultarse por clave:
	Ejemplo:
	"111223A":{"nombre":"alberto","apellidos":"garcía"}
	"445533B":{"nombre":"jesús","apellidos":"garcía"}
Orientadas a grafos: Se almacena la información como nodos de un grafo. Priman las relaciones entre los datos (aristas del grafo). Ejemplo:
	- Buscar trayectos en un mapa
	- Relaciones entre personas
	
Protocolos de comunicación entre lso distintos niveles: Normas que se deben cumplir para poder relacionarse con un elemento de red.
URL: Uniform Resource Locator. Define la manera en la que se accede a un recurso de red
	- Protocolo
	- Dirección del ordenador dond eestá el recurso
	- Ruta al recurso en dicho ordenador
HTTP: Hypertext Transfer Protocolo: Define las peticiones y las respuesta den una arquitectura web. Permite transferir recursos y el enrutamiento se realiza mediante una URL.
HTTPS: Versión segura del protocolo HTTP. Cifra los datos transmitidos con SSL/TLS.
RMI/RPC: Protocolos utilizados en las comunicaciones cliente/servidor. Apenas se usa actualmente

Protocolos entre los niveles intermecio y de datos:
Propietarios: Habituales en los SGBD. Es necesario programar un conector adecuado que normalmente proporciona el fabricante del SGBD
HTTP+JSON: Habituales en bases de datos noSQL. Se transfieren docuemntos JSON medianet peticiones/respuestas HTTP.

---- PROTOCOLO HTTP -----

Protocolo de comunicación principal pra la web.
- Desarrollado por W3C (World wide Web Consortium).
- Versión mas actual: 1.2 (desde 2000). La más usada es la 1.1.
- Protocolo orientado al intercambio de mensajes de petición y respuesta.
- Mensajes de texto plano.
- Independiente de la plataforma del cliente y del servidor.

protocolo://maquina[:puerto][/ruta del recurso]
Protocolo: HTTP, HTTPS, FTP, FILE, etc.
Máquina: Dirección IP del ordenador que guarda el recurso.
Puerto: Puerto en el que se escucha el servidor. Si no se especifica se sobreentiende el 80.
Ruta: Ruta, representada con carpetas reales o no al recurso concreto.

1. El clietne solicita una conexión TCP a la dirección IP y puerto indicado en la URL.
2. El servidor acepta la conexión. Se abre un socket.
3. El cilente envía la petición HTTP a través de la conexión establecida.
4. El servidor recbe la petición y gener una repuesta.
5. El cliente recibe la respuesta y la proceas. (por ejemplo, mostrar una página web).

Estructura de uan petición HTTP
Documento de texto plano. Secciones cabecera y cuerpo separdas por una línea en blanco
Petición
	- Método: Indica la acción a realicar sobre el recurso indicado
		HEAD, GET, POST, PUT, DELETE, TRACE, OPCIONES Y CONNECT. GET, POST y HEAD son los mas utilizados
	- Dirección del recurso: Ruta al recurso
	- Versión: Versión del protocolo (HTTP/1.1, HTTP/1.2)

GET: Solicita un recurso al servidor. puede incluri parámetros concatenados en la URL
POST: Envía un recurso al servidor para su inserción. Tanto los parámetros como el recurso a isnertar se envíanen el cuerpo del mensaje.
HEAD: Similar al GET pero devolviendo solo información sobre el recurso.

CLASE 14: JUEVES 24/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

SUMA

CLASE 15: VIERNES 24/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Para modificar el css de los enlaces:

a:link
{
}

a:active
{
}

a:hover
{
	text-decoration:none
}

a:visited
{
}

Estructura de bucle for:

for($i = 0; $i < 10; $i++)
{
}

Ejemplo:

<?php
for($i = 0; $i < 10; $i++)
{
	echo "Número $i<br/>";
}
?>

Break: Para forzar la salida de un bucle
continue: Sirve para terminar la iteración y continuar el bucle, sin ejecutar las acciones que están debajo de el. Ejemplo que muestra números impares, pero mu estra 10 veces "Esto es una iteración".

	<?php
	for($i = 0; $i < 10; $i++)
	{
		echo "Esto es una iteración<br/>";
		if (($i % 2) == 0)
		{
			continue;
		}
		echo "Número $i<br/>";
	}
	?>
	
Ejercicio: Realizar una tabla de 10x10 con los números en su interior:

	<?php
	echo "<center><h2>Tabla del 1 al 100</h2><table border=1><tr>";
	for($i = 1; $i <= 100; $i++)
	{
		echo "<td> " . $i . " </td>";
		if (($i % 10) == 0)
		{
			echo "</tr><tr>";
		}
	}
	echo "</tr></table></center>";
	?>
	
Mismo ejercicio pero utilizando dos bucles for:

	<?php
	/* Mismo ejercicio utilizando dos bucles */
	echo "<center><h2>Tabla del 1 al 100 utilizando dos bucles</h2><table border=1>";
	for($i = 0; $i < 10; $i++)
	{
		echo "<tr>";
		for($j = 1; $j <= 10; $j++)
		{			
			echo "<td>" . ($j + 10*$i) . "</td>";
		}
		echo "</tr>";
	}
	echo "</table></center>";
	?>
	
Ejercicio: Realizar un cuadro de tablas de multiplicar, donde haya dos cabeceras y en medio esté el número de las dos cabeceras multiplicadas:

	<?php
	/* Ejercicio de tabla de multiplicar genérica */
	$maximo = 10;
	/* Cambiando el valor de maximo cambiamos el ancho y alto de la tabla */
	echo "<center><h2>Tabla de multiplicar genérica</h2><table border=1>";
	echo "<thead><tr><th></th>";
	for($i = 1; $i <= $maximo; $i++)
	{
		echo "<th>" . $i . "</th>";
	}
	echo "</tr></thead></tbody>";
	for($i = 1; $i <= $maximo; $i++)
	{
		echo "<tr><th>" . $i . "</th>";
		for($j = 1; $j <= $maximo; $j++)
		{			
			echo "<td>" . ($j*$i) . "</td>";
		}
		echo "</tr>";
	}
	echo "</tbody></table></center>";
	?>
	
CLASE 16: LUNES 28/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Arrays:

$nombre =array(elementos);

Ejemplos:

	$ingredientes =array("huevos", "patatas", "bacalao");
	$impares = array(1, 3, 5, 7);

Otra forma de añadir elementos, también utilizada:

	$pares = [2, 4, 6, 8];

Imprimir el contenido de los arrays:

print_r($pares);

De esta forma se puede ver mejor el contenido de los arrays:

		echo"<pre>";
		print_r($pares);
		echo"</pre>";

Acceder a un elemento concreto de un array:
		
echo $impares[2];

Ejercicio: Crear un array llamado bocadillo que tenga varios ingredientes y mostrarlos todos sin usar print_r:


		$bocadillo =array("Jamón serrano", "Queso fundido", "Pan de chapata");

		echo "<h3>Ingredientes: </h3></br>";
		for($i = 0; $i < count($bocadillo); $i++)
		{
			echo "<p>" . $bocadillo[$i] . "</p>";
		}
		
Añadir elementos nuevos a un array. Se pueden usar varios métodos:

		$bocadillo[3] = "Tortilla";
		$bocadillo[] = "ketchup";
		
Modificar un elemento, con ejemplo.

		$bocadillo[1] = "Queso Cheddar";

Eliminar elemento de un vector:

		unset($bocadillo[3]);
		
Eliminar un vector entero:

		unset($bocadillo);
		
Arrays multidimensaionales:

		$numerosPequenos = [1, 2, 3, 4];
		$numerosGrandes = [2000, 3000, 5000, 8000];

		$todosLosNumeros = [$numerosPequenos, $numerosGrandes];

		echo $todosLosNumeros[0][2]; /* Esto mostraría un 3*/
		echo $todosLosNumeros[1][3]; /* Esto mostraría un 8000*/

Ejercicio: Mostrar todos los números primos menores que 100 por pantalla.

/* Ejercicio: Mostrar todos los números primos menores que 100 */

		/* Declaración de variables */
		echo "<h3>Numeros primos menores que 100: </h3>";
		for ($i = 2; $i < 100; $i++)
		{
			$esPrimo = true;
			$divisor = 2;
			while (($divisor <= ($i/2)) && ($esPrimo == true))
			{
				if (($i%$divisor) == 0)
				{
					$esPrimo = false;
				}
				$divisor++;
			}
			if ($esPrimo == true)
			{
				echo $i . ", ";
			}
			$esPrimo = true;
		}

		/* Otras formas de realizarlo */
		echo "<h3>Numeros primos menores que 100: </h3>";
		for ($numero = 2; $numero <= 100; $numero++)
		{
			$esPrimo = true;
			for ($i = 2; $i <= ($numero/2) && $esPrimo == true; $i++)
			{
				if (($numero % $i) == 0)
				{
					$esPrimo = false;
				}
			}
			if ($esPrimo)
			{
				echo $numero . ", ";
			}
		}
		
Arrays asociativos: En lugar de usar números como índice, se usa texto:

		$persona = 
		[
		"nombre" => "Paco",
		"apellidos" => "Gómez Pacheco",
		"edad" => 55,
		"sexo" => "V"
		];

		echo"<pre>";
		print_r($persona);
		echo"</pre>";

		/* Ejemplo de mezcla de Arrays */
		
		$gente =
		[
			["nombre" => "Paco", "apellidos" => "Gómez Pacheco", "edad" => 55, "sexo" => "V"],
			["nombre" => "Marina", "apellidos" => "Sánchez Cortés", "edad" => 23, "sexo" => "M"]
		];

		echo"<pre>";
		print_r($gente);
		echo"</pre>";

		echo $gente[1]["edad"]; /* Esto mostraría la edad de marina*/
		
Otro ejemplo de mezcla de arrays asociativos:

echo "<br/>";

		$alumnos = 
		[
			"chicos" =>
			[
				["nombre" => "Paco", "apellidos" => "Pobre Sinapellidos", "edad" => 21, "sexo" => "V"]
			],
			"chicas" =>
			[
				["nombre" => "Marina", "apellidos" => "Sánchez Gordián", "edad" => 23, "sexo" => "M"]
			]
		];

		echo $alumnos["chicos"][0]["edad"]; /* Esto mostraría la edad de Paco*/

Contar elementos de un array: Count(array). Ejemplo:

		$ropa = ["Pantalón", "Camisa", "Zapatos"];
		echo "<p>" . count($ropa) . "</p>";		

Saber si un elemento está o no en el array. Ejemplo:

		if (in_array("Pantalón", $ropa))
		{
			echo "<p>Hay un pantalón</p>";
		}
		else
		{
			echo "<p>Hace falta mas ropa</p>";	
		}

Ejercicio:

Eliminar duplicados de un array y meterlos en otro array:

		$numeros = [11, 3, 14, 15, 11, 9, 2, 3, 16 ,14, 19, 7, 6, 1, 9, 3, 18, 2];
		$numerosNoRepetidos = [];

		for ($i = 0; $i < count($numeros); $i++)
		{
			/* Buscar si está repetido el número */
			$repetido = false;
			$nVeces = 0;
			for($j = ($i + 1); $j < count($numeros) && !$repetido; $j++)
			{
				if ($numeros[$i] == $numeros[$j])
				{
					$repetido = true;
				}
			}
			if (!$repetido)
			{
				$numerosNoRepetidos[] = $numeros[$i];
			}
		}

		echo "<h3>Array original:</h3><pre>";
		print_r($numeros);
		echo "</pre><h3>Array nuevo:</h3><pre>";
		echo "</pre><h3>Array nuevo:</h3><pre>";
		print_r($numerosNoRepetidos);
		echo "</pre>";

Otra forma de realizar el ejercicio:

		for ($i = 0; $i < count($numeros); $i++)
		{
			/* Buscar si está repetido el número */
			if (!in_array($numeros[$i], $numerosNoRepetidos))
				$numerosNoRepetidos[] = $numeros[$i];
		}		

CLASE 17: MARTES 29/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Foreach
Ejemplo:

	<?php

	$oracion = ["esto", "es", "una", "frase"];

	foreach ($oracion as $palabra)
	{
		echo $palabra . "<br/>";
	}

	?>
	
Por cada vuelta de bucle, mete en la variable palabra el contenido de la iteración en el vector oracion. Esta función es útil para recorrer arrays.

Ejemplo con arrays de índices asociativos:

	$grupo =
	[
		"cantante" => "Julia",
		"guitarra" => "Jimmy Hendrix",
		"bateria" => "Bonifacio",
		"teclista" => "Indalecio",
		"bajo" => "Lupicinio"
	];

		foreach ($grupo as $componente => $integrante)
	{
		echo "el " . $componente . " es " . $integrante . "<br/>";
	}
	
Arrays multidimensionales:
	
		$array_multi =
	[
		[1, 2, 3],
		[4, 5, 6],
		[7, 8, 9]
	];

	echo "<h3>Ejercicio de arrays</h3>";
	foreach ($array_multi as $objeto)
	{
		echo "[ ";
		foreach ($objeto as $numero)
		{
			echo $numero . ", ";
		}
		echo " ]";
	}
	
Ejercicio de números primos utilizando foreach:

	echo "<h3>Numeros primos menores que 100: </h3>";
	$primos = [];
	for ($i = 2; $i < 100; $i++)
	{
		$esPrimo = true;
		foreach ($primos as $nPrimo)
		{
			if (($i % $nPrimo) == 0)
			{
				$esPrimo = false;
			}
		}
		if ($esPrimo == true)
		{
			$primos[] = $i;
			echo $i . ", ";
		}
		$esPrimo = true;
	}

Ejercicio: Realizar un array de personas (alumnos) que estén en varios cursos y muestre todos los datos de esas personas dado un determinado curso

	$personas =
	[
		[
			["nombre" => "Anakin", "apellidos" => "Skywalker", "edad" => 19],
			["nombre" => "Han", "apellidos" => "Solo", "edad" => 19],
			["nombre" => "Mace", "apellidos" => "Windu", "edad" => 18]
		],
		[
			["nombre" => "Lavender", "apellidos" => "Brown", "edad" => 21],
			["nombre" => "Harry", "apellidos" => "Potter", "edad" => 21],
			["nombre" => "Hermione", "apellidos" => "Granger", "edad" => 21]
		],
		[
			["nombre" => "Varian", "apellidos" => "Wrymm", "edad" => 23],
			["nombre" => "Sylvanas", "apellidos" => "Brisaveloz", "edad" => 23],
			["nombre" => "Tirion", "apellidos" => "Vadin", "edad" => 25]
		]
	];

	$curso = 2;

	echo "<h3>Alumnos de " . $curso . "º curso:</h3>";
	foreach ($personas[$curso] as $alumno)
	{
		echo "<p>" . $alumno["nombre"] . " " .  $alumno["apellidos"] . " tiene " . $alumno["edad"] . " años.</p>";
	}

Operadores de arrays:

Unión:

	$frutas  = [1 => "manzana", 2 => "tomate", 3 => "naranja"];
	$verduras = [1 => "apio", 4 => "tomate", 5=> "lechuga"];

	/* Concatenación */

	$union = $frutas + $verduras;

	echo "<pre>";
	print_r($union);
	echo "</pre>";

	El resultado es: manzana, tomate, naranja, tomate, lechuga. Apio no lo guarda al tener el mismo id que manzana.
	
Comparación de arrays:	
	
		if ($array1 == $array2)
	{
		echo "<p>Los arrays son iguales</p>"; 
	}
	else
	{
		echo "<p>Los arrays son distintos</p>";
	}
	
	/* Resultado: Los arrays son iguales */

		if ($array1 === $array2)
	{
		echo "<p>Los arrays son iguales</p>"; 
	}
	else
	{
		echo "<p>Los arrays son distintos</p>";
	}
	
	/* Resultado: Los arrays no son iguales. Al usar 3 iguales compara tanto el orden del contenido como el tipo */
	
Cuando se usa == solo tiene en cuenta el contenido, pero no el orden ni el tipo. De la misma forma se puede usar el != y el !==

Operaciones de Arrays

	$diff = array_diff($frutas, $verduras);

En una resta (diff) se guardan los elementos de frutas que no están en verduras. No tiene en cuenta el índice, solo el valor.

	echo "<br><pre>";
	print_r($diff);
	echo "</pre>";

Intersección: En una intersección (diff) se guardan los elementos de frutas estén en verduras. No tiene en cuenta el índice, solo el valor.

	$intersec = array_intersect($frutas, $verduras);

	echo "<br><pre>";
	print_r($intersec);
	echo "</pre>";

Rellenado de arrays:
	- Primer parámetro: Índice inicial
	- Segundo parámetro: Número de veces
	- Tercer parámetro: Valor que se le asigna a cada una de las celdas.
	- En este caso tendriamso un array de 10 casillas con el valor 33 en cada una de ellas

	$fill = array_fill(0, 10, 33);

	echo "<br><pre>";
	print_r($fill);
	echo "</pre>";

Giro: Invierte el array. Es decir, el contenido pasa a ser índice y el índice pasa a ser el contenido

	$flip = array_flip($frutas);

	echo "<br><pre>";
	print_r($flip);
	echo "</pre>";

Inversión: Invierte el contenido del array. Es decir, primero pasa a ser el último y el último el primero

	$reverse = array_reverse($frutas);

	echo "<br><pre>";
	print_r($reverse);
	echo "</pre>";
	
	
	
CLASE 18: MIÉRCOLES 30/11/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCIONES CON ARRAYS Y EJEMPLOS DE USO DE LAS MISMAS:

array_keys: Sirve para extraer los índices de un array y guardarlos en otro

	$asociativo =
	[
		"nombre" => "Luis",
		"apellido" => "García",
		"edad" => 27
	];

	$keys = array_keys($asociativo);

	echo "<br><pre>";
	print_r($keys);
	echo "</pre>";

	/* array_values: Sirve para extraer los valores de un array y guardarlos en otro */
	$values = array_values($asociativo);

	echo "<br><pre>";
	print_r($values);
	echo "</pre>";

	/* Concatenación: array_merge. Junta arrays en 1, pero cambia los índices */
	$array1 = [1 => "Hola", 3 => "Hello", 4 => "Alo"];
	$array2 = [0 => "Adiós", 2 => "Adeu", 3 => "Aufwiedersehen"];

	$merge = array_merge($array1, $array2);

	echo "<br><pre>";
	print_r($merge);
	echo "</pre>";

	/* Extraer el último elemento: pop*/
	$ultimo = array_pop($array1);
	echo $ultimo . "<br/>";

	echo "<br><pre>";
	print_r($array1);
	echo "</pre>";

	/* Inserta un último elemento: push */
	array_push($array1, "nuevo");
	echo $primero . "<br/>";

	echo "<br><pre>";
	print_r($array1);
	echo "</pre>";

	/* Extrae el primer elemento del array */
	$primero = array_shift($array1);
	echo $primero . "<br/>";

	echo "<br><pre>";
	print_r($array1);
	echo "</pre>";

	/* Añade un nuevo elemento en primera posición */
	array_unshift($array1, "otro");

	echo "<br><pre>";
	print_r($array1);
	echo "</pre>";

	/* Devuelve la posición en la que está el elemento a buscar */
	$busqueda = array_search("Hello", $array1);
	if ($busqueda == NULL)
		echo "<p>No se ha encontrado el elemento</p>";
	else
		echo "<p>El elemento se encuentra en la posición " . $busqueda . "</p>";

	/* Escoger una porción de elementos de un vector */

	$letras = ["a", "b", "c", "d", "e", "f"];

	$porcion = array_slice($letras, 0, 3);
	echo "<br><pre>";
	print_r($porcion);
	echo "</pre>";

	/* Eliminar elementos repetidos: array_unique */
	$numeros = [1, 2, 3, 4, 1, 2, 5, 3, 5, 5, 7, 1, 3, 4, 5];
	$unique = array_unique($numeros);
	echo "<br><pre>";
	print_r($unique);
	echo "</pre>";

	/* Mostrar cada elemento del array separados por el contenido el primer parámetro. Devuelve una cadena de texto. */
	echo implode(", ", $numeros);

	/* Separar una cadena mediante el primer parámetro y lo mete en un array */
	$cadena = "Hola me llamo Jose Luis";
	$resultado = explode(" ", $cadena);
	echo "<br><pre>";
	print_r($resultado);
	echo "</pre>";

	/* FUNCIONES PARA ORDENAR ARRAYS */

	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	/* Ordenar por orden alfabético y se carga los índices */
	sort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";

	/* Ordenar por orden alfabético inverso y se carga los índices */
	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	rsort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";

	/* Ordenar por orden alfabético y mantiene la correspondencia con los índices */

	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	asort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";

	/* Ordenar por orden alfabético inverso y mantiene la correspondencia con los índices */

	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	arsort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";

	/* Ordena alfabeticamente un array por indices */
	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	ksort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";

	/* Ordena alfabeticamente inverso un array por indices */
	$comida = 
	[
		2 => "Bacalao",
		1 => "Huevos",
		5 => "Leche",
		0 => "Pan",
		4 => "Fruta"
	];

	krsort($comida);
	echo "<br><pre>";
	print_r($comida);
	echo "</pre>";
	
FUNCIONES

Ejemplo de función:
Cuando se llame a esta función ejecutará las acciones que hay definidas dentro.

	function saludar()
	{
		echo "Hola mundo";
	}

Llamada a la función:

	saludar();	


CLASE 19: JUEVES 1/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

SUMA

CLASE 20: VIERNES 2/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------	

TUTORÍAS.

CLASE 21: LUNES 5/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------	

Bases de datos: MySQL.

En el xamp, pulsando en admin, podemos acceder al administrador de la base de datos.

En nueva, añadimos el título y en el tipo: utf8_spanish_ci

A_I: Autoincrementable

CREATE TABLE `inmobiliaria`.`Clientes` ( `id_clientes` INT NOT NULL AUTO_INCREMENT , `nombre` VARCHAR(20) NOT NULL , `apellidos` VARCHAR(30) NOT NULL , `fecnac` DATE NOT NULL , `dni` VARCHAR(9) NOT NULL , `direccion` VARCHAR(40) NOT NULL , `email` VARCHAR(30) NOT NULL , `telefono` VARCHAR(20) NOT NULL , PRIMARY KEY (`id_clientes`), UNIQUE (`dni`)) ENGINE = InnoDB;

CREATE TABLE `inmobiliaria`.`Operaciones` ( `id_clientes` INT NOT NULL , `id_inmueble` INT NOT NULL , `id_operacion` INT NOT NULL AUTO_INCREMENT , `fechaOperacion` DATE NOT NULL , `fechaInicioContrato` DATE NOT NULL , `fechaFinContrato` DATE NOT NULL , `precioOperacion` FLOAT NOT NULL , `comentarios` TEXT NOT NULL , PRIMARY KEY (`id_operacion`)) ENGINE = InnoDB;

INSERT INTO `clientes` (`id_clientes`, `nombre`, `apellidos`, `fecnac`, `dni`, `direccion`, `email`, `telefono`) VALUES (NULL, 'Sinforiano', 'Madroñero', '1985-10-05', '74628173R', 'AV Ricardo Carapeto Nº 34', 'aaa@bbb.com', '645382498');

Operador ternario:

$valor = ($x == 1) ? "uno" : "dos";

Si es cierto, valdrá "uno". Si es falso, valdrá "dos". Es una forma de comprimir ifs, poco utilizada

Sintaxis alternativaa las estructuras de control:

if ($x == 1):
	// Haz algo
else:
	// Haz otra cosa
endif;

while ($x < 10):
	// Hacer algo
endwhile;

Ejercicio de la calculadora:

/* Ejercicio calculadora */

	function calcular ($valor1, $valor2, $operacion)
	{
		/* Operación puede valer: sumar, restar, multiplicar, dividir, potencia, modulo */

		switch($operacion)
		{
			case "sumar":
			return $valor1 +  $valor2;
			break;

			case "restar":
			return $valor1 -  $valor2;
			break;

			case "multiplicar":
			return $valor1 * $valor2;
			break;

			case "dividir":
			return $valor1 /  $valor2;
			break;

			case "potencia":
			return $valor1 ** $valor2;
			break;

			case "modulo":
			return $valor1 % $valor2;
			break;

			default: return FALSE;
			break;
		}

	}

	$operador1 = 20;
	$operador2 = 7;

	echo "<hr/>";
	echo "La suma de " . $operador1 . " y " . $operador2 . " es: ". calcular($operador1, $operador2, "sumar") . "<br/>";
	echo "La resta de " . $operador1 . " y " . $operador2 . " es: ". calcular($operador1, $operador2, "restar") . "<br/>";
	echo "La multiplicación de " . $operador1 . " y " . $operador2 . " es: ". calcular($operador1, $operador2, "multiplicar") . "<br/>";
	echo "La división de " . $operador1 . " y " . $operador2 . " es: ". calcular($operador1, $operador2, "dividir") . "<br/>";
	echo "La potencia de " . $operador1 . " elevado a " . $operador2 . " es: ". calcular($operador1, $operador2, "potencia") . "<br/>";
	echo "El módulo de " . $operador1 . " y " . $operador2 . " es: ". calcular($operador1, $operador2, "modulo") . "<br/>";
	echo "<hr/>";

Parámetros por defecto: Se pueden añadir mas de un parámetro por defecto, pero estos solo pueden estar al final de la declaración. Por ejemplo

	function calcular2 ($valor1, $operacion = "sumar", $valor2) no sería válido */
	function calcular2 ($valor1, $valor2, $operacion = "sumar")
	
De estaforma se puede omitir el tercer parámetro en la llamada y se utilizaría el valor por defecto. Si se llama con 3 parámetros entonces el valor por defecto no se tiene en cuenta.	
	
Los parámetros de una función son por copia. Para usar una variable que esté fuera y que esta pueda cambiar en su interior, se utiliza la palabra "global":

	$a = 0;

	function incrementar_global()
	{
		global $a; /* Afectaría a una variable llamada $a, declarada fuera. Se trata de una variable global */

		$a = $a + 1;
	}

	incrementar_global();
	incrementar_global();
	incrementar_global();

	echo "<p>" . $a . "</p>";	
	
Variables static:

	function incrementar_static()
	{
		static $a = 0;
		echo "<p>" . $a . "</p>";
		$a++;
	}

	incrementar_static();
	incrementar_static();
	incrementar_static();	
	
La primera vez que se ejecuta la función se declara la variable. Las siguientes veces se mantiene el último valor que tuvo y no se redeclara.


CLASE 23: LUNES 5/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Sentencia SQL para insertar varias películas:
INSERT INTO `peliculas` (`id`, `titulo`, `duracion`) VALUES (NULL, 'Harry Potter y la piedra filosofal', '159'), (NULL, 'Star Wars, el retorno del Jedi', '136'), (NULL, 'Star Wars, la venganza de los Sith', '140'), (NULL, 'Star Wars, el Imperio contraataca', '127'), (NULL, 'El resplandor', '146'), (NULL, 'Efecto mariposa', '113'), (NULL, 'Toy Story', '81'), (NULL, 'Forrest Gump', '158'), (NULL, 'Aladdin', '91'), (NULL, 'Robin Hood y el principe de los ladrones', '144');

Modificar la tabla películas añadiendo el género:

	ALTER TABLE `peliculas` ADD `genero_id` INT UNSIGNED NOT NULL AFTER `duracion`;

Buscar las películas de fantasía (genero_id = 1):

	SELECT * FROM `peliculas` WHERE genero_id = 1

Crear una vista que muestre el nombre de la película, duración y género en nombre:

	SELECT titulo, duracion, nombre as genero FROM `peliculas` JOIN `genero` ON peliculas.genero_id=genero.id

Insertar directores:

	INSERT INTO `director` (`id`, `nombre`) VALUES (NULL, 'Crhis Colombus'), (NULL, 'George Lucas'), (NULL, 'Stanley Kubrick'), (NULL, 'Eric Bress'), (NULL, 'John Lasseter'), (NULL, 'Robert Zemeckis'), (NULL, 'John Musker'), (NULL, 'Kevin Reynolds')

Tabla para las relaciones de directores: director_pelicula

Insertar la relación entre directores:
	INSERT INTO `director_pelicula` (`director_id`, `peliculas_id`) VALUES ('6', '8'), ('4', '6'), ('10', '6'), ('1', '1'), ('1', '21'), ('2', '2'), ('2', '3'), ('2', '4'), ('3', '5'), ('5', '7'), ('7', '9'), ('8', '10'), ('9', '22');

Introducir " en una cadena: \".

Acceder al primer carácter:

	$cadena1[0];

Longitud de la cadena (caracteres que se pintan)

	echo "<p>Longitud de la cadena: " . strlen($cadena1) . "</p>";

Subcadena: Fragmento o porción de una cadena. El segundo parámetro indica desde donde empieza y el tercero indica la longitud. Es opcional, si no se pone nada es la cadena completa

	echo "<p>Subcadena: " . substr($cadena1, 5, 6) . "</p>";

Posición de un caracter dentro de una cadena. Si no está, devuelve FALSE

	echo "<p>Posición: " . strpos($cadena1, "una") . "</p>";
	
Ejercicio: Eliminar de una cadena dada una subcadena:

	function eliminarParte($cadena, $valor)
	{
		$posicionInicio = strpos($cadena, $valor);
		$resultado = substr($cadena, 0, $posicionInicio);
		$resultado .= substr($cadena, $posicionInicio + strlen($valor));
		return $resultado;
	}
	
	$ejemplo = "Prueba de ejercicio de borrado";
	echo eliminarParte($ejemplo, "ejercicio");
	
	Resultado: Prueba de de borrado

Para ello, también se puede usar la función

	str_replace(parte a reemplazar, parte reemplazada, cadena);
	
str_pad: Rellena con un caracter o varios la cadena pasada, con tantos espacios como número se le pase. Si no se pone nada, son espacios. En este ejemplo, se rellena con puntos (.). Si no se pone nada, rellena con espacios.

	$ejemplo = "Prueba de ejercicio para padding";

	echo "<p>Padding: " . str_pad($ejemplo, 50, ".", STR_PAD_BOTH) . "longitud: " . strlen($ejemplo) . "</p>";

	STR_PAD_LEFT: Rellena desde la izquierda
	STR_PAD_BOTH: Rellena a los dos lados
	STR_PAD_RIGHT: Rellena desde la derecha. Si no se pone nada, se entiende que es por la derecha.
	
Ejercicio: Formatear multiplicación. Pasar dos números por parámetro y dibuje una multiplicación */

	function formatearMultiplicacion($valor1, $valor2)
	{
		$resultado = $valor1 * $valor2;
		$caracteres = strlen($resultado);
		echo "<pre>" . str_pad($valor1, $caracteres, " ", STR_PAD_LEFT) . "<br/>";
		echo str_pad($valor2, $caracteres, " ", STR_PAD_LEFT) . "<br/>";
		echo str_pad("_", $caracteres, "_", STR_PAD_LEFT) . "<br/>";
		echo str_pad($resultado, $caracteres, " ", STR_PAD_LEFT) . "</pre>";
	}

	formatearMultiplicacion(12, 20);	

Forma mas bonita (utilizar subrayados en lugar de guiones):
	
	function formatearMultiplicacion($valor1, $valor2)
	{
		$resultado = $valor1 * $valor2;
		$caracteres = strlen($resultado) + 5;
		echo "<pre>" . str_pad($valor1, $caracteres, " ", STR_PAD_LEFT) . "<br/>";
		echo "<ins>" . str_pad($valor2, $caracteres, " ", STR_PAD_LEFT) . "</ins><br/>";
		echo str_pad($resultado, $caracteres, " ", STR_PAD_LEFT) . "</pre>";
	}
	
Convertir a mínúsculas

	echo "<p>" . strtolower($cadena) . "</p>";

Convertir a mayúsculas

	echo "<p>" . strtoupper($cadena) . "</p>";
	
Ejercicio: Hacer una función que convierta la primera letra de cada palabra en mayúsculas y el resto en minúsculas:

	function pascalCase($cadena)
	{
		$cadena = strtolower($cadena);
		$cadena[0] = strtoupper($cadena[0]);

		for ($i = 1; $i < strlen($cadena); $i++)
		{
			if ($cadena[$i] == " ")
			{
				$cadena[$i+1] = strtoupper($cadena[$i+1]);
			}
		}

		return $cadena;
	}

	function pascalCase2($cadena)
	{
		$cadena = strtolower($cadena);
		$cadena = explode(" ", $cadena);
		foreach ($cadena as $palabra)
		{
			echo strtoupper($palabra[0]);
			echo substr($palabra, 1) . " ";
		}
	}

Existe la función ucwords que lo hace automaticamente:

	ucwords($cadena)
	
Convertir la primera letra de la primera palabra con ucfirst:

	ucfirst($cadena)
	
Eliminar espacios duplicados en una cadena:

	trim($cadena);
	
también existe ltrim y rtrim.

Repetir una cadena x veces:

	str_repeat("lorem ", 100) // Lorem se repetiría 100 veces
	
Comparar 2 cadenas: strcmp y strcasecmp

	(strcmp($cadena1, $cadena2) == 0) // Si son iguales, el resultado es 0
	(strcasecmp($cadena1, $cadena2) == 0) // En este caso no tiene en cuenta mayúsculas y minúsculas.
	
number_format: Para formatear números a un formato de texto mas elegante:

	$numero = 1358.9623476;

	echo number_format($numero, 2);
	echo number_format($numero, 2, ",", ".");
	
El tercer parámetro es el separador de decimales y el cuarto el separador de miles.

strstr: Corta la cadena a partir del caracter indicado hasta el final

	$otroemail = "sergio@otroemail.com";

	echo "<p>" . strstr($otroemail, "@") . "</p>";
	
El resultado es @otroemail.com. Si se añade el parámetro true realiza la función al revés (Coge lo anterior al caracter dado)

	echo "<p>" . strstr($otroemail, "@", true) . "</p>";
	
Cambia el caracter correspondiente por el de la misma posición del tercer parámetro

	$tildes = "AEIOU";
	echo "<p>" . strtr($tildes, "AIU", "aiu") . "</p>";
	
WYSIWYG: Para editores de texto

Convertir saltos de línea (\n) en esaltos de verdad: nl2br

	$texto = "hola\notrohola\nmashola";
	echo "<p>" . $texto . "</p>";
	echo "<p>" . nl2br($texto) . "</p>";

CLASE 25: VIERNES 9/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------
	
Imagen de sustitución: Cambia la imagen al pasar el ratón por encima

Div PA: Nueva capa div para introducir contenido en su interior. Por ejemplo, menús, acordeon y etiquetas spry.

Bases de datos de XAMP:
Servidor: localhost
usuario: root
contraseña: ninguna

CLASE 26: LUNES 12/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Paso de parámetros:

1. Creamos un formulario en nuestra página html normal. Lo mas importante a destacar es:
	- El nombre de la página destino, pagina2.php en este caso, la  cual debe estar en el mismo directorio
	- El metodo usado para enviar información (GET)
	- El nombre del cuadro de texto usado (llamado nombre (name="nombre")
	- El botón de envío de información (input type="submit"

	<form action="pagina2.php" method="GET">
		<div class="form-group row">
			<label for="nombre" class="col-sm-2 col-form-label">Nombre y apellidos: </label>
			<div class="col-sm-10">
				<input type="text" id="nombre" name="nombre" required="required" placeholder="Introduzca su nombre" />
			</div>
		</div>
		<div class="form-group row">
			<div class="offset-sm-2 col-sm-10">
				<input type="submit" class="btn btn-primary" value="Enviar"/>
				<input type="reset" class="btn btn-primary"  value="Vaciar"/>
			</div>
		</div>
	</form>	
	
2. Para recuperarla información, escribimos lo siguiente en php:

	<p>Hola <?= $_GET["nombre"] ?></p>	

Donde $_GET hace referencia al método el cual se envían los datos y estos son envaidos en un array. Por eso escogemos el que tiene de índice nombre, el cual nos interesa.

Ejercicio: Realizar un formulario donde se envíen 3 parámetros (valor 1, valor 2 y operación) y luego por php devuelva el resultado de la operación.

Código php: -------------------------------------------------------------------------------------------

<?php
	function calcular ($valor1, $valor2, $operacion)
	{
		/* Operación puede valer: sumar, restar, multiplicar, dividir, potencia, modulo */

		switch($operacion)
		{
			case "sumar":
			return $valor1 +  $valor2;
			break;

			case "restar":
			return $valor1 -  $valor2;
			break;

			case "multiplicar":
			return $valor1 * $valor2;
			break;

			case "dividir":
			return $valor1 /  $valor2;
			break;

			case "potencia":
			return $valor1 ** $valor2;
			break;

			case "modulo":
			return $valor1 % $valor2;
			break;

			default: return FALSE;
			break;
		}

	}

	echo "<p>Valor 1:  " . $_POST["valor1"] . "</p>";
	echo "<p>Valor 2:  " . $_POST["valor2"] . "</p>";
	echo "<p>Operaión :  " . $_POST["operacion"] . "</p>";
	echo "<p>Resultado  " . calcular ($_POST["valor1"], $_POST["valor2"], $_POST["operacion"]) . "</p>";

	?>

Código HTML: -------------------------------------------------------------------------------------------

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Paso de parámetros</title>
	<meta name="Description" content="Examen de curso PHP y HTML. Día 23 de Noviembre de 2016">
	<meta name="author" content="Jose Luis Martín Ávila">
	<!-- Cargamos Bootstrap -->
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
	<link rel="icon" type="img/png" href="img/icono.png">
</head>
<body>
	<form action="pagina3.php" method="POST">
		<div class="form-group row">
			<label for="valor1" class="col-sm-2 col-form-label">Valor 1: </label>
			<div class="col-sm-10">
				<input type="number" id="valor1" name="valor1" required="required" placeholder="Introduzca su nombre" />
			</div>
		</div>
		<div class="form-group row">
			<label for="operaion" class="col-sm-2 col-form-label">Operación: </label>
			<div class="col-sm-10">
				<select id="operacion" name="operacion">
					<option value="sumar">Sumar</option>
					<option value="restar">Restar</option>
					<option value="multiplicar">Multiplicar</option>
					<option value="dividir">Dividir</option>
					<option value="potencia">Potencia</option>
					<option value="modulo">Módulo</option>
				</select>
			</div>
		</div>
		<div class="form-group row">
			<label for="valor2" class="col-sm-2 col-form-label">Valor 2: </label>
			<div class="col-sm-10">
				<input type="number" id="valor2" name="valor2" required="required" placeholder="Introduzca sus apellidos" />
			</div>
		</div>
		<div class="form-group row">
			<div class="offset-sm-2 col-sm-10">
				<input type="submit" class="btn btn-primary" value="Calcular"/>
			</div>
		</div>
	</form>			
</body>
</html>

-----------------------------------------------------------------------------------------------------------------

$_REQUEST: Se puede usar para recoger los parámetros tanto de GET como de POST

Comprobar si se han pasad parámetros (Si no está vacío): isset

		if (isset($_GET["nombre"]))
		{
			echo "Hola " . $_GET["nombre"];
		}

Mas funciones:

	is_null
	is_empty
	
Crear un formulario que tenga nombre, apellidos, sexo, país (España, Portugal y andorra), localidad, email y teléfono.

Si hay algún campo vacío, que salga un mensaje de error, y en la misma página.

Comprobar si se han envaido datos por GET:

if ($_GET) // Comprueba si está nulo o no. Si es nulo puede existir, pero no tener datos y así compruebas si ha recibido datos.

También se puede saber si tiene varios elementos:

if (count($_GET	) > 0)

y también se puede comprobar si está vacío:

if (!empty($_GET)
	
CLASE 27: MARTES 13/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Para consultas SQL: SELECT [campos] FROM [tabla] WHERE [condicion][ORDER BY]
	- Los campos pueden ser los nombres de las tablas
	- * (significa todo)
	- campo AS nombre: Cambia de nombre la tabla, de nombre original campo y nombre es el nuevo nombre.
	- tabla es el nombre de la tabla donde están los datos. También se pueden unir varias tablas con JOIN (se verá mas adelante)
	- El orden (ORDER BY, que es opcional) puede ser ASC o DESC
	

Ejemplo:
	SELECT titulo, duracion, nombre AS genero
	FROM movies.peliculas JOIN movies.genero
	ON peliculas.genero_id=genero.id
	WHERE peliculas.titulo = H*
	ORDER BY duracion DESC;
	
Se pueden poner mas clausulas en caso de que haya campos iguales en primer orden. Ejemplo:
	
	ORDER BY duracion ASC, titulo DESC;
	
Buscar películas que empeicen por H (EJERCICIO DE COSECHA PROPIA)

	SELECT titulo, duracion, nombre AS genero
	FROM movies.peliculas JOIN movies.genero
	ON peliculas.genero_id=genero.id
	WHERE peliculas.titulo LIKE "H%"
	ORDER BY duracion ASC, titulo DESC;

Buscar películas cuya duración sea mayoro igual a 100 minutos:

	SELECT titulo, duracion, nombre AS genero
	FROM movies.peliculas JOIN movies.genero
	ON peliculas.genero_id=genero.id
	WHERE peliculas.duracion >= 100
	ORDER BY duracion ASC;
	
Buscar películas cuya duración sea mayor que 150 minutos y menos que 100

	SELECT titulo, duracion, nombre AS genero
	FROM movies.peliculas JOIN movies.genero
	ON peliculas.genero_id=genero.id
	WHERE peliculas.duracion > 150 OR peliculas.duracion < 100
	ORDER BY duracion ASC;

Cláusula LIKE: Para búsquedas de patrones en cadenas.

Buscar las películas que empiecen por H:

	SELECT titulo, duracion
	FROM movies.peliculas
	WHERE titulo LIKE "H%"
	ORDER BY duracion ASC;
	
BETWEEN Para buscas de campos numéricos. Ejemplo para buscar películas entre 100 y 150 minutos

	SELECT titulo, duracion
	FROM movies.peliculas
	WHERE duracion BETWEEN 100 AND 150
	ORDER BY duracion ASC;
	
Buscar todas las películas que en el título tengan una S o una R, duración mayor de 100 minutos y menor de 150, ordenadas por título descendente.

	SELECT titulo, duracion
	FROM movies.peliculas
	WHERE (titulo LIKE "%R%" OR titulo LIKE "%S%") AND (duracion BETWEEN 100 AND 150)
	ORDER BY titulo DESC;
	
CAMPOS DE SELECCIÓN MÚLTIPLE
Para envair varias opciones en una lista de selección múltiple, se tiene que convertir name en un array, de la siguiente manera:

<select id="pais" name="pais[]" multiple="multiple">

Correción en el PHP para validar datos en caso de que se envién elementos múltiples de una lista:

function validarDatos($datos)
		{
			foreach($datos as $dato)
			{
				if (is_array($dato))
				{
					if (count($dato) <= 0) /* Error si */
						return false;
				}
				else if ($dato == "")
				{
					return false;
				}
			}

			return true;
		}

		if ($_GET)
		{
			if (!validarDatos($_GET))
			{
				echo "<p>Hay un error. Debe compeltar todos los datos</p>";
			}
			else
			{
				foreach ($_GET as $indice => $valor)
				{
					if (!is_array($valor))
						echo "<p>" . $indice . ": " . $valor . "</p>";
					else
					{
						echo "<p>Paises: ";
						foreach ($valor as $pais)
						{
							echo $pais . ", ";
						}
						echo "</p>";
					}
				}
			}
		}

Ejercicio: Hacer un formulario que muestre los datos por pantalla y además guarde los campos para que al cargar el formulario otra vez estos aparezcan como datos predefinidos:

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Paso de parámetros</title>
	<meta name="Description" content="Examen de curso PHP y HTML. Día 23 de Noviembre de 2016">
	<meta name="author" content="Jose Luis Martín Ávila">
	<!-- Cargamos Bootstrap -->
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
	<link rel="icon" type="img/png" href="img/icono.png">
</head>
<body>

		
		<?php

		function validarDatos($datos)
		{
			if(!isset($_GET["pais"])) /* No se ha enviado nada de país. Se hace así al ser un array ahora */
			{
				return false;
			}

			foreach($datos as $dato)
			{
				if (is_array($dato))
				{
					if (count($dato) <= 0)
						return false;
				}
				else if ($dato == "")
				{
					return false;
				}
			}

			return true;
		}

		function mostrarPaises($paises) // Para mostrar los paises de una forma mas completa, en lugar de mostrar PT, ES, etc. Función propia y no obligatoria.
		{
			$listaDePaises = "";
				for ($i = 0; $i < count($paises); $i++)
				{
					switch($paises[$i])
					{
						case "ES":
							$listaDePaises .= "España";
						break;
						case "PT":
							$listaDePaises .= "Portual";
						break;
						case "AN":
							$listaDePaises .= "Andorra";
						break;
					}
				if ((count($paises) - $i) > 1)
					$listaDePaises .= ", ";
			}
			return $listaDePaises;
		}

		function valorDefault($valor, $placeholder) // Función creada por mi para usar value o placeholder, en caso de restaurar un valor en el formulario si falta algún valor.
		{
			if ($valor == "")
				echo "placeholder=\"" . $placeholder . "\""; // Texto que aparece por defecto, pero cuando se escribe se sustituye.
			else
				echo "value=\"" . $valor . "\"";
		}

		$hayerrores = false; // Para comprobar si hay errores. Lo ponemos a falso.
		
		if ($_GET)
		{
			if (!validarDatos($_GET))
			{
				$hayerrores = true; // Si Hay algún error, lo ponemos a cierto y así podría pintar el formulario.
			}
		}

		$nombre = isset ($_GET["nombre"]) ? ($_GET["nombre"]) : ""; /* Comprueba si existe el nombre enviado por el formulario. Si no se ha enviado nada o es la primera vez que carga la página, lo ponemos a 0. Lo mismo se aplica al resto de variables. */
		$apellidos = isset ($_GET["apellidos"]) ? ($_GET["apellidos"]) : "";
		$localidad = isset ($_GET["localidad"]) ? ($_GET["localidad"]) : "";
		$email = isset ($_GET["email"]) ? ($_GET["email"]) : "";
		$edad = isset ($_GET["edad"]) ? ($_GET["edad"]) : "";

		if (($_GET == NULL) || ($hayerrores == true)) // Si no se ha enviado nada por el formulario (primera vez que abre la página) o se ha encontraro algún error, pintamos el formulario.
		{
		?>
		<form>
			<div class="form-group row">
				<label for="nombre" class="col-sm-2 col-form-label">Nombre: </label>
				<div class="col-sm-10">
					<input type="text" id="nombre" name="nombre" <?php echo valorDefault($nombre, "Introduzca su nombre");?>/>
				</div>
			</div>
			<div class="form-group row">
				<label for="apellidos" class="col-sm-2 col-form-label">Apellidos: </label>
				<div class="col-sm-10">
					<input type="text" id="apellidos" name="apellidos" <?php echo valorDefault($apellidos, "Introduzca sus apellidos");?> />
				</div>
			</div>
			<fieldset class="form-group row">
				<label class="col-sm-2 col-form-label">Sexo</label>
					<div class="col-sm-10">
					<div class="form-check">
						<label class="form-check-label">
							<input class="form-check-input" type="radio" value="Hombre" name="sexo" checked="checked" /> Hombre
						</label>
					</div>
					<div class="form-check">
						<label class="form-check-label">
							<input class="form-check-input" type="radio" value="Mujer" name="sexo" /> Mujer
						</label>
					</div>
				</div>
			</fieldset>	
			<div class="form-group row">
				<label for="pais" class="col-sm-2 col-form-label">País: </label>
				<div class="col-sm-10">
					<select id="pais" name="pais[]" multiple="multiple">
						<option value="ES">España</option>
						<option value="PT">Portugal</option>
						<option value="AN">Andorra</option>
					</select>
				</div>
			</div>
			<div class="form-group row">
				<label for="localidad" class="col-sm-2 col-form-label">Localidad: </label>
				<div class="col-sm-10">
					<input type="text" id="localidad" name="localidad" <?php echo valorDefault($localidad, "Introduzca su localidad");?> />
				</div>
			</div>
			<div class="form-group row">
				<label for="email" class="col-sm-2 col-form-label">email: </label>
				<div class="col-sm-10">
					<input type="email" id="email" name="email" <?php echo valorDefault($email, "Introduzca su eMail");?> />
				</div>
			</div>
			<div class="form-group row">
				<label for="edad" class="col-sm-2 col-form-label">Edad: </label>
				<div class="col-sm-10">
					<input type="text" id="edad" name="edad" <?php echo valorDefault($edad, "Introduzca su edad");?> />
				</div>
			</div>				
			<div class="form-group row">
				<div class="offset-sm-2 col-sm-10">
					<input type="submit" class="btn btn-primary" value="Enviar"/>
					<input type="reset" class="btn btn-primary"  value="Vaciar"/>
				</div>
			</div>
		</form>
		<?php
		}
		else
		{
		?>
		<table border=1>
			<?php
				foreach ($_GET as $indice => $valor)
				{
				?>
					<tr>
						<th><?= $indice ?></th>
						<td><?php
							if (is_array($valor))
								// No usada por que imprime ES, PT, etc: echo implode(", ", $valor);
								echo mostrarPaises($valor);
							else
								echo $valor;
						?></td>
					</tr>
				<?php
				}
				?>
		</table>
		<?php
		}
		?>
</body>
</html>

SUBIR FICHEROS:

Formulario: Es obligatorio que se envíe por POST, además, hay que introducir enctype="multipart/form-data" para que funcione. MAX_FILE_SIZE y value sirven para colocar el tamaño máximo del fichero a envíar.
Ejemplo: 

	<form method="POST" enctype="multipart/form-data">
		<input type="file" name="archivo"> 
		<input type="hidden" name="MAX_FILE_SIZE" value="1000000">
		<br/>
		<input type="submit" value="Enviar">
	</form>
	
Función en PHP:

	<?php
		if (isset($_FILES["archivo"]))
		{
			$path = "subidas/"; /* Anteriormetne en XAMP creamos una carpeta llamada subidas, para guardar ahí los ficheros subidos */
			$file_path = $path . basename($_FILES["archivo"]["name"]); /* basename hace que elimine la ruta completa y deje solo el nombre del archivo */
			if (move_uploaded_file($_FILES["archivo"]["tmp_name"], $file_path)) /* Se mueve el archivo subido a la dirección indicada en filepath. Se utiliza un if por que a veces es posible que el fichero no se suba */
			{
				echo "<p>Archivo subido correctamente. Prueba</p>";
			}
			else
			{
				echo "<p>No ha podido subirse el archivo</p>";
			}
		}	
	?>	

Ejercicio: Después de subir una foto, que la muestre por pantalla:	

	<?php

	$mensaje = ""; /* Declaramos las variables fuera, las cuales estarán vacías y se imprimirán vacías en el caso de que no se haya enviado un archivo. Es decir, al cargar por primera vez la página. Siempre que se muestra la página imprime el mensaje de error o éxito en la subida de ficheros, y muestra la imagen subida. Si es la primera vez al cargar la página, estas estarán vacías y no mostrará nada, pero si se utiliza el formulario, estas tomarán otro valor. */
	$imagen = "";

		if (isset($_FILES["archivo"]))
		{
			$path = "subidas/";
			$file_path = $path . basename($_FILES["archivo"]["name"]); /* basename hace que elimine la ruta completa y deje solo el nombre del archivo */
			if (move_uploaded_file($_FILES["archivo"]["tmp_name"], $file_path)) /* Se mueve el archivo subido a la dirección indicada en filepath*/
			{
				$mensaje = "<p>Archivo subido correctamente. Prueba</p>";
				$imagen = "<img src=\"" . $file_path . "\"/>\n";
			}
			else
			{
				$menasje = "<p>No ha podido subirse el archivo</p>";
				$imagen = "";
			}
		}	
	?>

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Subida de ficheros</title>
	<meta name="Description" content="Examen de curso PHP y HTML. Día 23 de Noviembre de 2016">
	<meta name="author" content="Jose Luis Martín Ávila">
	<!-- Cargamos Bootstrap -->
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
	<link rel="icon" type="img/png" href="img/icono.png">
</head>
<body>

	<?= $mensaje ?> 
	<?= $imagen ?>

	<form method="POST" enctype="multipart/form-data">
		<input type="file" name="archivo"> 
		<input type="hidden" name="MAX_FILE_SIZE" value="1000000">
		<br/>
		<input type="submit" value="Enviar">
	</form>
</body>
</html>

CLASE 28: MIÉRCOELS 14/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Funciones de PHP:

include("ruta") y require("ruta");

include sirve para incluir otros ficheros dentro del mismo y poder separarlo por contenidos. 

EJEMPLO DE INCLUDE:

index.php --------------------------------------------------------------------------------------------

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Ejemplo de includes</title>
</head>
<body>		
		<?php include("h1_include.php"); ?>
</body>
</html>

h1_include.php ---------------------------------------------------------------------------------------

<h1>Primer include</h1>

------------------------------------------------------------------------------------------------------

De esta manera se sustituye la función de include por el contenido del h1_include (con encabezados h1). El objetivo es que una página se pueda mantener de forma mas fácil dividiendola en varios framentos según el contenido.

require sirve para lo mismo, con la diferencia de que si no encuentra el fichero detiene la ejecución de php. include por contra mantiene la ejecución de la página saltandose la línea del include.

hay además una variante:

include_once("ruta") y require_once("ruta"). Esto hace que solo se copie una vez, por si existen mas de un include o require al mismo archivo en otros archivos.

BASES DE DATOS:

AS (para cambiar el nombre de la tabla, solo visualmente)

FUNCIONES DE AGRUPAMIENTO

1. COUNT: Número total de películas:

	SELECT COUNT(titulo) AS Total FROM peliculas;

2. SELECT SUM: Para sumar el contenido de los campos

	SELECT SUM(duracion) AS Duracion_total FROM peliculas;

3. SELEC MAX: En este caso vamos a seleccionar la película cuya duración sea la mas grande y la mas pequeña:

	SELECT MAX(duracion) AS DuraciónMaxima, MIN(duracion) AS DuracionMinima FROM peliculas;

4. GROUP BY: Agrupar películas por género:

	SELECT genero_id, COUNT(*)FROM peliculas GROUP BY genero_id;

COSECHA PROPIA: Agrupar por género, y además mostrar el nombre del género

	SELECT COUNT(*) as total, nombre AS genero FROM movies.peliculas JOIN movies.genero ON peliculas.genero_id=genero.id GROUP BY genero;

5. GROUP BY: Agrupar películas por género, donde haya 2 o mas películas del mismo género

	SELECT genero_id, COUNT(*)FROM peliculas GROUP BY genero_id HAVING COUNT(*) >= 2;

COSECHA PROPIA: Además, ahora mostrando el nombre de la película.

	SELECT COUNT(*) as total, nombre AS genero FROM movies.peliculas JOIN movies.genero ON peliculas.genero_id=genero.id GROUP BY genero HAVING total >= 2;

6. CONCAT: Para concatenar

	SELECT CONCAT(titulo, ": ", duracion) AS tituloYDuracion FROM peliculas;

7. LIMIT: Límitar el número de registros a obtener. En este baso solo obtendría las 3 primeras películas.

	SELECT * FROM peliculas LIMIT 3;

En este caso me extrae las 3 primeras películas por orden alfabético

	SELECT * FROM peliculas ORDER BY titulo LIMIT 3;

Obtener los X siguientes resultados: El primer parámetro es cuantas filas se saltan y el segundo parámetro cuantas muestra:

	SELECT * FROM peliculas ORDER BY titulo LIMIT 0, 3;
	SELECT * FROM peliculas ORDER BY titulo LIMIT 3, 3;
	SELECT * FROM peliculas ORDER BY titulo LIMIT 6, 3;

Función para recibir los datos de una consulta de una base de datos:

$consulta es uan cadena de texto con los datos de la consulta. Por ejemplo:

$consulta = "SELECT * FROM alumnos;";

	function hacerListado($consulta)
	{
		$servidor = "localhost"; /* Servidor donde se encuentra la base de datos */
		$usuario = "root"; /* Usuario adminsitrador de la base de datos por defecto de XAMP */
		$password = ""; /* Contraseña por defecto de root */
		$baseDeDatos = "movies"; /* Nombre de la base de datos */

		/* Abrir una conexión con la base de datos */
		$enlace = mysqli_connect($servidor, $usuario, $password, $baseDeDatos);

		if(mysqli_connect_errno())
		{
			die("Desconexión. No se pudo conectar " . mysqli_connect_errno()); /* Función para detener la ejecución en caso de error */
		}
		
		$query = "SET NAMES 'utf8'";
		mysqli_query($enlace, $query);		

		$resultado = mysqli_query($enlace, $consulta); /* Devuelve los datos de la base de datos */

		$listado = []; /* Creamos un array vacío, que será lo que nos devuelva al final de la función */

		if ($resultado)
		{
			/*
			MYSQLI_ASSOC: Devuelve la consulta con índices asociativos
			MYSQLI_NUM: Devuelve la consulta con índices numéricos
			mysqli_fetch_array convierte los datos en un array, el cual aprovechamos
			para meter en listado y luego poder devolverlo para tratar con el mas facilmente.
			*/
			while ($fila = mysqli_fetch_array($resultado, MYSQLI_ASSOC))
			{
				$listado[] = $fila;
			}
		}

		mysqli_free_result($resultado); /* Libera la memoria ocupada por la consulta */
		mysqli_close($enlace); /* Cerrar la conexión */

		return $listado;
	}
	
EJERCICIO:
Crear una tabla Alumnos que contenga nombre, apellidos, edad, curso, altura y sexo. Los datos deben mostrarse en una tabla, y con los 3 botones (ver, editar y borrar) a la derecha. En la cabecera debe hacer enlaces para ordenar y el botón de ver debe de funcionar.

Creación de tabla:

CREATE TABLE `bdalumnos`.`alumnos` ( `id_alumno` INT UNSIGNED NOT NULL AUTO_INCREMENT , `nombre` VARCHAR(30) NOT NULL , `apellidos` VARCHAR(100) NOT NULL , `edad` INT UNSIGNED NOT NULL , `curso` VARCHAR(255) NOT NULL , `altura` INT UNSIGNED NOT NULL , `sexo` VARCHAR(2) NOT NULL , PRIMARY KEY (`id_alumno`)) ENGINE = InnoDB;

INSERT INTO `alumnos` (`id_alumno`, `nombre`, `apellidos`, `edad`, `curso`, `altura`, `sexo`) VALUES (NULL, 'Harry', 'Potter', '12', 'Segundo', '170', 'H'), (NULL, 'Hermione', 'Granger', '12', 'Segundo', '170', 'M'), (NULL, 'Ron', 'Weasley', '12', 'Segundo', '170', 'H'), (NULL, 'Draco', 'Malfoy', '12', 'Segundo', '172', 'H'), (NULL, 'Ginny', 'Weasley', '11', 'Primero', '165', 'M'), (NULL, 'Colin', 'Creevey', '11', 'Primero', '165', 'H'), (NULL, 'Cedric', 'Diggory', '15', 'Quinto', '175', 'H'), (NULL, 'Fred', 'Weasley', '14', 'Cuarto', '180', 'H'), (NULL, 'Luna', 'Lovegood', '11', 'Primero', '169', 'M'), (NULL, 'Katie', 'Bell', '13', 'Tercero', '172', 'M');
	
index.php --------------------------------------------------------------------------------------------
	
<?php

	function hacerListado($consulta)
	{
		$servidor = "localhost"; /* Servidor donde se encuentra la base de datos */
		$usuario = "root"; /* Usuario adminsitrador de la base de datos por defecto de XAMP */
		$password = ""; /* Contraseña por defecto de root */
		$baseDeDatos = "bdalumnos"; /* Nombre de la base de datos */

		/* Abrir una conexión con la base de datos */
		$enlace = mysqli_connect($servidor, $usuario, $password, $baseDeDatos);

		if(mysqli_connect_errno())
		{
			die("Desconexión. No se pudo conectar " . mysqli_connect_errno()); /* Función para detener la ejecución en caso de error */
		}
		
		$query = "SET NAMES 'utf8'";
		mysqli_query($enlace, $query);

		$resultado = mysqli_query($enlace, $consulta); /* Devuelve los datos de la base de datos */

		$listado = []; /* Creamos un array vacío, que será lo que nos devuelva al final de la función */

		if ($resultado)
		{
			while ($fila = mysqli_fetch_array($resultado, MYSQLI_ASSOC))
			{
				$listado[] = $fila;
			}
		}

		mysqli_free_result($resultado); /* Libera la memoria ocupada por la consulta */
		mysqli_close($enlace); /* Cerrar la conexión */

		return $listado;
	}

	/* Función que crea una consulta para la búsqueda de alumnos pero ordeandos por un criterio */
	function crearConsulta($parametro, $orden)
	{
		/*
		parámetro: Es el elemento por el cual se van a ordenar (por nombre, por apellidos, edad, etc)
		orden: Es el orden por el cual se van a ordenar. Los valores son ASC (ascendente) y DESC (descendente)
		*/
		return "SELECT * FROM alumnos ORDER BY $parametro $orden;";
	}

	/* Función para establecer el orden en el cual se van a mostrar los datos. Esta función es llamada al generar el link al pulsar
	en la tabla. Si se vuelve a hacer click en el parámetro cambia el orden y si se pulsa un parámetro nuevo lo ordena
	ascendentemente. El parámetro por el cual se le van a ordenar lo paso y compruebo si es el mismo. Si es el mismo que el actual
	lo que hago es invertir el orden, y si es distinto (pulsar un nuevo parámetro ordenador, por ejemplo si está ordenando por
	nombre y luego se quiere ordenar por edad) lo convierte en orden ascendente */
	function getOrden($discriminador)
	{
		/* Si no hay ningún parámetro pasado, el orden que provocará es ascendente */
		if (empty($_GET))
		{
			return "ASC";
		}
		else
		{	/* Compruebo si el nombre es igual. Si es igual, invierto el orden*/
			if ($_GET["parametro"] == $discriminador)
			{
				if ($_GET["orden"] == "ASC")
					return "DESC";
				else
					return "ASC";
			} /* Si no es igual, convierto el orden en ascendente */
			else
				return "ASC";
		}
	}

	/* Valida los datos que se le han pasado por parámetro, que los ordenadores sean correctos y que el orden sea correcto */
	function validarDatos()
	{
		if (isset($_GET["parametro"]))
		{
			$valores = ["nombre", "apellidos", "edad", "curso", "altura", "sexo"];
			if (!in_array($_GET["parametro"], $valores))
				return false;
		}
		else
		{
			return false;
		}
		if (isset($_GET["orden"]))
		{
			$valoresOrden = ["ASC", "DESC"];
			if (!in_array($_GET["orden"], $valoresOrden))
				return false;
		}
		else
		{
			return false;
		}
		return true;
	}

?>

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Tabla de base de datos</title>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<meta name="Description" content="Ejercicio de repaso de formularios"/><script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>
<body>		
	<?php

	/* Si la url está vacía (sin parámetros, al iniciar por primera vez) genero la consulta normal */
	if (empty($_GET))
	{
		$consulta = "SELECT * FROM alumnos;";
	}
	else /* Hay datos en el GET */
	{
		/* Si hay datos y su validación es correcta, entonces genero una nueva consulta ordenando los valores con los
		parámetros pasados */
		if (validarDatos())
		{
			$consulta = crearConsulta($_GET["parametro"], $_GET["orden"]);
		}
		else
		{
			/* Si los parámetros pasados son incorrectos, genero una consulta estándar */
			$consulta = "SELECT * FROM alumnos;";
		}
	}

	/* Ahora que la consulta está hecha, la llamo para conseguir los datos */
	$resultado = hacerListado($consulta);


	?>

	<table class="table table-striped table-bordered">
	<thead>
		<tr>
			<th><a href="index.php?parametro=nombre&orden=<?= getOrden("nombre");?>">Nombre</a></th>
			<th><a href="index.php?parametro=apellidos&orden=<?= getOrden("apellidos");?>">Apellidos</a></th>
			<th><a href="index.php?parametro=edad&orden=<?= getOrden("edad");?>">Edad</a></th>
			<th><a href="index.php?parametro=curso&orden=<?= getOrden("curso");?>">Curso</a></th>
			<th><a href="index.php?parametro=altura&orden=<?= getOrden("altura");?>">Altura</a></th>
			<th><a href="index.php?parametro=sexo&orden=<?= getOrden("sexo");?>">Sexo</a></th>
			<th>Acciones</th>
		</tr>
	</thead>
	<tbody>
	<?php
		foreach ($resultado as $datoAlumno)
		{
		?>
			<tr>
				<td><?= $datoAlumno["nombre"]?></td>
				<td><?= $datoAlumno["apellidos"]?></td>
				<td><?= $datoAlumno["edad"]?></td>
				<td><?= $datoAlumno["curso"]?></td>
				<td><?= $datoAlumno["altura"]?></td>
				<td><?= $datoAlumno["sexo"]?></td>
				<td>
					<a class="btn-xs btn-info" href="persona.php?id=<?= $datoAlumno["id_alumno"]?>"><span class="glyphicon glyphicon glyphicon-eye-open"></span></a>
					<a class="btn-xs btn-success" href=#><span class="glyphicon glyphicon glyphicon-pencil"></span></a>
					<a class="btn-xs btn-danger" href=#><span class="glyphicon glyphicon glyphicon-remove"></span></a>
				</td>
			</tr>
		<?php
		}
	?>
	</tbody>
	</table>

</body>
</html>

------------------------------------------------------------------------------------------------------

La mayor dificultad de este ejercicio radicaba en la manera de pasar los parámetros. Al tratarse de un GET, los parámetros están en la misma URL, por lo cual podemos facilmente generar el enlace añadiendo los parámetros. Ejemplo para el botón ver:

<a href="persona.php?id=<?= $resultado[$i]["id_alumno"]?>">

Después de añadir la url (persona.php) para pasar parámetros hay que añadir una ? y luego el nombre de los parámetros con un =.

Si queremos pasar por ejepmlo, el id de un alumno (pongamos 5 por ejemplo), se realizada así:

persona.php?id=5

De esta manera estamos pasando el parámetro id=5, el cual luego puede ser recuperado en persona php con $_GET["id"] que nos dará un 5.

Para automatizar esta tarea, usamos el parámetro id conseguido en la consulta y lo devolvemos en php:

<a href="persona.php?id=<?= $resultado[$i]["id_alumno"]?>">

De esta manera nos genera un link inmediatamente. Lo mismo se aplica en los enlaces para ordenar por criterios ascendente o descendente.

persona.php ------------------------------------------------------------------------------------------

<?php

	function hacerListado($consulta)
	{
		$servidor = "localhost"; /* Servidor donde se encuentra la base de datos */
		$usuario = "root"; /* Usuario adminsitrador de la base de datos por defecto de XAMP */
		$password = ""; /* Contraseña por defecto de root */
		$baseDeDatos = "bdalumnos"; /* Nombre de la base de datos */

		/* Abrir una conexión con la base de datos */
		$enlace = mysqli_connect($servidor, $usuario, $password, $baseDeDatos);

		if(mysqli_connect_errno())
		{
			die("Desconexión. No se pudo conectar " . mysqli_connect_errno()); /* Función para detener la ejecución en caso de error */
		}

		$resultado = mysqli_query($enlace, $consulta); /* Devuelve los datos de la base de datos */

		$listado = []; /* Creamos un array vacío, que será lo que nos devuelva al final de la función */

		if ($resultado)
		{
			while ($fila = mysqli_fetch_array($resultado, MYSQLI_ASSOC))
			{
				$listado[] = $fila;
			}
		}

		mysqli_free_result($resultado); /* Libera la memoria ocupada por la consulta */
		mysqli_close($enlace); /* Cerrar la conexión */

		return $listado;
	}

?>

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Tabla de base de datos</title>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<meta name="Description" content="Ejercicio de repaso de formularios"/><script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>
<body>		
	<?php

	$consulta = "SELECT * FROM alumnos WHERE id_alumno = " . $_GET["id"] . ";";
	$resultado = hacerListado($consulta)[0];

	?>
	<h3>Datos del alumno</h3>
	<table class="table table-striped table-bordered">
	<thead>
	</thead>
	<tbody>
		<tr>
			<th>Nombre</th>
			<td><?= $resultado["nombre"]?></td>
		</tr>
		<tr>
			<th>Apellidos</th>
			<td><?= $resultado["apellidos"]?></td>
		</tr>
		<tr>
			<th>Edad</th>
			<td><?= $resultado["edad"]?></td>
		</tr>
		<tr>
			<th>Curso</th>
			<td><?= $resultado["curso"]?></td>
		</tr>
		<tr>
			<th>Altura</th>
			<td><?= $resultado["altura"]?></td>
		</tr>
		<tr>
			<th>Sexo</th>
			<td><?= $resultado["sexo"]?></td>
		</tr>
	</tbody>
	</table>

</body>
</html>

------------------------------------------------------------------------------------------------------

CLASE 29: JUEVES 15/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

SUMA. No pude asistir.

CLASE 30: VIERNES 16/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Vuelta a explicar el ejercicio de las tablas y base de datos para quienes hayan tenido problemas.

Inserción de datos: INSERT

INSERT INTO tabla (param1, param2, param3, param4) VALUES (valor1, valor2, valor3, 'valor4);

Si se trata de cadenas, hay que poner comillas simples.

INSERT INTO `alumnos` (`nombre`, `apellidos`, `edad`, `curso`, `altura`, `sexo`) VALUES ('Lavender', 'Brown', '12', 'Segundo', '173', 'M');

CLASE 31: LUNES 19/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Borrado de elementos: DELETE
Ejemplo:

DELETE FROM alumnos WHERE id=5;

Actualización de elementos: UPDATE
Ejemplo:

UPDATE alumnos SET altura=175, edad=26 WHERE id=8;

Automatizar la creación de consultas:

Sistema CRUD para administración: Create, read, update, delete

CLASE 32: MARTES 20/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Reestructuración del código: Modelo Vista Controlador

Crear un nuevo fichero: alumno_modelo, para funciones de la base de datos.

Realizar las funciones actualizar usuario y que funcione en la página editarAlumno.php. Así quedaría el nuevo fichero modelo_alumno.php:

<?php

	include_once("funciones.php");

	function obtenerAlumnos()
	{
		$consulta = "SELECT * FROM alumnos;";
		$resultado = hacerListado($consulta);
		return $resultado;
	}

	/* Función que crea una consulta para la búsqueda de alumnos pero ordeandos por un criterio */
	function obtenerAlumnosOrdenados($criterio, $orden)
	{
		$consulta = "SELECT * FROM alumnos ORDER BY $criterio $orden";
		$resultado = hacerListado($consulta);
		return $resultado;
	}

	function guardarAlumno($datos)
	{
		$consulta = crearConsultaInsertar($datos, "alumnos");
		return ejecutarConsulta($consulta);	
	}

	function actualizarAlumno($datos, $id)
	{
		$consulta = crearConsultaActualizar($datos, "alumnos", "id_alumno", $id);
		return ejecutarConsulta($consulta);
	}

	function borrarAlumno($id)
	{	
		/*	Tabla, nombre del campo id, id a borrar*/
		$consulta = crearConsultaBorrar("alumnos", "id_alumno", $id);
		return ejecutarConsulta($consulta);
	}

	function obtenerAlumnoPorId($id)
	{
		$consulta = "SELECT * FROM alumnos WHERE id_alumno = '$id';";
		$resultado = hacerListado($consulta);
		if ($resultado)
			return $resultado[0];
		else
			return false;
	}
?>

De esta manera no hay que preocuparse a la hora de realizar las consultas y el código queda mas limpio.

Sesiones:

<?php

	session_start();
	/* Con sessión_start se inicia una sesión que se mantiene hasta que se cierre el navegador */
	
	$_SESSION["variable"] = "prueba de variable de sesión";
	/* Una prueba de variable de sesión. La variable se puede usar en cualquier otra página siempre que se abra una sesión al principio. */

?>

Ejemplo de sesiones:

sesion1.php ------------------------------------------------------------------------------------------

<?php

	session_start();
	
	$_SESSION["variable"] = "prueba de variable de sesión";

?>

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Sesiones</title>
</head>
<body>

<a href="sesion2.php">Pasar a la siguiente página</a>

</body>
</html>

sesion2.php ------------------------------------------------------------------------------------------

<?php

	session_start();
	
?>

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8" />
	<title>Sesiones</title>
</head>
<body>

<p>
<?php
	if (isset($_SESSION["variable"]))
	{
		echo $_SESSION["variable"];
	}
	else
	{
		echo "No se ha encontrado el elemento";
	}
?>
</p>

</body>
</html>

------------------------------------------------------------------------------------------------------

Para cerrar la sesión se utiliza session_destroy de la siguiente manera:

<?php

	session_start();
	$_SESSION = array();
	session_destroy();
	
?>

EJERCICIO: Crear una nueva tabla llamada usuarios, un login.php (que pida usuario y contraseña) y un formulario de registro (nombre, email, contraseña y repetir contraseña). Si además intentas meterte en otra página y no te has logeado, te envíe a la página del login.

Función de encriptación: sha1("cadena");

Base de datos:

Tabla:
CREATE TABLE `ejerciciosesionesphp`.`usuarios` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `nombre` VARCHAR(50) NULL , `email` VARCHAR(50) NULL , `password` VARCHAR(50) NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;

Usuarios:
INSERT INTO `usuarios` (`id`, `nombre`, `email`, `password`) VALUES (NULL, 'Juan', 'juanpedro@hotmail.com', '7110eda4d09e062aa5e4a390b0a572ac0d2c0220'), (NULL, 'Paco', 'pacomail@gmail.com', '39dfa55283318d31afe5a3ff4a0e3253e2045e43')


CLASE 33: MIÉRCOLES 21/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Ejercicio de login y bases de datos, con repaso:

base de datos biblioteca con cotejamiento ut8-spanish-ci

CREATE TABLE `biblioteca`.`usuarios` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `nombre` VARCHAR(255) NOT NULL , `email` VARCHAR(255) NOT NULL , `contrasena` VARCHAR(255) NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;

INSERT INTO `usuarios` (`id`, `nombre`, `email`, `contrasena`) VALUES (NULL, 'Antonio', 'antonio@email.com', '7110eda4d09e062aa5e4a390b0a572ac0d2c0220'), (NULL, 'Lucia', 'l@email.com', '8cb2237d0679ca88db6464eac60da96345513964');

La contraseña de Antonio es 1234 y la de lucía 12345

<div class="well col-md-8 col-md-offset-2">
col-md-8: Ocupa 8 columnas
col-md-offset-2: Hace que deje dos columnas vacías al principio

CLASE 34: JUEVES 21/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Finalizar el ejercicio de repaso de ayer haciendo la página de cerrar sesión.

MASTER PAGE: Para no repetir el mismo contenido en todas las páginas y hacer una página maestra:

Copiar

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Biblioteca</title>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>

<body>
	<?php
		include('navbar.php');
	?>

<div class="container-fluid">

y guardarlo en un nuevo fichero llamado inicio_master.php

copiamos:

</div>
</body>
</html>

en un nuevo fichero llamado final_master.php

Ahora en cada página, al principio ponemos

<?php
	include ("inicio_master.php");
?>

y al final ponemos:

<?php
	include ("final_master.php");
?>

De esta forma no es necesario volver a escribir todos los códigos por página y con cambiar uno ya se cambia en todos
 
Paradigma DRY: Dont repeat yourself. No repitas tu código, reaprovecha.

OTRA FORMA: Búffer:

Antes de imprimir código, se coloca:

	<?php
		ob_start();
	?>
	
De esta forma, todo el contenido de la página en vez de mostrarse por pantalla se guardará en un buffer (Posteriormente lo mostraremos).
	
Después de escribir todo el contenido html de la página, se añade:
	
	<?php
		$contenidoDeLaPagina = ob_get_contents();
		ob_end_clean();

		include("master.php");
	?>
	
Donde todo el buffer se guarda en la variable contenido de la página, limpiamos el buffer y luego incluimos la página maestra que consta de:

master.php ------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Biblioteca</title>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>

<body>
	<?php
		include('navbar.php');
	?>

	<div class="container-fluid">

		<?= $contenidoDeLaPagina ?>

	</div>
</body>
</html>

------------------------------------------------------------------------------------------------------

Donde al hacer echo de contenidoDeLaPagina mostramos lo que guardamos anteriormente en el buffer. Ejemplo de página con buffers:

index.php ------------------------------------------------------------------------------------------------------

<?php
	include('usuario_modelo.php');

	session_start();
	if ($_POST) {
		$usuario = obtenerUsuarioPorEmailYContrasena($_POST["email"], cifrarContrasena($_POST["contrasena"]));
		if ($usuario == false) {
			$mensajeError = "El email o contraseña no coinciden";
		} else {
			$_SESSION["usuario"] = $usuario;
			header("Location: lista_usuarios.php");
		}
	}
?>
	<?php
		ob_start();
	?>
	<h1>Identificación de usuarios</h1>

	<?php
		if (!empty($mensajeError)) {
			echo '<p class="alert alert-danger">' . $mensajeError . '</p>';
		}
	?>

	<form method="POST" class="form-horizontal">

		<div class="well col-md-8 col-md-offset-2">

			<div class="form-group">
				<label for="email" class="col-md-4 control-label">Correo electrónico</label>
				<div class="col-md-8">
					<input type="email" class="form-control" id="email" placeholder="Correo electrónico" name="email">
				</div>
			</div>

			<div class="form-group">
				<label for="contrasena" class="col-md-4 control-label">Contraseña</label>
				<div class="col-md-8">
					<input type="password" class="form-control" id="contrasena" placeholder="Contraseña" name="contrasena">
				</div>
			</div>

			<button type="submit" class="btn btn-primary center-block">Identifícate</button>

		</div>
	</form>

	<?php
		$contenidoDeLaPagina = ob_get_contents();
		ob_end_clean();

		include("master.php");
	?>
	
------------------------------------------------------------------------------------------------------

Ejercicio: Crear en la barra de navegación un botón que se va a llamar libros y que va a salir siempre, estés o no logeado. Ese enlace va a ir a una página que se va a llamar lista_libros.php

<nav class="navbar navbar-default">
    <div class="container-fluid">
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav">
                <li><a href="lista_libros.php">Libros</a></li>
            </ul>

            <div class="navbar-right">

        <?php
            if (isset($_SESSION["usuario"])):
		?>
            <a href="cerrar_sesion.php" class="btn btn-default navbar-btn">Cerrar sesión</a>
            <p class="navbar-text">Bienvenido, <?= $_SESSION["usuario"]["nombre"] ?></p>
        <?php
            else:
        ?>
            <a href="index.php" class="btn btn-default navbar-btn">Identificarse</a>
        <?php
            endif;
        ?>
            </div>
        </div>
    </div>
</nav>

Sentencia JOIN: Para unir dos tablas

SELECT * FROM usuarios JOIN libros ON (usuarios.id = libros.usuario_id);

Crear tabla de libros:

CREATE TABLE `biblioteca`.`libros` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `titulo` VARCHAR(255) NOT NULL , `usuario_id` INT UNSIGNED NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB CHARACTER SET utf8 COLLATE utf8_spanish_ci;

INSERT INTO `libros` (`id`, `titulo`, `usuario_id`) VALUES (NULL, 'Harry Potter y la piedra filosofal', NULL), (NULL, 'Harry Potter y la Cámara Secreta', NULL), (NULL, 'Jurassic Park', '3'), (NULL, 'El paquete parlante', '4'), (NULL, '50 sombras de grey', NULL), (NULL, 'Diccionario de la RAE', NULL), (NULL, 'La catedral del Mar', '4'), (NULL, 'Zipy y Zape', '3'), (NULL, 'Un monstruo viene a verme', '3'), (NULL, 'El principito', NULL)

Ejemplos de consulta:

SELECT titulo AS Titulo, nombre AS propietario FROM usuarios JOIN libros ON (usuarios.id = libros.usuario_id);

SELECT usuarios.id, usuarios.nombre, COUNT(*) AS Libros_prestados FROM usuarios JOIN libros ON (usuarios.id = libros.usuario_id) GROUP BY libros.usuario_id;

Utilizando alias:

SELECT u.id, u.nombre, COUNT(*) AS Libros_prestados FROM usuarios u JOIN libros l ON (u.id = l.usuario_id) GROUP BY l.usuario_id;

EJERCICIO: Realizar una modificación en ver usuario para que muestre los libros que tiene actualmente en préstamo y un botón con opción a devolver.

Realizar una modificacion en la lista de libros para prestarlo a un usuasrio. Los usuarios deben aparecer en una lista desplegable.

mysql_affected_rows ($enlace) Devuelve el número de filas afectabas, al insertar, actualizar o borrar.

CLASE 35: VIERNES 23/12/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Se termina la función de prestar libro y se explican ideas básicas sobre la paginación de tablas.


	function obtenerLibrosPorPagina($pagina, $registrosPorPagina=5)
	{
		$offset = ($pagina - 1) * $registrosPorPagina;
		$consulta = "SELECT id, titulo FROM libros LIMIT $offset, $registrosPorPagina;";
		$libros = hacerListado($consulta);
		return $libros;
	}
	
y en la pagina de lista_libros.php por get se pasa un parámetro que sea la página y con esto se va limitando.

CLASE 36: MARTES 03/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Ficheros de texto en PHP:

	$archivo = fopen("texto.txt", "r+") or die("Ha habido un error");

r: Fichero de solo lectura
+: Se puede escribir en el fichero, al final del fichero, pero se puede mover con punteros.
w: Escribe, pero si existe el archivo lo sobreescribe. Si no existe, da error.
w+: igual que w, pero si no existe lo crea.
a: añadir al final
a+: añade al final pero permite leer.

Ejemplo de lectura de ficheros:

		$archivo = fopen("ficherosPHP\\texto.txt", "r+") or die("Ha habido un error"); // Abrir un fichero

		while (!feof($archivo))
		{
			$linea = fgets($archivo); // Lee una cadena de texto;
			echo "$linea <br/>";
		}

		fclose($archivo); // cerrar un fichero.
		
Ejemplo de escritura de ficheros:

		$archivo2 = fopen("ficherosPHP\\texto2.txt", "a") or die("Ha habido un error al abrir el segundo fichero"); // Abrir un fichero

		/* Carácter de salto de línea: \n */

		fwrite($archivo2, "Prefiero los villancicos\n");
		fwrite($archivo2, "antes que el reggaeton\n");
		fclose($archivo2);


Ejercicio: Invertir el contenido de un fichero de texto:

	function darLaVuelta($ficheroOrigen, $ficheroDestino = "textoInverso.txt")
	{
		/* nombre es el nombre del fichero o la ruta del mismo */
		$archivo = fopen($ficheroOrigen, "r") or die("Ha habido un error"); // Abrir un fichero
		$archivoSalida = fopen($ficheroDestino, "w") or die("Ha habido un error"); // Abrir un fichero

		$contenidoDelFichero = [];

		while (!feof($archivo))
		{
			$linea = fgets($archivo); // Lee una cadena de texto;
			$contenidoDelFichero[] = $linea;
		}

		/* Fichero leído con todo su contenido en la variable $contenidoDelFichero */

		for ($i = (count($contenidoDelFichero) - 1); $i >= 0; $i--)
		{
			fwrite($archivoSalida, $contenidoDelFichero[$i]);
		}

		fclose($archivo);
		fclose($archivoSalida);
	}
	
Crear un directorio:
	- mkdir("carpeta"): Crea una carpeta
	- rmdir("carpeta"): Borra una carpeta
	- is_dir("carpeta"): Devuelve un booleano que indica si es una carpeta o no.
	
Ejercicio: Crear una carpeta, comprobar si existe, borrar la carpeta y volver a comprobar si existe.

Más funciones:
	- copy(origen, destino): Copiar un fichero.
	- rename(nombreInicial, nombreFinal): Cambiar el nombre a un fichero.
	- file_exists(fichero): Devuelve booleano. Indica si el fichero existe.
	- is_file(fichero): Devuelve booleano. Indica si es un fichero.
	
CLASE 37: MIÉRCOLES 04/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Generar pdfs: librería fpdf
http://www.fpdf.org/

Descargamos la última versión y la importamos. Para ello copiamos la carpeta en htdocs y utilizamos un required para linkearla:

required_once("fpdf/fpdf.php");

Otras librerías: wkhtml y dompdf

Ejercicio con ejemplos:

	require_once("../fpdf/fpdf.php");

	/* P: Portrait o L: Landscape (apaisado), unidad de medida y tipo de página */
	$pdf = new FPDF("P", "mm", "A4");
	$pdf->AddPage();

	// Fuente, tipo (negrita, cursiva, etc) y tamaño. Todas las medidas son en milímetros.
	$pdf->SetFont("Helvetica", "B", 16);

	// $pdf->Write(altura en milímetros, texto, hipervinculo)
	$pdf->Write(10, "Mi Primer texto");

	/* Salto de línea */
	$pdf->Ln();

	$pdf->Write(50, "Mi segundo texto", "http://www.google.es");

	$pdf->Ln();

	/* Crear una celda */

	/* Color de relleno, en formato RGB */
	$pdf->SetFillColor(0, 0, 255);

	/* Color de relleno, en escala de grises */
	$pdf->SetTextColor(255);

	/* Color de los bordes, en formato RGB */
	$pdf->SetDrawColor(0, 0, 200);	

	/* Ancho, alto, texto, borde (1 para que tenga borde), donde escribir (0 derecha, 1 línea siguiente y 2 si es seguido), alineacion (L, R, C: Izquierda, Derecha, Centrado), si tiene relleno y enlace en caso de que tenga */
	$pdf->Cell(50, 10, "Texto de celda", 1, 1, "C", 1);

	/* Para especificar donde empieza a pintar. Para poner un texto o una imagen donde queramos */
	// $pdf->SetX(100);
	// $pdf->SetY(100);

	/* o bien */
	$pdf->SetXY(100, 100);
	$pdf->SetTextColor(0);
	$pdf->Write(2, "Mi tercer texto");

	/* Url de la imagen*/
	$pdf->Image("logo.jpg", 50, 120, 100, 100, "JPG");

	// Aquí introducimos lo que queramos que salga

	$pdf->Output();

CLASE 38: LUNES 09/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Envio de correos con PHP

Una forma es editar la configuración de PHP. 
El archivo de configuración es C:\xampp\php\php.ini

Con XAMP es mas fácil. Nos vamos al panel de control y le damos a editar php.ini

Vamos a realizar tres cambios:

1. Buscamos smtp y vemos que está en orden:

; http://php.net/smtp
SMTP = localhost
; http://php.net/smtp-port
smtp_port = 25

SMTP debe ser localhost y el puerto 25

2. Buscamos ;sendmail_from = me@example.com y lo descomentamos (Quitando el ;) y ponemos nuestra dirección de correo. Debería quedar así: sendmail_from = joseluis_f1@hotmail.com

3. Buscamos ;sendmail_path =, lo descomentamos y ponemos la ruta de nuestro mailtodisk: sendmail_path = C:\xampp\mailtodisk\mailtodisk.exe

Ejemplo de envío de correos con PHP estándar:

<?php
	$destino = "joseluis_f1@hotmail.com";
	$desde = "From: CursoPHP"; // Es un valor opcional. From: debe venir siempre.
	$asunto = "Correo de prueba";
	$mensaje = "Este es un correo de pruea que no va a salir de nuestro ordenador";

	mail($destino, $asunto, $mensaje, $desde);
?>

Para eso es necesario tener un servidor smpt. Como no lo tenemos, vamos a utilizar una librería para poder usar otros correos.

Librería para envío de correos de PHP:
https://github.com/PHPMailer/PHPMailer

Funciona como programación orientada a objetos. Ejemplo de funcionamiento con gmail:

<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<?php
	require_once("PHPMailer\PHPMailerAutoload.php");

	$mail = new PHPMailer;

	$mail->isSMTP();
	$mail->Host = "smtp.gmail.com"; // Servidor SMTP
	$mail->Port = 587; // Puerto
	$mail->SMTPSecure = "TLS"; // Protocolo de seguridad

	$mail->SMTPAuth = true; // Especificar que tiene autentificación
	$mail->Username = "XXXXX@gmail.com";
	$mail->Password = "YYYYY";
	$mail->CharSet = 'UTF-8';
	$mail->Encoding = '8bit';

	/* Dirección desde la que se envía el correo */
	$mail->setFrom("XXXXXX@gmail.com", "Jose Luis Martín");
	/* Destinatario. Se pueden añadir tantas direcciones como se quiera, ejecutando la misma instrucción */
	$mail->addAddress("correo@email.com", "Jose");

	/* Indica que el mensaje del correo contiene html */
	$mail->isHTML(true);

	$mail->Subject = "titulo del correo";
	$mail->Body = "<h1>Cuerpo del mensaje</h1><h3>Este es el cuerpo del mensaje y el contenido del mismo</h3>";

	if (!$mail->send())
	{
		echo "<p class=\"alert alert-danger\">El correo no puede enviarse <br/>Mailer error: $mail->ErrorInfo</p>";
	}
	else
	{
		echo "<p class=\"alert alert-success\">Correo enviado perfectamente</p>";
	}

	$mail->SmtpClose();

		
?>


<div class="col-sm-4 col-lg-4 col-md-4">
                        <div class="thumbnail"> <!--cajas de los pisos-->
                           <a href="ver_vivienda.php?id=<?= $vivienda["id_viviendas"] ?>"><img src="<?= $vivienda["urlImagen"] ?>" alt="Casa número 1"></a>
                            <div class="caption">
                            <h4><a href="#"><?= $vivienda["nombre"] ?></a></h4>
                                    <?php
                                        if ($vivienda["precio_v_promocion"] != null & $vivienda["precio_v_promocion"] != "0")
                                        {
                                            echo "<h5 class=\"pull-right\"><s>" . formatearPrecio($vivienda["precio"]) ." €</s></h5>";
                                            echo "<h3>Oferta: " . $vivienda["precio_v_promocion"] . " €</h3>";
                                        }
                                        else
                                        {
                                            echo "<h4 class=\"pull-right\">" . formatearPrecio($vivienda["precio"]) ." €</h4>";
                                        }
                                    ?>
                                <div>
                                    <p><?= descripcionBreve($vivienda["descripcion"]) ?></p>
                                </div>
                                <div class="iconos">
                                    <p>
                                        <i class="fa fa-bed" aria-hidden="true"></i> <?= $vivienda["dormitorios"] ?>
                                        <i class="fa fa-bath" aria-hidden="true"></i> <?= $vivienda["banos"] ?>
                                        <span class="glyphicon glyphicon-move"></span> <?= $vivienda["superficie"] ?>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
					
CLASE 39: MARTES 10/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Las fechas se pueden representar como el formato 01/03/2016 05:17

pero el mas utilizado es contar a partir de un momento determinado, cuyo estándar es 01/01/1970 00:00 GMT+0

En PHP existen dos formas de gestionar la fecha

TIMESTAMP: No depende del servidor y valora según la fecha ejemplo.
DATETIME: Depende del servidor.

Instrucción DATE: Puede tener 1 o dos parámetros:

Date("d/m/Y"): Devuelve la fecha actual.
Date("d/m/Y", $fechaEnTimeStamp): Devuelve la fecha de timestamp en el formato que se le pase en el primer parámetro.

Crear una variable fecha: $otroMomento = mktime(hora, minuto, segundo, mes, dia, año);

microtime(): Para calcular milisegundos. Se puede utilizar para saber cuanto tarda en cargar una página, colocando una al principio y otra al final y restando.

Obtener los valores desglosados de una fecha: getdate($fecha). Ejemplo: $componentes = getdate($otroMomento);
De esta forma se crea un array asociativo con cada uno de los valores (segundos, minutos, día de la semana, etc)

Comprobar si una fecha es válida: checkdate(mes, dia, año);

Ejemplo:

    $esValida = checkdate(2, 29, 2016);
    if ($esValida)
    {
        echo "Es una fecha válida";
    }
    else
    {
        echo "No es una fecha válida";
    }
	
Si cambiamos la fecha a 1997 por ejemplo, el resultado sería falso. Pero 2016 es correcta porque es año bisiesto.

strtotime: Convierte una cadena de fecha en un tipo timestamp. Ejemplos:

    /* Guiones o puntos es formato europeo y con / es formato americano*/
	
    $unaFecha = strtotime("2-10-2015");
    echo date("d/m/y", $unaFecha) . "<br/>";
    $unaFecha = strtotime("2/10/2015");
    echo date("d/m/y", $unaFecha) . "<br/>";
    $unaFecha = strtotime("2015-10-02");
    echo date("d/m/y", $unaFecha) . "<br/>";

Ejemplo del potencial de date: Calcular el siguiente jueves a una fecha dada:

    $timestamp = mktime(0, 0, 0, 10, 5, 2015);
    echo date("d/m/y : N", $timestamp) . "<br/>";
	
    $siguienteJueves = strtotime("next thursday", $timestamp);

    echo date("d/m/y : N", $siguienteJueves) . "<br/>";
	
De igual manera, se pueden hacer otros calculos como +2 weeks, -2 years + 5 months, etc.	

setLocale(): Para definir los formatos de datos en función de la zona local.
echo strftime("%A"): Otra forma de trabajar distinta a time. No se suele usar.

Funciones para trabajar con fechas de tipo datetime:

date_add($fecha1, $fecha2);
date_sub($fecha1, $fecha2);
date_diff($fecha1, $fecha2);

/* Ejercicio: hacer que una cadena como 27/11/2012 04:35 se vea como "El 27/11/2012 a las 04:35 fué Tuesday" */

    function fechaTextual($fecha)
    {
        $fechaConvertida = strtotime(str_replace("/", "-", $fecha));
        return "El " . date("d/m/Y", $fechaConvertida) . " a las " . date("H:i", $fechaConvertida) . " fué " . date("l", $fechaConvertida);
    }

function fechaTextual2($fecha)
    {
        $componentes = getdate(strtotime(str_replace("/", "-", $fecha)));
        return "El ". $componentes["mday"] . "/" . $componentes["mon"] . "/" . $componentes["year"] . " a las " . $componentes["hours"] . ":" . $componentes["minutes"] . " fué " . $componentes['weekday'];
    }
	
Frameworks: homestead y laravel 5.1 LTS

CLASE 40: MIÉRCOLES 11/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Las excepciones sirven para manejar los posibles errores durante la ejecución. En el momento en el que se lanza la excepción, se detiene la ejecución de la función.

	function division($dividendo, $divisor)
	{
		/* 
        /* 
        Comprobamos si el divisor es 0. De ser así, no es posible dividir por 0, por lo cual lanzamos la excepción
        La excepción debe lanzarse con el trhow new Exception y el contenido del mensaje.
        */
        if ($divisor == 0)
        {
            throw new Exception("No puede dividir entre cero");
        }
        if ($divisor == 0)
        {
            throw new Exception("No puede dividir entre cero");
        }
        /* Si llega aquí entonces es que no hay errores, por lo cual realizamos la operación */
        return $dividendo / $divisor;
    }

    /*
    Siempre que una función tenga lanzamiento de excepciones hay que llamarla mediante un try
    try ejecuta la función y en caso de que tenga excepciones, es catch quien las captura y ejecuta el código que hemos escrito en el
    */
    try
    {

        echo division(10, 0);
    }
    catch (Exception $e)
    {
        echo "Ha ocurrido un error: " . $e->getMessage();
    }
    /* Lo que está dentro de estas operaciones se va a ejecutar siempre, tanto si funciona bien como si ocurren errores */
    finally
    {
        echo "Esto va a aparecer siempre";
    }
	
    /* Cuando hay una excepción de cualquier tipo, llama a la función establecida ahí*/
    set_error_handler("miManejadorDeErrores");

    /* Función que muestar un mensaje genérico sobre el tratamiento de excepciones */
    function miManejadorDeErrores($codigo, $error, $archivo=NULL, $linea=NULL)
    {
        throw new Exception("$error encontrado en $archivo, linea $linea")´;
    }

    /* para probar el tratamiento de excepciones */
    try
    {
        $fichero = fopen("noexiste.txt", "r");
    }
    catch(Exception $e)
    {
        echo "Error capturado: " . $e->getMessage();
    } 	
	
Para webs móviles: rem units

CLASE 41: JUEVES 12/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Suma

CLASE 42: VIERNES 13/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Tutoría

CLASE 43: LUNES 16/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Primera página Javascript:

<!DOCTYPE html>
<html lang="es">

<head>

<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script type="text/JavaScript">
	
</script>

</head>
<body>
	
</body>
</html>

Al abrir un bloque de javascript ya se puede utilizar las herramientas de desarrollador. (menu, mas herramientas, herramientas para desarrolladores)

Cuando las tengamos abiertas, seleccionamos la consola y escribimos window

Asi tenemos acceso a todas las variables y componentes disponibles.

Declaración de variables: <script>var nombre=valor</script>

Página con un botón que da un mensaje al pulsar:

------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="es">

<head>

<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
</head>
<body>
<section>
	<span onclick="alert('hola mundo!');">Click aquí</span>
</section>	
</body>
</html>

------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script type="text/javascript">
	window.onload = function()
	{
		document.getElementById("lanzar_alerta").onclick = function()
		{
			alert("Hola Mundo");
		}
	}
</script>
</head>
<body>
<section>
	<span id="lanzar_alerta">Click aquí</span>
</section>	
</body>
</html>

------------------------------------------------------------------------------------------------------
--------------------------------index.html----------------------------
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script type="text/javascript" src="funciones.js">
</script>
</head>
<body>
<section>
	<span id="lanzar_alerta">Click aquí</span>
</section>	
</body>
</html>

--------------------------------funciones.js----------------------------
window.onload = function()
{
	document.getElementById("lanzar_alerta").onclick = function()
	{
		alert("Hola Mundo");
	}
}
------------------------------------------------------------------------------------------------------
--------------------------------index.html----------------------------
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script defer src="funciones.js">
</script>
</head>
<body>
<section>
	<span id="lanzar_alerta">Click aquí</span>
</section>	
</body>
</html>

--------------------------------funciones.js----------------------------
document.getElementById("lanzar_alerta").onclick = function()
{
	alert("Hola Mundo");
}
-------------------------------------------------------------------------

defer: cargar, pero no ejecutar hasta terminar la página

Sintaxis de javascript:

- JavaScript ignora las líneas y los esapcios en blanco
- Es Case Sensitive, distingue entre mayúsculas y minúsculas

Comentarios: Una sola línea con // y varias líneas con /**/

Métodos para enviar mensajes y que se puedan leer desde la consola:
console.log("Mensaje estándar para la consola");
console.warn("Mensaje de advertencia");
console.error("Mensaje de error");
console.info("Mensaje informativo");

Formas de declarar variables:
- var a = 1; /* Usando var */
- b = 2; /* Sin usar var */
- let nombreVariable. let se declara de forma local dentro de un bloque. Es decir, se puede declarar en el interior de un bucle y desaparece al terminar.

En ámbito global no hay diferencia, pero si se declara dentro de una función utilizando var esa variable solo existirá dentro de la función. Si dentro de una función se declara sin var, la busca primero en el ámbito locald de la función, y si no la encuentra irá subiendo de nivel hasta el ámbito global, momento en el cual si no la ha encontrado, la creará en el ámbito global..

Si se declara una variable pero no asignandola, hay que usar var.

- Solo puede estar formadas porletras, números y los simbolos $ y _
- El primer carácter no debe ser un número

Ejemplo de variables:

// Ámbito global
var a = 1;
b = 2;

function sumar()
{
	// Ámbito local (dentro de una función)
	var a = 4;
	b = 6;
	resultado = a + b;
}

sumar();
console.log("a = " + a);
console.log("b = " + b);
console.log("resultado: " + resultado);

Ejercicios:
1. Crear un archivo javascript con dos variables n1 y n2, que tengan los valores 3 y 6 respectivamente
2. Dibujar ambos valores en la consola con los cuatri tipos de mensaje que hemos visto.

Tipos de variables:
- Tipos primitivos
	- Number: Entero o decimal. La parte decimal se separa con punto (.)
	- String: Contiene texto. Dobleso simples.
	- Boolean: true o false
	- Undefined: Tipo especial para cuando algo no está definido. Solo puede contener el valor undefined.
	- Null: Tipo para cuando algo no existe o está vacío.
	- Symbol: poco utilizado.
- Objetos

Asignar un valor a una variable: =
Operadores de incremento: ++variable y --variable. Si aparece como sufijo (variable++) se incremente después de ejecutar su sentencia. Ejemplo:

var numero1 = 5;
var numero2 = 8;
numero3 = ++numero1 + numero2;
alert(numero3);

var numero4 = 5;
var numero5 = 8;
numero6 = numero4++ + numero5;
alert(numero6);

Concatenar: cadena1 + cadena2
Negación: si un número la operación dara ún reusltado de false si el número vale 0 y true si tiene cualquier otro valor.

- Cuando una oepracion n otiene sentido, devuelve el valor NaN (Not a number)
- Un valor numérico excesivamente garnde (fuera de los límites admisibles) se representa como Infinity. Se puede asignar a una variable.
- Un valor excesivamente pequeño, se redondea a 0.

Tipos de cuadros de texto:
- alert(mensaje): muestra un cuadro de diálogo con un mensaje y un único botón de confirmación que sirve para cerrarlo.
- confirm(mensaje): muestra un cuadro de diálogo con un mensaje y dos botones: aceptar y cancelar. Si se pusla el botón Aceptar, el cuadro de diálogo devuevle un valor ture. Si sepusal Cancelar devuevle false.
- prompt(mensaje): Muestra un cuadro de diálogo con un mensaje, y puideque el usuario introduzca un dato por teclado. El valor devuelto por el cuadro de diálogo es el dato introducido.

Ejemplos:

console.log(confirm("¿Eres un caraanchoa?"));

var valor = prompt("Introduce el valor");
console.log(valor);

En una función, si se envían mas parámetros de los necesarios, son ignorados. Si se pasan menos parámetros de los necesarios, JavaScript asignará el valor undefined a los parámetros de los que no recibe información.

function pruebaParametros(parametro1, parametro2)
{
	console.log(parametro1);
	console.log(parametro2);
}

pruebaParametros("Hola", "Adios");
pruebaParametros("uno", "dos", "tres");
pruebaParametros("ABCDE");

Ejercicios:
Crear una función que reciba dos parámetros (nombre y edad) y que escriba en consola "Soy [nombre] y tengo [ead] años."

CLASE 44: MARTES 17/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Operador ternario:

variable = (condicion) ? valor1 : valor2;

Ejemplo:

var horaActual = 20;
var momento = (horaActual < 12) ? "Antes del mediodía" : "Después del mediodía";

Ejercicio: Crear una función que reciba dos parámetros numéricos y comrpuebes si el primero es divisible por el segundo. Mostrar el resultado en la consola:

	function esDivisible(dividendo, divisor)
	{
		mensaje = (dividendo%divisor == 0) ? "Es divisible" : "No es divisible";
		console.info(mensaje);
	}

	esDivisible(10, 6);
	
Ejercicio: Mostrar el día de la semana:

	function diaDeLaSemana(dia)
	{
		console.log("Dia: " + dia);
		switch(dia)
		{
		case 1:
			console.info("Es Lunes");
		break;
		case 2:
			console.info("Es Martes");
		break;
		case 3:
			console.info("Es Miércoles");
		break;
		case 4:
			console.info("Es Jueves");
		break;
		case 5:
			console.info("Es Viernes");
		break;
		case 6:
		case 7:
			console.info("Es fin de semana");
		break;
		default:
			console.warn("Día no válido");
		}
}

Ejercicio: Mostrar por pantalla la cara opuesta de un dado. Es decir, si el dado vale 5, debe salir un mensaje que ponga "Dos"

	function numeroATexto(numero)
	{
		switch(numero)
		{
			case 1: return "Uno"; break;
			case 2: return "Dos"; break;
			case 3: return "Tres"; break;
			case 4: return "Cuatro"; break;
			case 5: return "Cinco"; break;
			case 6: return "Seis"; break;
			case 7: return "Siete"; break;
			default: return "Error"; break;
		}
	}

	function caraOpuestaDado()
	{
		var numero = prompt("Introduce una cara del dado")	
		caraOpuesta = 7 - numero;
		alert("Cara opuesta: " + numeroATexto(caraOpuesta));
	}

	caraOpuestaDado();
	
Ejercicio: Crear un factorial:

	function factorial(numero)
	{
		if (numero >= 0)
		{
			var resultado = 1;
			for (var i = 1; i <= numero; i++)
			{
				resultado *= i
			}
			console.info("Factorial de " + numero + ": " + resultado);
		}
		else
		{
			console.warn("Número incorrecto: " + numero);
		}
	}

	factorial(4);
	factorial(5);
	factorial(0);
	factorial(-3);
	factorial(99);	

Crear una función que reciba un número entero y escriba por consola la tabla de multiplicar de ese número

	function tablaDeMultiplicar(numero)
	{
		for (var i = 0; i <= 10; i++)
		{
			console.log(numero + " x " + i + " = " + numero * i);
		}
	}

	tablaDeMultiplicar(2);
	tablaDeMultiplicar(7);
	tablaDeMultiplicar(23);

Ejercicio: con números primos: Indicar si es primo o indicar sus divisores en caso que tenga

	function esPrimo(numero)
	{
		var limite = parseInt(numero/2);
		var divisores = 0;
		for (var i = 2; i <= limite; i++)
		{	
			if (numero%i == 0)
			{
				divisores++;
				console.log(numero + " es divisible por " + i);
			}
		}

		if (divisores == 0)
		{
			console.info(numero + " es primo");
		}
	}

	esPrimo(2);
	esPrimo(3);
	esPrimo(4);
	esPrimo(5);
	esPrimo(6);
	esPrimo(7);
	esPrimo(8);
	esPrimo(11);
	esPrimo(15);
	
Crear una función que imprima tantos asteriscos como se le indiquen por parámetro

	function asteriscos(numero)
	{
		var i = 0;
		var cadena = "";
	
		while(i<numero)
		{
			cadena += "*";
			i++;
		}
	
		console.log(cadena);
	}

	asteriscos(5);
	asteriscos(45);	

Ejercicio: Función que muestre todos los números impares entre dos números	

	function imparesEntreDosNumeros(numero1, numero2)
	{
		var iterador = numero1 + 1;
		console.info("Comienzo: " + numero1);
		for (iterador; iterador < numero2; iterador++)
		{
			if (iterador % 2 != 0)
			{
				console.log(iterador);
			}
		}
		console.info("Final: " + numero2);
	}

	imparesEntreDosNumeros(3, 45);
	
Ejercicio: Función que calcule la media de los números introducidos por pantalla y que si se introduce un 0, termine la ejecución

	function calcularMedia()
	{
		var numeroIntroducido = parseInt(prompt("Introduzca un número (0 para salir)"));
		var numeros = 1;
		var numerosIntroducidos = numeroIntroducido;
	
		while (numeroIntroducido != 0)
		{
			alert("La media de los valores introducidos es " + (numerosIntroducidos / numeros));
			numeroIntroducido = parseInt(prompt("Introduzca un número (0 para salir)"));
			numerosIntroducidos += numeroIntroducido;
			numeros++;
		}
	}

	calcularMedia();
	
Ejercicio: Crear una función que vaya leyendo números por teclado hasta que se introduzca un 0, e indique cuál es el mayor.

	function numeroMayor()
	{
		nMayor = Number.MIN_VALUE;
		var numeroLeido;
		do
		{
			var numeroLeido = parseInt(prompt("Introduzca un número. O para salir"));
			if (numeroLeido > nMayor)
			{
				nMayor = numeroLeido;
			}

		}while (numeroLeido != 0);
	
		alert("El número mas grande introducido es " + nMayor);
	}

	numeroMayor();
	
Crear una función que vaya imprimiendo números enteros aleatorios del 1 al 100 en la consola, y al lado el resultado de sumarlos todos ("Número 32. Total = 268"). Seguir imprimiendo números hasta que el resultado sea mayor o igual a 1000. Imprimir el resultado final. Para crear un número aleatorio del 1 al 100, utilizarel código: parseInt(Math.random()*100).

	function sumaMil()
	{
		var numero = parseInt(Math.random()*100);
		var suma = numero;

		while (suma <= 1000)
		{
			console.log("Número: " + numero + ". Total = " + suma);
			numero = parseInt(Math.random()*100);
			suma += numero;
		}
		console.info("Resultado final - Número: " + numero + ". Total = " + suma);
	}

	sumaMil();

CLASE 45: MIÉRCOLES 18/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Programación orientada a objetos. Se dice que un lenguaje de programación es orientado a objetos si proporciona cuatro arcterísticas básicas:

- Encapsulación: La capacidad de guardar información relacionada, tanto datos como funcione, juntos dentro de un objeto.
- Agregación: La capcidad de guardar un objeto dentro de otro.
- Herencia: La capacidad de una clase de depender de otra u otras clases, de las que toma sus propiedades y métodos.
- Polimorfismo: La capacidad de escribir una función o método que se ejecute de varias formas diferentes.

Un objeto de JavaScript es una colección de propiedads y métodos.
- Una propiedad es un valor o un conjunto de valores (en forma de matriz u objeto), que es miembro de un objeto.
- Un método es una función que es miembro de un objeto.

Javascript admite cuatro tipos de objeto:
- Objetos intrinsecos, como Array y String
- Objetos creados por el usuario.
- Objetos host, como window y document.
- Objetos ActiveX.

Para acceder a una propiedad de un objeto, se utiliza la sintaxis punto (.)

Por ejemplo:

/* Obtener el valor del título */

var str = document.title;

/* Mostramos el título por consola */

console.info(str);

/* Informamos que vamos a cambiar el título y lo cambiamos, pera ver los cambios */
alert("Ahora se cambiará el nombre del título");
document.title = "Cambiado";

Objetos del navegador
- window: Es el objeto de mas alto nivel. Contiene las propiedades de la ventana. Si se trabaja con marcos (frames), se generará un objeto window por cada marco. Hoy en día los marcos ya no se usan.
- navigator: Contiene información sobre el navegador que etamos utilizando, como el nombre, la versión, la plataforma, etc.
- location: Este objeto contiene toda la información sobre la URL que se está visualizando, así como todos los detalles de esa dirección (puerto, protocolo, etc).
- screen: Permite obtener inforación sobre la resolución de la pantalla.
- document: Este objeto hace referncia a determinadas características de la página, como el color de fondo o el color de los enlaces. Además, hace referencia a la página que se está cargando en el navegador.
- history: Contiene inforamción sobre los enlacesque el usuario ha visitado. Permite acceder al historial y avanzar y retroceder dentro de el.

Ejemplos con javascript:

	<input type="button" value="Haz click" onclick="alert('Gracias')"/>

	<div onclick="console.log('Has hecho click')" onmouseover="console.log('Has pasado por encima con el ratón')">Esto es un div interactivo</div>

	<div style="width: 200px; height: 200px; background-color: green" onmouseover="this.style.backgroundColor='red'" onmouseout="this.style.backgroundColor='blue'"></div>
	
Para cambiar el css desde javascript, los atributos se pasan a camelCase;	

Ejercicio: Crear un cuadro de texto que escriba eon consola "He entrado" cuadno el usuario lo seleccione ara escribir, y escriba "He salido" cuadno el usuario pulse en otro sitio fuera del cuadro de texto. Usa para ello los eventos onfocus y onblur.

	<div class="form-group">
		<input type="text" onkeyup="escribir(this.value);" onfocus="entrar();" onblur="salir();" class="form-control" id="texto">
	</div>
	
	fichero js:
	
	function entrar()
	{
		console.info("He entrado");
	}

	function salir()
	{
		console.warn("He salido");
	}

	function escribir(elemento)
	{
		console.log(elemento);
	}
	
onkeydown: Recién pulsada la tecla
onkeypress: Cuando envia la orden de teclado
onkeyup: Cuando la tecla se levanta

Ejercicio: Crear varios botones con el nombre de varias páginas web populares. Al haer click sobre ellos, el boton tiene que llevarnos a esa página mediante javascript. Utilizar para ello window.location.

	<input type="button" onclick="window.location='http://www.google.es'" value="Google" />
	<input type="button" onclick="window.location='http://www.facebook.com'" value="Facebook" />
	<input type="button" onclick="window.location='http://www.youtube.com'" value="Youtube" />
	<input type="button" onclick="window.location='http://www.meneame.net'" value="Meneame" />
	
Ejercicio: Crear un botón que se mueva de posicion al ratón por encima por encima:

	js:

	function mover(objeto)
	{
		objeto.style.position = "absolute";
		objeto.style.left = parseInt(Math.random()*screen.availWidth) + "px";
		objeto.style.top = parseInt(Math.random()*screen.availHeight) + "px";
	}

	html:

	<input type="button" onmouseover="mover(this);" value="boton"/>
	
Ejercicio: Crear tres botones en una pagina. Crear una función pra que al hacer click sobre cualquiera de los tres botones, nos impirmia en consola el texto de dicho boton. Utilizar para ello el atributo innerHTML del botón.

innerHTML muestra el contenido html entre las etiquetas.

	js:
	
	function mostrarNombre(objeto)
	{
		console.log(objeto.innerHTML);
	}
	
	html:
	
	<button onclick="mostrarNombre(this);">Aceptar</button>

	<button onclick="mostrarNombre(this);">Cancelar</button>

	<button onclick="mostrarNombre(this);">Ratonizar</button>
	
Ejercicio: Crear una iamgen que cambie cuando el ratón pase por encima y que vuelva a su estado original cuando el ratón deje de estar encima. Utiliza para ello los eventos onmousover y onmouseout.

	html:

	<img src="img/img1.jpg" onmouseover="imagenOver(this);" onmouseout="imagenOriginal(this);"/>
	
	js:
	
	function imagenOriginal(objeto)
	{
		objeto.src = "img/img1.jpg";
	}

	function imagenOver(objeto)
	{
		objeto.src = "img/img2.jpg";
	}

Manejadores de eventos semánticos:

html:

	<input id="boton" type="button" value="Haz click" />
	
js:

	document.getElementById("boton").onclick = prueba;
	
	function prueba()
	{
		alert("Has pulsado");
	}

Ejercicio: Crear un botón con el texto "Estoy activo". Crear una función pra que al hacer click sobre el boton, cambie el texto a "Estoy inactivo", y si se vuelve a pulsar vuelva a cambiar a "Estoy activo". Utilizar para ello el atributo innerHTML del botón.

<button class="btn btn-primary" id="boton">Estoy activo</button>

html:

	document.getElementById("boton").onclick = cambio;

js:
	
	function cambio()
	{
		if (this.innerHTML == "Estoy activo")
			this.innerHTML = "Estoy inactivo";
		else
			this.innerHTML = "Estoy activo";
	}

Ejercicio: Crear una página con un botón y una imagen. Al pulsarel botón, la imagen debe desaparecer. Al volver a pulsarlo, la imagen dee reaparecer. Utilizar el atributo style.display de la imagen para hacerlo.

document.getElementById("boton").onclick = cambio;

html:

	<img id="imagen" src="img/img1.jpg" />
	<button class="btn btn-primary" id="boton">Cambiar</button>
	
js:

function cambio()
{
	if (document.getElementById("imagen").style.display != "none")
		document.getElementById("imagen").style.display = "none";
	else
		document.getElementById("imagen").style.display = "inline";
}

Ejercicio: Crear una página con un botón y un checkbox. El botón debe esatr inicialmente desactivado. Cuando se marque el checkbox, el botón se debe activar. Si se vuelve a desmarcar, el botón se debe desactivar nuevamente.

Ejercicio:
Crear una página con 3 campos de texto y un botón. El tercer campo de teto debe estar desactivado. En los otros dos campos el usuario debe escribir un número, y al hacer click sobre el botón debe aparecer el resultado de la suma en el tercer cuadro de texto. Si la suma no es corecta (porque no hay números escritos, o por que no son números), mostrar un cuadro de diálogo informando del error. Utilizar si es necesario la función isNaN(valor).

html:

	<div class="form-group">
		<label for="n1">Sumando 1</label>
		<input type="email" class="form-control" id="n1">
	</div>
	<div class="form-group">
		<label for="n2">Sumando 2</label>
		<input type="email" class="form-control" id="n2">
	</div>
	<div class="form-group">
		<label for="resultado">Resultado</label>
		<input type="email" class="form-control" id="resultado" disabled="disabled">
	</div>
	<input id="boton" type="button" value="Sumar" />

	
js:
	
	document.getElementById("boton").onclick = sumar;
	
	function sumar()
	{
		sumando1 = parseInt(document.getElementById("n1").value);
		sumando2 = parseInt(document.getElementById("n2").value);
		if (isNaN(sumando1))
			alert("El sumando 1 no es un número válido");
		else
		{
			if (isNaN(sumando2))
				alert("El sumando 2 no es un número válido");
			else
			{
				document.getElementById("resultado").value = sumando1 + sumando2;
			}
		}
	}
	
CLASE 48: LUNES 23/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------	

Arrays con elementos sin definir: Al no especificarse, se crean como undefined.

var nombres = [];
nombres[3] = "Ataulfo";

var numeros = ["cero", , "dos", , "cuatro"];
console.log(numeros[0]); // cero
console.log(numeros[1]); // undefined

Los elementos undefined solo se pueden meter entre otros elementos. Es decir, si se hiciera:

	var numeros = ["cero", , "dos", , ,];

solo se guardarían los tres primeros, los ultimos no se guardan.

Tipado de arrays:

En javascript, un array puede tener elementos de varios tipos: números, cadenas, booleanos, incluso otros arrays.

var datos = [13, "Juanito, 22.8, true, ["uno", "dos"]];

console.log(datos[0]); //13
console.log(datos[1]); //Juanito
console.log(datos[4][1]); //dos

Recorrido de arrays: Suele usarse un bucle for 

var vocales = ["a", "e", "i", "o", "u"];

	for (var i = 0; i < vocales.length; i++)
	{
		console.log(vocales[i]);
	}

mediante un bucle foreach: Método relativamente moderno añadido en las últimas especificaciones de javascript

var palabras = ["Hola", "como", "estas", "hoy"];

function mostrarPalabra(valor, indice)
{
	console.log("Indice: " + indice);
	console.log("Valor: " + valor);
}

palabras.forEach(mostrarPalabra);

Mediante bucle for ... in: Este tipo de bucle itera sobre las propiedades de unobjeto arbitrario.

Esto quiere decir que en cada iteración, el bucle nos devolverá el índice de uno de los elemtnso del array, no el valor.

Además, hay que tener en cuenta que el orden en que nos devolverá esos índices no tiene por que coincidir con el orden original del array. Es por eso que esta forma está desaconsejada para recorrer arrays, y se utiliza generalmente para recorrerobjetos.

	var vocales = ["a", "e", "i", "o", "u"];

	for (indice in vocales)
	{
		console.log("Indice: " + indice);
		console.log("Valor: " + vocales[indice]);
	}

Mediante método map: Es un método que permite recorrer los elementos de un array, einvocar una función para que haga algo con cada uno de ellos.

function pintarCiudad(ciudad)
{
	console.log(ciudad);
}

var ciudades = ["Badajoz", "Cáceres", "Madrid", "Valencia", "Sevilla"];
ciudades.map(pintarCiudad);

Propiedades y métodos de los arrays

Los arrays son objetos y como tales, disponen de una serie de propiedades y méotods.

- length: propiedad que nos devuelve el número de elementos que contiene
- concat(x, y): Método que devuevle la unión de dos arrays:
- split(separador): Crea un array a pafrtir de una cadena, dividiendola por lo que se especifique en seprador
- join(separador): Une los elementos de una cadena de un array para formar unacadena de texto, uniéndolos mediante separador. Es el contrario de split
- indexOf(valor): Devuelve el índice del primer elemetno del array cuyo valor coincide con el especificado.
- lastindex(valor): Igual, pero con el último elemento coincidente.
- pop(): Suprime el último elemento del array y lo devuelve
- push(elem2, elem2): Añade uno o mas elementos al array
- shift() Suprime el primer elemento del array y lo devuelve
- unshift(elem1, elem2): Añade uno o mas elemento sal principio del array, y devuelve la nueva longitud del array.
- reverse(): Le da la vuelta a los elementos del array, dejandoo el primero en última posición y viceversa
- slice([comienzo, [final]]): Devuelve un nuevo array a partir de una sección de otro array, comenzando ne el elemento comienzo y terminando, pero no incluyendo el elemento final. Si no se incluye final, toma todso los elementos hsta el final. Si no se incluye comienzo, se supone que comienza en el primer elemento.
- sort: Ordena alfabeticamente los elementos de un array. Los números los toma como cadenas, por lo que no es un método convenientepara ordenar números. Ejemplo: 20 y 100, colocaría el 100 delante.
- toString

Ejercicio:

Crear un array con varios datos de un usuario incluyendo algunos elementos que a su vez sean arrays (direccion, familia, etc). Mostrar por consola y comprueba como se puede acceder a los distintos elementos del array.

var array = ["Jose Luis", "Martin Avila", 26, true, [20, "Agosto", 1990]];

Crea una función que vaya pidiendo números o palabras por tecaldo y los vaya introduciendo en un array, hasta que se introduzca un 0. En ese momento, que recorra el array mediante alguno de los  métodos que hemos visto y muestre por consola el indice y el valor de cada elemento.


	function rellenarArray()
	{
		var array = [];
		var elemento;

		elemento = prompt("Introduzca un elemento. O para salir");

		while (elemento != 0)
		{
			array.push(elemento);
			elemento = prompt("Introduzca un elemento. O para salir");
		}

		for (var i = 0; i < array.length; i++)
		{
			console.log("Elemento " + i + ": " + array[i]);
		}
	}

	rellenarArray();

Crear un array de números, y escribe una función que te devuelva la súma de todos ellos utilizando un bucle forEach

	var array = [2, 5, 78, 12, -4];
	var resultado = 0;

	function sumarNumeros(valor)
	{
		resultado += valor;
	}

	array.forEach(sumarNumeros)
	console.info(resultado);

	
Ejercicio: Crea una función que lea por teclado una frase de texto y cree un array dividiéndola por los espacios. A continuación, que muestre por consola la siguiente información: número de palabras, primera palabra, última palabra, las palabras en orden inverso al original y las palabras ordenadas alfabeticamente.

	function ejercicio4()
	{
		/* Leer una frase por teclado */
		var cadenaLeida = prompt("Introduzca una frase");

		/* La convertimos en array utilizando el espacio como separador */
		var array = cadenaLeida.split(" ");

		/* Número de palabras */
		console.log("Número de palabras: " + array.length);

		/* Primera palabra: */
		console.log("Primera palabra: " + array[0]);

		/* Última palabra: */
		console.log("Última palabra: " + array[array.length - 1]);

		/* Palabras en orden inverso */
		console.log("Palabras en orden inverso: " + array.reverse();

		/* Palabras ordenadas alfabeticamente */
		console.log("Palabras ordenadas alfabeticamente: " + array.sort());
	}

	ejercicio4();

Listado de manejadores de venetos
- onblur: El elemento pierde el foco. Para <button> <input> <label> <select> <text> <body>
- onchange: Cuando un elemento que se ha modificado pierde el foco
- onclick: Hace click con el ratón
- ondblclick: Hace doble click con el ratón
- onfocus: El elemetno recibe el foco
- onkeydown: Pulsa una tecla (sin soltarla)
- onkeypress: Pulsa una tecla (justo después de onkeydown)
- onkeyup: Suelta una tecla pulsada
- onload: Al terminar la carga de la página.
- onmousedown: Pulsa (sin soltar) un botón del ratón
- onmousemove: Mueve el rat-on
- onmouseout: El raton abandona el área sobre el elemento
- onmouseover: El ratón entra en el área sobre el elemento
- onmouseup: Suelta el botón del ratón que estaba pulsando
- onreset: Inicializa el formuario (borras todos sus datos)
- onresize: Cambia el tamaño de la ventana dle navegador
- onselect: Selecciona un texto
- onsubmit: Envía el formulario
- onunload: Se abandona la página (por ejempo, al cerrar el navegador)

¿Que es el DOM?
Una de las mayoers potencializades de JavaScript es que puede manipular cualquier elemento de una página web y modificar su contenido, su color, su opsicion... o hacer y desaparecer elementos. Para hacer esto posible necesitamos identificar exactamente cada elemento de una página web, y así poder indicarle a JavaScript sobre que elelemnto debe actuar.

Para eso se definió un estándar llamado DOM (Document Object Mode)

Representación DOM: Document, Element, Text, Atributo

Document *Element Document
	- head * Element
		- meta: 
		- title * element : Página sencilla * text
	- body * Element
		- div * element
			- h1 * element: Ejemplo de DOM * text
			- p * element :
				- Esta página es * text
				- strong * Element: muy sencilla * text
				
getElementsByTagName(nombreEtiqueta): La función obtiene todos los elementso de la página XHTGML cuya etiqueta coincida con el parámetro que se le pasa a la función. Devuelve un array con los elementos que coinciden con esa etiqueta.

Ejemplo:

var parrafos = document. getElementsByTagName("p")

Del mismo modo, para recorrer todos los párrafos de la página podríamos utilizar el siguiente código:

for (var i = 0; i < parrafos.length; i++)
{
	var parrafo = parrafos[i];
}

var parrafos = document.getElementsByTagName("p")
var pimerParrafo = parrafos[0];
var enlaces = primerParrafo.getElementsByTagName("a");

Ejercicio: Crear una página que contenga una lista ordenada (ol) de cinco elementos y a continuación otra lista no ordenada (ul) con otros dinco elementos. Crear un botón que al ser pulsado invoque una función JavaScript. Esta función debe mostrar por consola todos los elementos de la lista ordenada, y a continuación todos los elementos de la lista no ordenada.

html:

<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script defer type="text/javascript" src="funciones.js">
</script>
</head>
<body>
<section>

	<ol>
		<li>Pan</li>
		<li>Queso</li>
		<li>Jamon</li>
		<li>Atún</li>
		<li>Queso azul</li>
	</ol>

	<ul>
		<li>Ratón</li>
		<li>Teclado</li>
		<li>Monitor</li>
		<li>Impresora</li>
		<li>Wifi</li>
	</ul>

	<button id="boton" class="btn btn-info">Boton</button>

</section>	
</body>
</html>

js:

document.getElementById("boton").onclick = listar;

function listar()
{
	console.info("Elementos ordenados");

	var listasOrdenadas = document.getElementsByTagName("ol");
	var elementosDeListaOrdenada = listasOrdenadas[0].getElementsByTagName("li");
	for (var i = 0; i < elementosDeListaOrdenada.length; i++)
	{
		console.log(elementosDeListaOrdenada[i].innerHTML);
	}

	console.info("Elementos no ordenados");

	var listasNoOrdenadas = document.getElementsByTagName("ul");
	var elementosDeListaNoOrdenada = listasNoOrdenadas[0].getElementsByTagName("li");
	for (var i = 0; i < elementosDeListaNoOrdenada.length; i++)
	{
		console.log(elementosDeListaNoOrdenada[i].innerHTML);
	}
}

Ejercicio: Crear una página con una tabla que contenga tres campos enla cabcera: nombre, apellidos y edad. Añadir seis filas a la tabla con los datos de 6 usuarios. Crar una función javascript que modifique el color de fondoe de las filas impares de la tabla, utilizando para ello el atributo style.

js:

document.getElementById("boton").onclick = listar;

function listar()
{
	var filas = document.getElementsByTagName("tr");
	for (var i = 1; i < filas.length; i += 2)
	{
		filas[i].style.backgroundColor = "#ccc";
	}
}

html:

<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi primer JavaScript</title>
<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script defer type="text/javascript" src="funciones.js">
</script>
</head>
<body>
<section>

	<table class="table striped-table">
	<thead>
		<tr>
			<th>Nombre</th>
			<th>Aellidos</th>
			<th>Edad</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Luffy</td>
			<td>Monkey D.</td>
			<td>18</td>
		</tr>
		<tr>
			<td>Zoro</td>
			<td>Roronoa</td>
			<td>24</td>
		</tr>
		<tr>
			<td>Law</td>
			<td>Trafalgar D.</td>
			<td>26</td>
		</tr>
		<tr>
			<td>Daz</td>
			<td>Bones</td>
			<td>23</td>
		</tr>
		<tr>
			<td>Moria</td>
			<td>Gecko</td>
			<td>40</td>
		</tr>
		<tr>
			<td>Shanks</td>
			<td>el pelirrojo</td>
			<td>36</td>
		</tr>
	</tbody>
	</table>

	<button id="boton" class="btn btn-info">Cambiar</button>

</section>	
</body>
</html>

CLASE 49: MARTES 24/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Acceso directo a los nodos 

getElementsByName(nombre)
La función es similar a la anterior, pero en este caso se buscan los elementos cutyo atributo name sea igual al parámetro proporcionado. En el siguietne ejemplo, se obtiene directamente el único párrafo con el nombre indicado:

<p name="titulo">Esto es un párrafo</p>
<p name="subtitulo">Esto es otro párrafo</p>

--------------------------------------------------------------------
Ejercicio: Crear una página que contenga un encabezado con h3 y cuatro radiobuttons. Todos con etiqueta name. Añade dos botones, el primero con el texto "Mostrar DOM" y el segundo con eltexto "Mostrar marcado". Crea una función javascript que sea invocada al hacer click en el primer botón, y que muestre por consola el contenido obtenido a llamar a la función getElementsByName sobre el encabezado y sobre los radiobuttons.

Ejercicio: Crear otra función que sea invocada al hacer click en el segundo botón del ejercicio anterior. La función debe mostrar un cuadro de diálogo donde aparezca el valor del radibutton que esté marcado en ese momento.

js:

document.getElementById("botonDOM").onclick = listar;
document.getElementById("botonMarcado").onclick = cualPulsado;

function listar()
{
	var titulo = document.getElementsByName("titulo");
	console.log(titulo[0].innerHTML);

	var radios = document.getElementsByName("elementoRadio");
	for (var i = 0; i < radios.length; i++)
	{
		console.log(radios[i]);
	}
}

function cualPulsado()
{

	var radios = document.getElementsByName("elementoRadio");
	
	for (var i = 0; i < radios.length; i++)
	{
		if (radios[i].checked == true)
			alert("Marcado: " + radios[i]);
	}
}

html:

	<h3 name="titulo">Prueba de getElementsByName</h3>

	<form>
		<input type="radio" name="elementoRadio" value="primero">Primero<br>
		<input type="radio" name="elementoRadio" value="segundo">Segundo<br>
		<input type="radio" name="elementoRadio" value="tercero">Tercero<br>
		<input type="radio" name="elementoRadio" value="cuarto">Cuarto<br>

		<input type="button" id="botonDOM" class="btn btn-info" value="Mostrar DOM">
		<input type="button" id="botonMarcado" class="btn btn-info" value="Mostrar marcado">
	</form>
--------------------------------------------------------------------

Mas formas:

getElementsByClassName("nombreClase");

Para coger todos los nodos que tengan una clase CSS concreta

querySelectorAll("SelectorCSS");

Devuelve todos aquellos nodos que cumplen con la especificación del selecdtor CSS. Se pueden idincar varios selectores separados porcomas.

Ejemplo: 

var elementos = document.querySelecdtorAll("#menu1 p");

querySelector("selector CSS");

Funcinoa como el anterior, pero devolviendo un único nodo. Si hay varios nodos que cumplen con la especificación del selector CSS, devolverá el primero que encuentre.

Ejercicio: Crear una página <ul> con la clase menú. Esta lista debe contener cinco elementos, todos con la clase "opcion". utiliza la función getElementsByClassName() para mostrar porconsola todos los elementos que contentan la clase menu.

<ul class="menu">
	<li class="opcion">Opcion 1</li>
	<li class="opcion">Opcion 2</li>
	<li class="opcion">Opcion 3</li>
	<li class="opcion">Opcion 4</li>
	<li class="opcion">Opcion 5</li>
</ul>

js:

var elementos = document.getElementsByClassName("menu");

for (var i = 0; i < elementos.length; i++)
{
	console.log(elementos[i]);
}

Ejercicio: Crear un nuevo estilo CSS llamado "rojo_negrita", que pinte el texto de rojo y lo ponga en negrita. Utiliza la función querySelectorAll() para obtener ltodos los elementos que están a su vez dentro de otro elemento con la lcase "menú", y que además contienen la clase "opción" .Sustituye la clase que tenían previamente por la nueva clase rojo_negrita, utilizando para ello el parámetro className.

js:

	var elementos = document.querySelectorAll(".menu .opcion");

	for (var i = 0; i < elementos.length; i++)
	{
		elementos[i].className = "rojo_negrita";
	}

html:

	<style>
	.rojo_negrita
	{
		color: red;
		font-weight: bold;
	}
	</style>
	</head>
	<body>
	<section>

	<ul class="menu">
		<li class="opcion">Opcion 1</li>
		<li class="opcion">Opcion 2</li>
		<li class="opcion">Opcion 3</li>
		<li class="opcion">Opcion 4</li>
		<li class="opcion">Opcion 5</li>
	</ul>
	
Ejercicio: Modificar la función anterior de modo que en vez de sustituir la clase, la añada:

js:

var elementos = document.querySelectorAll(".menu .opcion");

for (var i = 0; i < elementos.length; i++)
{
	elementos[i].className += " rojo_negrita";
}

Ejercicio: Realizar lo mismo pero hacer que se ejecute al colocar el ratón encima

html:

	<ul class="menu">
		<li class="opcion">Opcion 1</li>
		<li class="opcion">Opcion 2</li>
		<li class="opcion">Opcion 3</li>
		<li class="opcion">Opcion 4</li>
		<li class="opcion">Opcion 5</li>
	</ul>
	
js:

	function hacerInteractivo()
	{
		var elementos = document.getElementsByClassName("opcion");

		for (var i = 0; i < elementos.length; i++)
		{
			elementos[i].onmouseover = anadirClase;
		}
	}

	function anadirClase()
	{
		console.log("creo quehace algo");
		this.className += " rojo_negrita";
	}

	hacerInteractivo();

Creación de nodos: Además de acceder a los nodos, las otras operaciones mas habituales son las de crear y eliminar nodos del árbol DOM, es decir, crear y eliminar "trozos" de la página web.

Un elemento XHTML sencillo, como un parrafo, genera dos nodos: Un nodo de tipo Element que representa la etiqueta <p>, y un segundo nodo de tipo Text que representa el contenido de la etiqueta.

Para crear nuevos nodos necesitamos usar 3 funciones DOM:

createElement(etiqueta): Crea un nodo de tio Element que representa al elemento XHTML cuya etiqueta se pasa como parámetro
createTextNode(contenido): Crea un nodo de tipo Text que almacena el contenido textual de los elemtnso XTHML
nodoPadre.appendChild(nodoHijo): Añade un nodo como hijo de otro nodo. Se debe utilizar al menos dos veces con los nodos anteriore: Primero ara añadir el nodo Text como hijo del nodo Element, y a continuación para añadir el nodo Element como hijo de algún nodo de la página.

Ejemplo:

En html:

<div id="imagenesDiv"></div>

Bla bla

en js:

//Creamos un nodo de tipo Element
var parrafo = document.createElement("p");

//Creamos otro nodo de tipo Text.
var contenido = document.createTextNode("¡Hola Mundo!");

//Añadimos el nodo Text como ijo del nodo Element
parrafo.appendChild(contenido)

//Por último, añadimos el nodo Element como hijo de la página
document.body.appendChild(parrafo);

Creación de nodos con atributos

//Obtenemos el nodo padre en el que vamos a añadir la imagen
var imagenesDiv = document.getElementById("imagenesDiv");

//Creamos un nodo de tipo Element.
var imagen = document.createElement("img");

//Establecemos los atributos de la imagen cno la notación punto.
imagen.src = "miimagen.png";
imagen.id = "imagenId";

//Añadimos el nodo Element como hijo del nodo padre que obtuvimos.
imagenesDiv.appendChild(imagen);

Eliminación de nodos

html:

	<p id="miFrase">Esta es una frase que se va a eliminar </p>

	<button id="boton">Quitar</button>

js:

	//Obtenemos el nodo padre en el que vamos a añadir la imagen
	document.getElementById("boton").onclick = quitar;

	function quitar()
	{
		var parrafo = document.getElementById("miFrase");
		/* La fnción removeChild requiere como parámetro el nodo que se va a eliminar. Además, la función debe se invocada desde el elemento padre del nodo que se quiere eliminar. la forma mse sencilla para acceder al nodo padre de un elemento es mediante la propiedad parentNode*/
		parrafo.parentNode.removeChild(parrafo);
	}

Cuando se elimina un nodo, también se eliminan automaticametne todos los nodos hijos que tenga, por lo que no es necesario borrar manualmente cada nodo hijo.

Ejercicio: Crea una página que contenga una lista desplegable <select> con diez nombres de peliculas. Añade una lista <ul> con tres peliculas diferentes a las del selecdt, y un botón con el texto Añadir película. Cada vez que se haga click sobre este botón, se debe añadir al final de la lsita una nuevapelícula con el título que esté seleccionando en la lista desplegable. El siguiente código de ejemplo muestra los índices y los textos de las opciones de na lsita desplegable con el id "miLista".

	var opcionSeleccionada = document.getElementById("miLista").selectedIndex;
	var opciones = document.getElementById("miLista").options;
	alert("Indice: " + opciones[opcionSeleccionada].index + "; Texto: " + opciones[opcionSeleccionada].text);

Ejercicio

js:

	//Obtenemos el nodo padre en el que vamos a añadir la imagen
	document.getElementById("boton").onclick = anadir;

	function anadir()
	{
		/* Primero cogemos el índice del elemento selccionado del select tag (como si fuera un array) */
		var opcionSeleccionada = document.getElementById("miLista").selectedIndex;

		/* Ahora recuperamos todas las opciones posibles del select tag (como si fuera un array de todos los elementos posibles) */
		var opciones = document.getElementById("miLista").options;

		/* Ahora del array de opciones, elegimos la seleccionada y creamos un nuevo nodo */
		var nuevoElemento = crearNodoLista(opciones[opcionSeleccionada].text);

		/* Añadimos ese nuevo nodo a nuestra lista */
		document.getElementById("lista").appendChild(nuevoElemento);
	}

	/* Función que crea un nodo nuevo */
	function crearNodoLista(texto)
	{
		/* Nuevo nodo de tipo li */
		var nodoLi = document.createElement("li");

		/* Nuevo nodo con el texto que irá dentro de nuestro li */
		var nodoTexto = document.createTextNode(texto);

		/* Añadimos el texto al nodo li creado */
		nodoLi.appendChild(nodoTexto);
	
		return nodoLi;
	}

html:

	<select id="miLista" class="form-control">
		<option value="HarryFilosofal">Harry Potter y la piedra Filosofal</option>
		<option value="HarryCamara">Harry Potter y la cámara secreta</option>
		<option value="HarryAzkaban">Harry Potter y el prisionero de Azkaban</option>
		<option value="Gravity">Gravity</option>
		<option value="CodigoFuente">Código Fuente</option>
		<option value="Matilda">Matilda</option>
		<option value="AnillosRetornoRey">El señor de los Anillos: El retorno del rey</option>
		<option value="Troya">Troya</option>
		<option value="Gladiator">Gladiator</option>
		<option value="Braveheart">Braveheart</option>
	</select>

	<button id="boton">Añadir</button>

	<h4>Peliculas seleccionadas</h4>

	<ul id="lista">
		<li>Spiderman</li>
		<li>Efecto mariposa</li>
		<li>Star Wars, el último Jedi</li>
	</ul>

Ejercicio: Crea dos nuevos botones con los textos eliminar primera y eliminar última. Al hacer click sobre ellos, deben eliminar la prpimera o la última película de la lsita <ul> respectivamente.

document.getElementById("botonEliminarPrimera").onclick = eliminarPrimera;
document.getElementById("botonEliminarUltima").onclick = eliminarUltima;

function eliminarPrimera()
{
	var elemento = document.querySelectorAll("#lista li")[0];
	elemento.parentNode.removeChild(elemento);
}

function eliminarPrimeraDelSelect()
{
	var nodoPadre = document.getElementById("miLista");
	var opciones = nodoPadre.options;
	nodoPadre.removeChild(opciones[0]);
}

function eliminarUltima()
{
	var elementos = document.querySelectorAll("#lista li");
	var elemento = elementos[elementos.length-1];
	elemento.parentNode.removeChild(elemento);
}

function eliminarUltimaDelSelect()
{
	var nodoPadre = document.getElementById("miLista");
	var opciones = nodoPadre.options;
	nodoPadre.removeChild(opciones[opciones.length-1]);
}

Ejercicio: Modifica el código para que cada vez que añadas una película a la lista, dicha película desaparezca de la lista desplegable, y viceversa.

funciones.js
----------------------------------------------------------------------------------------------------------------------------------------

//Obtenemos el nodo padre en el que vamos a añadir la imagen
document.getElementById("boton").onclick = anadir;
document.getElementById("botonEliminarPrimera").onclick = eliminarPrimera;
document.getElementById("botonEliminarUltima").onclick = eliminarUltima;

function anadir()
{
	/* Primero cogemos el índice del elemento selccionado del select tag (como si fuera un array) */
	var opcionSeleccionada = document.getElementById("miLista").selectedIndex;

	/* Ahora recuperamos todas las opciones posibles del select tag (como si fuera un array de todos los elementos posibles) */
	var opciones = document.getElementById("miLista").options;

	/* Ahora del array de opciones, elegimos la seleccionada y creamos un nuevo nodo */
	var nuevoElemento = crearNodoLista(opciones[opcionSeleccionada].text);

	/* Añadimos ese nuevo nodo a nuestra lista */
	document.getElementById("lista").appendChild(nuevoElemento);

	eliminarElementoSelect(opcionSeleccionada);
}

/* Función que crea un nodo nuevo */
function crearNodoLista(texto)
{
	/* Nuevo nodo de tipo li */
	var nodoLi = document.createElement("li");

	/* Nuevo nodo con el texto que irá dentro de nuestro li */
	var nodoTexto = document.createTextNode(texto);

	/* Añadimos el texto al nodo li creado */
	nodoLi.appendChild(nodoTexto);

	return nodoLi;
}

function crearNodoSelect(texto)
{
	/* Nuevo nodo de tipo option */
	var nodoOption = document.createElement("option");
	nodoOption.value = texto.trim(); /* trim quita espacios */

	/* Nuevo nodo con el texto que irá dentro de nuestro li */
	var nodoTexto = document.createTextNode(texto);

	/* Añadimos el texto al nodo li creado */
	nodoOption.appendChild(nodoTexto);

	return nodoOption;
}

function eliminarPrimera()
{
	var elemento = document.querySelectorAll("#lista li")[0];
	anadirElementoAlSelect(elemento.innerHTML)
	elemento.parentNode.removeChild(elemento);
}

function eliminarPrimeraDelSelect()
{
	var nodoPadre = document.getElementById("miLista");
	var opciones = nodoPadre.options;
	nodoPadre.removeChild(opciones[0]);
}

function eliminarUltima()
{
	var elementos = document.querySelectorAll("#lista li");
	var elemento = elementos[elementos.length-1];
	anadirElementoAlSelect(elementos[elementos.length-1].innerHTML)
	elemento.parentNode.removeChild(elemento);
}

function eliminarUltimaDelSelect()
{
	var nodoPadre = document.getElementById("miLista");
	var opciones = nodoPadre.options;
	nodoPadre.removeChild(opciones[opciones.length-1]);
}

function eliminarElementoSelect(id)
{
	var nodoPadre = document.getElementById("miLista");
	var opciones = nodoPadre.options;
	nodoPadre.removeChild(opciones[id]);
}

function anadirElementoAlSelect(texto)
{
	var nuevoElemento = crearNodoSelect(texto);

	/* Añadimos ese nuevo nodo a nuestro select */
	document.getElementById("miLista").appendChild(nuevoElemento);
}
----------------------------------------------------------------------------------------------------------------------------------------
html:

<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Mi tercer JavaScript</title>
<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script defer type="text/javascript" src="funciones.js">
</script>
</head>
<body>

	<select id="miLista" class="form-control">
		<option value="HarryFilosofal">Harry Potter y la piedra Filosofal</option>
		<option value="HarryCamara">Harry Potter y la cámara secreta</option>
		<option value="HarryAzkaban">Harry Potter y el prisionero de Azkaban</option>
		<option value="Gravity">Gravity</option>
		<option value="CodigoFuente">Código Fuente</option>
		<option value="Matilda">Matilda</option>
		<option value="AnillosRetornoRey">El señor de los Anillos: El retorno del rey</option>
		<option value="Troya">Troya</option>
		<option value="Gladiator">Gladiator</option>
		<option value="Braveheart">Braveheart</option>
	</select>

	<button id="boton">Añadir</button>
	<button id="botonEliminarPrimera">Eliminar primera</button>
	<button id="botonEliminarUltima">Eliminar última</button>

	<h4>Peliculas seleccionadas</h4>

	<ul id="lista">
		<li>Spiderman</li>
		<li>Efecto mariposa</li>
		<li>Star Wars, el último Jedi</li>
	</ul>

</body>
</html>

----------------------------------------------------------------------------------------------------------------------------------------


CLASE 50: MIÉRCOLES 25/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Métodos de atributos:
setAttribute: Crea un atributo y se lo añade a un nodo. elemento.setAttribute("src", "/imagenes/imagen1.png");
removeAttribute: Elimina un atributo de un nodo. nodoEnlace.removeAttribute("href");
getAttribute: Obtiene el valo rde un atributo de un nodo. var enlace = document.GetElementById("enlace"); alert(enlace.getAttribute("href"));
hasAttribute: Devuelve un valor booleano indicano si un nodo tiene un atributo concreto.

Acceso direcdto a las propiedades CSS

Las propiedadses CSS de un elemento HTML funcionan de forma un poco diferente. Par obtener el valor de cualquier propiedad CSS del nodo, se debe utilizr el atributo style, y a continuación el nobre de la propiedad a la que queremos acceder. El ejemplo siguiente obtiene el valor de la propiedad marign de la imagen

<img id="imagen" style="margin: 0; border: 0;" src="logo.png"/>
var imagen = document.getElementById("imagen");
alert(imagen.style.margin);

Excepciones: float, class y text son palabras reservadas de javascript, y por tanto se usan como className, cssFloat y cssText.

Ejercicio: Crea una página en la que aparezcan dos cuadros de texto de solo lectura con dos números aleatorios del 1 al 10, y un tercer cuadro donde el usuario debe escribir el resultado de multiplicar ambos números. Si el resultado es correcto, el cuadro de texto con el resultado debe colorearse en verde. Si no es correcto, debe colorearse en rojo. El usuario debe poder modificar el resultado, y el cuadro debe colorearse según el nuero resultado escrito. Utilizar para ello el evento onblur y la función parseInt(Math.random() * 10parseInt(Math.random() * 10) para obtener el número aleatorio.

js:

	document.getElementById("resultado").onblur = cambiarColor;

	var resultadoOperacion;

	function iniciar()
	{
		var numero1 = parseInt(Math.random() * 10);
		var numero2 = parseInt(Math.random() * 10);

		resultadoOperacion = numero1 * numero2;

		document.getElementById("numero1").value = numero1;
		document.getElementById("numero2").value = numero2;

	}

	function cambiarColor()
	{
		if (parseInt(this.value) != resultadoOperacion)
		{
			this.style.backgroundColor= "red";
		}
		else
		{
			this.style.backgroundColor= "#afa";
		}
	}

	iniciar();

html:

	<h4>Multiplicaciones</h4>

	<input type="text" name="numero1" id="numero1" readonly="readonly" /> X <input type="text" name="numero2" id="numero2" readonly="readonly"/> = <input type="text" name="resultado" id="resultado"/><br>
	
Ejercicio: Crear una función que obtenga todas las tablas de una página, compruebe si tienen el atributo border, y en caso afirmativo que lo elimine y le añada un borde a través de CSS. Crear una tabla con un atributo border para comprobar que la función se ejecuta correctamente.

js:

document.getElementById("boton").onclick = cambiarBordes;

function obtenerTablasPagina()
{
	var tablas = document.getElementsByTagName("table");

	for (var i = 0; i < tablas.length; i++)
	{
		if (tablas[i].hasAttribute("border"))
		{
			tablas[i].removeAttribute("border");
			tablas[i].setAttribute("border", "1px solid black");
		}
	}
}

function cambiarBordes()
{
	obtenerTablasPagina();
}

html:

	<table border="1">
		<tr>
			<td>Elemento 1</td>
			<td>Elemento 2</td>
			<td>Elemento 3</td>
		</tr>
		<tr>
			<td>Elemento 1, fila 2</td>
			<td>Elemento 2, fila 2</td>
			<td>Elemento 3, fila 2</td>
		</tr>		
	</table>

	<table border="2">
		<tr>
			<td>Elemento 1</td>
			<td>Elemento 2</td>
			<td>Elemento 3</td>
		</tr>
		<tr>
			<td>Elemento 1, fila 2</td>
			<td>Elemento 2, fila 2</td>
			<td>Elemento 3, fila 2</td>
		</tr>		
	</table>

			<table>
		<tr>
			<td>Elemento 1</td>
			<td>Elemento 2</td>
			<td>Elemento 3</td>
		</tr>
		<tr>
			<td>Elemento 1, fila 2</td>
			<td>Elemento 2, fila 2</td>
			<td>Elemento 3, fila 2</td>
		</tr>	
	</table>

	<table border="4">
		<tr>
			<td>Elemento 1</td>
			<td>Elemento 2</td>
			<td>Elemento 3</td>
		</tr>
		<tr>
			<td>Elemento 1, fila 2</td>
			<td>Elemento 2, fila 2</td>
			<td>Elemento 3, fila 2</td>
		</tr>		
	</table>

	<button id="boton">Cambiar bordes</button>

Ejercicio: Crear una página con un botón y un checkbox. El botón debe estar inicialmente desactivado. Cuando se marque el checkbox, el botón se debe activar. Si se vuelve a desmarcar, el botón se debe desactivar nuevamente. Utilizar para ello el evento onchange.

js:

	document.getElementById("condiciones").onchange = cambiarBoton;

	function cambiarBoton()
	{
		document.getElementById("boton").disabled = !this.checked;
	}

html:
	
	<input type="checkbox" id="condiciones" name="condiciones" value="1">Acepto los términos y condiciones<br/>

	<button id="boton" disabled="disabled">Aceptar</button>

Acceso indirecto a los nodos

Anteriormente hemos visto varias formas para acceder directametne a los nodos del DOM, a través de alguno de sus atributos.

También se puede acceder a un nodo a través de los atributos de otro nodo. Los métodos mas comunes para acceder de este modo son los siuguientes:

parentNode: Nodo padre de un nodo. nodoElemento.parentNode
childNodes: Array con todos los hijos de un nodo. nodoLista.childNodes
firstChild: Primer hijo de un nodo (a la izquierda). nodoTabla.firstChild

Para los nodos tipo Elemento hay una serie de fuciones equivalentes, que se pueden utilizar en lugar de las anteriores. A continuacion aparece una tabla con las equivalencias de etas funciones:

firstChild: firstElementChild
lastChild: lastElementChild
nextSibling: nextElementSibling
previousSibling: previousElementSibling
childen.length: childElemetnCount

Acceder a los atributos:

nodeName: Devuelve la etiqueta de un nodo como texto en mayúsculas (H1, DIV, SPAN...). nodoDiv.nodeName
nodeType: Número que identifica el tipo de nodo (9 para document, 1 para element, 3 paar text, 8 para coment). document.nodeType
nodeValue: Contenido en formato de texto de un nodo de tipo text o algo de tipo coment. NodoParrafo.childNodes[0].nodeValue

Ejercicio: Crear una función a la que se le pase un parámetro, que deba ser el id de un nodo. La función debe mostrar por consola la etiqueta de ese nodo, el valro asignado al tipo de nodo y el valor que contiene.

	function datosDeNodo(nodo)
	{
		var elemento = document.getElementById(nodo);

		console.info("Etiqueta: " + elemento.nodeName);
		console.info("Tipo de nodo: " + elemento.nodeType);
		console.info("Valor: " + elemento.childNodes[0].nodeValue);
	}

	datosDeNodo("condiciones");

Ejercicio: Crear unalista desordenada <ul> con cinco elemetnos que sean números. Añadir un cuadro de texto y un botón. Cuando el usuario escriba un núemro y pulse el botón, debe aparecer por consola el valor de los elementso anterior y posterior a ese número dentro de la lita. Utilizar las funciones de acceso indirecto pra hacerlo.

html:

	<ul id="lista">
		<li>19</li>
		<li>8</li>
		<li>14</li>
		<li>200</li>
		<li>43</li>
	</ul>

	<input type="text" id="numero" name="numero"/> <br/><br/><br/>

	<button id="boton" class="btn btn-primary">Buscar</button>
	
js:

	function buscarNumeros()
	{
		var elementosLista = document.getElementById("lista").getElementsByTagName("li");
		var valor = parseInt(document.getElementById("numero").value);

		for (var i = 0; i < elementosLista.length; i++ )
		{
			if(elementosLista[i].innerHTML == valor)
			{
				mostrarHermanos(elementosLista[i]);
			}
		}
	}

	function mostrarHermanos(nodo)
	{
		if (nodo.previousElementSibling != null)
		{
			console.log("Hermano anterior: " + nodo.previousElementSibling.innerHTML);	
		}
	
		if (nodo.nextElementSibling != null)
		{
			console.log("Hermano anterior: " + nodo.nextElementSibling.innerHTML);
		}
	}

El modelo de eventos de DOM level 2

La sintaxis de addEventListener() es la siguiente:

nodoObjetivo.addEventListener("nombreDeEventoSinPrefijo", funcionAEjecutar [, parmetroBoleanoOpcional]);

los componetnes:

- Nodo objetivo: Será un nodo que habremos obtenido con getElementById() o similar
- Evento sin prefijo: El nombre del evento sin el prefijo on: Ejemplo, click
- Función a ejecutar: es el nombre de la función (sin paréntesis) que se ejecutará cuando se produzca el evento
- Parámetro booleano opcional: Indica si el evento debe ser capturado(true) o no debe serlo (false). Si no se especifica, por defcto valdrá false. El motivo por que este parámetro se encuentra aquí es mas histórico que otra cosa.

html:

	<div id="cuadrado" style="width: 200px; height: 200px; background-color: #fa0"></div>
	
js:

	var cuadrado = document.getElementById("cuadrado");
	cuadrado.addEventListener("mouseover", cambiarColor1);
	cuadrado.addEventListener("mouseout", cambiarColor2);

	function cambiarColor1
	{
		this.style.backgroundColor = "#0fa";
	}

	function cambiarColor2
	{
		this.style.backgroundColor = "#a0f";
	}
	
Eliminar manejadores de eventos:

nodoObjetivo.removeEventListener("nombreDeEventoSinPrefijo", funcionAEjecutar [, parmetroBoleanoOpcional]);

Ejemplo en js:

	function cambiarColor2
	{
		this.style.backgroundColor = "#a0f";
		this.removeEventListener("mouseover", cambiarColor1);
		this.removeEventListener("mouseout", cambiarColor2);
	}

Ejercicio: Crea cuatro botones. Crea dos clases CSS distitnas, una pra cuando un botón está activado y otra para cuando está desactivado. El primer botón debe tene la clase activado y los otros tres deben tener la clase deactivado. Crear manejadores e eventso para los botones de modo que al hacer click sobre uno de los que están desactivados, lo active y desactive el anterior.

js:

	function crearBotones()
	{
		document.getElementById("boton1").addEventListener("click", cambiarBoton);
		document.getElementById("boton2").addEventListener("click", cambiarBoton);
		document.getElementById("boton3").addEventListener("click", cambiarBoton);
		document.getElementById("boton4").addEventListener("click", cambiarBoton);
	}

	function cambiarBoton()
	{
		var botones = document.getElementById("botonera").getElementsByTagName("button");
	
		for (var i = 0; i < botones.length; i++)
		{
			botones[i].className = "desactivado";
		}

		this.className = "activado";
	}
	
	crearBotones();	
	
html
	
	<!DOCTYPE html>
	<html lang="es">
	<head>
	<meta charset="UTF-8">
	<title>Mi JabbaScript</title>
	<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
	<script defer type="text/javascript" src="funciones.js"></script>
	<style>
	.activado
	{
		background-color: #aaa;
	}
	.desactivado
	{
		background-color: #eee;
	}
	</style>
	</head>
	<body>
	
		<div id="botonera">
			<button id="boton1" class="activado">Boton 1</button>
			<button id="boton2" class="desactivado">Boton 2</button>
			<button id="boton3" class="desactivado">Boton 2</button>
			<button id="boton4" class="desactivado">Boton 2</button>
		</div>

	</body>
	</html>

Ejercicio: Crea un formulario con tres campos de texto y un botón de envío que debe ser de tipo button, no subimit. Crea un manejador de eventos para que al hacer click sobre el botón, simule que se envía el formulario (mostrando un texto en consola, por ejemplo). Debes hacer que una vez que se haya enviado el formulario no se puedan enviar de nuevo los datos. Si el usaurio intenta envíar los datos de nuevo, debe aparecer un cuadro de diálogo avisando del error.

js:

	document.getElementById("boton").addEventListener("click", enviar);

	function enviar()
	{
		console.info("Formulario enviado");
		console.log("Texto 1: " + document.getElementById("texto1").value);
		console.log("Texto 2: " + document.getElementById("texto2").value);
		console.log("Texto 3: " + document.getElementById("texto3").value);
		this.removeEventListener("click", enviar);
		this.addEventListener("click", avisoDeEnviado);
	}

	function avisoDeEnviado()
	{
		alert("El formulario ya se ha enviado, no insitas");
	}
	
html:

	<div class="col-sm-10">
		<div class="form-group">
			<label for="texto1">Texto 1</label>
			<input type="text" class="form-control" id="texto1">
		</div>
		<div class="form-group">
			<label for="texto2">Texto 1</label>
			<input type="text" class="form-control" id="texto2">
		</div>
		<div class="form-group">
			<label for="texto3">Texto 1</label>
			<input type="text" class="form-control" id="texto3">
		</div>

		<button class="btn btn-primary" id="boton">Enviar</button>
	</div>

CLASE 51: JUEVES 26/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

SUMA: Trabajo en grupo

CLASE 52: VIERNES 27/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Propagación de eventos: Bubbling.

En ocasiones, ciertas acciones del usuario pueden generar varios eventos simultáneos. Por ejemplo, si tenemos una imagen dentro de un div, y tenemos definida la captura del elemetno click para ambos, cuando se hace click sobre la imagen se peorucen en realidad dos eventos: El evento click sobre la imagen y el evento click sobre el div.

1. El navegador detecta sobre que elementos está teniendo lugarun evento. Esta detección va de feura  hacia dentro, detectando primero los objetos que están más altos en el árbol DOM.

2. Envio del evento al manejador del evento de los elementos correspondietnes, donde el evento se envía como un objeto.

Ejercicio: Crear un documento que contenga un div con el id "principal", dentro de el otro div con el id "secundario" y dentro de este un tercer div con el id "terciario". Dentro de terciario crea un párrafo con el texto "Ejemplo de burbujeo". Añade eventlisteners con el evento click en el párrafo, en todos los div, en document y en windows. Todos deben llamar a una misma función que debe mostrar por consola el texto "Soy un nodo con ID [id] y tipo [nomberDelNodo] y estoy burbujeando".

html:

	<div id="principal">
		<div id="secundario">
			<div id="terciario">
				<p id="parrafo">Ejemplo de burbujeo</p>
			</div>
		</div>
	</div>

js:
	
	document.getElementById("principal").addEventListener("click", imprimirBurbuja);
	document.getElementById("secundario").addEventListener("click", imprimirBurbuja);
	document.getElementById("terciario").addEventListener("click", imprimirBurbuja);
	document.getElementById("parrafo").addEventListener("click", imprimirBurbuja);
	document.addEventListener("click", imprimirBurbuja);
	window.addEventListener("click", imprimirBurbuja);
	
	function imprimirBurbuja()
	{
		console.log("Soy un nodo con ID " + this.id + " y tipo " + this.nodeName)
	}

Objeto event: Normalmente los manejadores de eventos requieren de cierta información adicional para procesar sus tareas. Si una función por ejemplo, se encarag de procesar el evento onclick, quizá necesite saber en que posici´no estaba le ratón en el momento de hacer click sobre el botón.

El caso mas habitual en el que es necesario conocer informaci´no adicional sobre el evento es el de los eventos asociados al teclado. Normalmente, es muy importante saber que se ha pulsado, por ejemplo para diferencia las teclas normales de las teclas especiales (Enter, tabulador, alt, Ctrol, etc).

Javascript permite obtener información sobre el ratón y el teclado a través de un objeto especial llamado event. Los navegadores modernos crean "agicamente" y e forma automática un argumetno que se pasa a la función manejadora. No es necesario incluirlo en la función, solo se necesita darle un nombre. Un ejempo sería el siguiente

Imaginemos ahora que existe un enalce <a> que lleva a otra página y que además contiene un manejador de eventos, alcgo como esto:

<a href="www.google.es" onclick="alert('Mensaje de texto')">Ir a google</a>

Se ejecuta primero el código. Pero es posible cambiar el funcionamiento. Para ello se permitió que el manejador de evento devolveira un valor booelano: true (por defecto) si se debía eejcutar la acción predeterminada, o fale para evitar, si es posible, que siguiera adelante con dicha acción.

El método preventDefault() del eveto también cancela la ejecución de la acción.

<a href="http://www.google.es" onclick="return confirm('La página actual se va a redireccionar. ¿Está seguro?')">Ir a Google</a>

Propiedades del control del evento

- type: La propiead type indica el tipo de evento producido, que es igualq ue el nombre del evento pero sin el prefijo on. Esto es útil cuando se utilizauna misma función para manejar varios eventos.

<div id="textoDiv">Esto es un texto para resaltar</div>

function resaltar(evento)
{
	switch(evento.type)
	{
		case "mouseover": this.style.color = "yellow"; break;
		case "mouseout": this.style.color = "black"; break
	}
}

document.getElementById("textoDiv").addEventListener("mouseover", resaltar);
document.getElementById("textoDiv").addEventListener("mouseout", resaltar);

- target: Devuelve el elemento del DOM que disparó inicialmente el evento.

- currentTarget: Devuelve el elemetno del DOM que está disparando el evento actualmente. No tiene por qué ser el mismo que target, puede haber cambaido debido a un burbujeo.

- eventPhase: indica que fase de tratamiento estamos: 1 captura, 2 en objetivo, 2 burbujeo

- bubbles: Devuelve un booleando indicando si el elemento burbujea o no.

- cancelable: Devuelve un booleando que indica si el evento viene seguido de una acción predeterminada que pueda ser cancelada.

- cancelBubble: Devuelve un valor booleando que indica si el evento actual se progará hacia arriba en la jerarquía del DOM o no. La propagación de un evento se puede detener con el método de eventos evento.stopPropagation().

Ejercicio:

Crea un <div>, y dentro de el añade tres botones. Añade al <div> un manejador de eventos que se dispare cuando el ratón haga click sobre el elemetno. El manejador debe llamar a una función que debe mostrar el target y el currentTarget por consola. pPrueba el código hacienod click sobre los botones.

<div id="fondoBotones">
	<button id="boton1">Boton 1</button>
	<button id="boton2">Boton 2</button>
	<button id="boton3">Boton 3</button>
</div>

function accionesDiv(evento)
{
	console.info("Target: " + evento.target.id);
	console.log("Current Target: " + evento.currentTarget);
}

document.getElementById("fondoBotones").addEventListener("click", accionesDiv);

De esta forma podemos indicar un switch en accionesDiv para realizar acciones diferentes según el id del botón, y no tener tantos manejadores de eventos.

Ejercicio: Crea una tabla con 3 campos: Fruta, temporada y Acciones. Añade a la tabla cinco filas con el nombre de una fruta y la temporada (verano, invierno...), y en último lugar un botón con el texto "borrar". Cuando se haga click sobre el botón borrar de una de las filas, se debe pedir confirmación.

js:

	document.getElementById("botonFresas").addEventListener("click", borrarFila);
	document.getElementById("botonTomates").addEventListener("click", borrarFila);
	document.getElementById("botonCereza").addEventListener("click", borrarFila);
	document.getElementById("botonAguacate").addEventListener("click", borrarFila);
	document.getElementById("botonHigo").addEventListener("click", borrarFila);

	function borrarFila()
	{

		var borrar = confirm("¿Desea borrar la fila seleccionada?");
		if (borrar == true)
		{
			var fila = this.parentNode.parentNode;
			fila.parentNode.removeChild(fila);
		}
	}
	
html:

<table id="tabla" class="table">
	<thead>
		<tr>
			<th>Fruta</th>
			<th>Temporada</th>
			<th>Acciones</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Fresas</td>
			<td>Verano</td>
			<td><button id="botonFresas" class="btn btn-primary">Borrar</button></td>
		</tr>
		<tr>
			<td>Tomates</td>
			<td>Verano</td>
			<td><button  id="botonTomates" class="btn btn-primary">Borrar</button></td>
		</tr>
		<tr>
			<td>Cereza</td>
			<td>Primavera</td>
			<td><button id="botonCereza" class="btn btn-primary">Borrar</button></td>
		</tr>
		<tr>
			<td>Aguacate</td>
			<td>Invierno</td>
			<td><button id="botonAguacate" class="btn btn-primary">Borrar</button></td>
		</tr>
		<tr>
			<td>Higo</td>
			<td>Otoño</td>
			<td><button id="botonHigo" class="btn btn-primary">Borrar</button></td>
		</tr>		
	</tbody>
</table>

Ejercicio: Crea teres parrafos de texto, y dos clases CSS que puedan modificar dicho texto (por ejemplo, cambiando el tamaño, el color o la fuente). Crea una única función de modo que si se hace click sobre uno de los párrafos, se le asigne una de las clases, y si se hace doble click se le asigne la otra.

<style>
.tipo1
{
	font-size: 15px;
	color: blue;
}
.tipo2
{
	font-size: 20px;
	color: red;
}
</style>
</head>
<body>

<p id="parrafo1">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p id="parrafo2">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p id="parrafo3">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>

	document.getElementById("parrafo1").addEventListener("click", cambiar1);
	document.getElementById("parrafo1").addEventListener("dblclick", cambiar2);
	document.getElementById("parrafo2").addEventListener("click", cambiar1);
	document.getElementById("parrafo2").addEventListener("dblclick", cambiar2);
	document.getElementById("parrafo3").addEventListener("click", cambiar1);
	document.getElementById("parrafo3").addEventListener("dblclick", cambiar2);

	function cambiar1()
	{
		this.className = "tipo1";
	}

	function cambiar2()
	{
		this.className = "tipo2";
	}

Eventos de teclado

Las pulsaciones de teclado generan dos códigos diferentes. Uno representa la tecla física pulsada y el otro es el código del caracter (número asociado al caracter unicode). El codigo de tecla puede ser igual en teclados con otras distribuciones pero el código de caracter es único. Por ejemplo, A y a son la misma tecla, pero el código de caracter es diferente.

keydown: Este evento ocurre cuando la tecla baja, es decir, cuando domienza la pulsación de una tecla.
keypress: Este evento tiene lugar cuando la tecla se ha pulsado. Podriamos decir que ocurre cuando la tecla se ha pulsado del todo
keyup: Este evento ocurre cuadno "la tecla sube", esto es, cuando se libera la pulsación de la tecla.

Para cada evento de teclado, las propiedades del objeto Event relacionadas con el teclado pueden tener distinto significado, por lo que suele ser indispensable realizar pruebas con nuestro código para comprobar que funciona de forma correcta.

Conviene también tener en cuenta que algunas teclas no imprimibles no generan código keypress (como las de cursor).

Propiedades y métodos de los eventos de teclado

altKey: Devuelve true si la tecla alt estaba pulsada cuando se produjo el evento
ctrlKey: Devuelve true si la tecla Ctrl estaba pulsda cuando se produco el evento
shfitKey: Devuelve true si la tecla Shift estaba pulsada cuando se produjo el evento
charCode: Deuelve el código del carácter Unicode generado por el evento keypress. Se recomienda usar which
keyCode: Devuelve el código de tecla pulsada para lso eventos keydown y keyup
which: Devuelve el código del caracte Unicode generado por el evento keypress

Otras propiedades: data, metakey
Otras propiedades no estandarizadas: altLeft, ctrlLeft, shiftLeft, isChar.

Ejemplo:

document.onkeydown = mostrarInformacionTecla;

function mostrarInformacionTecla(evento)
{
	var caracter = String.fromCharCode(evento.which);
	var codigoTecla = evento.which;
	var codigoCaracter = evento.charCode;
	
	console.info("Keydown");
	console.log("Carácter: " + caracter);
	console.log("Codigo de tecla: " + codigoTecla);
	console.log("Codigo de carácter: " + codigoCaracter);
	console.info("---------------------");
}

Segundo ejemplo:

<input id="texto"></input>

document.getElementById("texto").onkeypress = comprobarTecla;

function comprobarTecla(evento)
{
	var caracter = String.fromCharCode(evento.which)
	if (caracter <= "0" || caracter >= "9")
	{
		evento.preventDefault();
	}
}

Ejercicio: Modifica el segundo ejemplo anterior para que en vez de permitir que solo aparezcan números, lo que haga se validad una matrícula de cohce española. Las matrículas eactuales están compeustas por cuatro cifras del 0 al 9, seguidas de ters letras mayúsculas(1234ABC).

document.getElementById("texto").onkeypress = comprobarMatricula;

function comprobarMatricula(evento)
{
	var caracter = String.fromCharCode(evento.which);
	var longitud = this.value.length;

	if (longitud >= 7)
	{
		evento.preventDefault();
	}
	else
	{
		if (longitud < 4	 )
		{
			if (caracter < "0" || caracter > "9")
				evento.preventDefault();
		}
		else
		{
			if (caracter < "A" || caracter > "Z")
			{
				evento.preventDefault();
			}
		}
	}
}


Ejercicio: Vamos a crear un "comecocos". Dibua un cuadro amarillo en pantalla que se mueva al pulsar las flechas.



CLASE 53: LUNES 30/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Seguimos con el comoecocos. Luego inmobiliaria

CLASE 54: MARTES 31/01/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

clientX, clienteY: Devuelven als coordenadas en las que se encontraba el puntero del ratón cuando se disparó el evento. Las coordenadas están refereidas a la esquina superior izquierda de la ventaa del navegaor, y vienen expersadas e npixeles.

ScrenX, screenY: Devuelven las coordenadas en las que se encontraba el puntero del ratón cuando se disparó el evento. Las coordenadas están refereidas a la esuina superior izquierda d ela pantalla, y vienen expresadas en píxeles.

pageX, pageY: Devuelven als coorenadas en las que se encontraba el puntero del ratón cuando se dipsaró el evento. Las coordenadas están referidas a la esuina superior izquierda del documento. Pueden ser distintas a las de la ventana si el usuario ha hecho scroll sobre el documento.

button: Normalmente empleado con el evento mouseuppara detectar cuál es el botón que se ha pulsado (0 botón izquierdo, 1 boton central y 2 botón derecho).

Ejercicio: Crea una función que haga que, cuando el usuario haga click derecho sobre la página, aparezca un mensaje que diga "Esta página no permite menú de contexto".

	document.addEventListener("contextmenu", impedirMenu);

	function impedirMenu(evento)
	{
		evento.preventDefault();
		alert("Esta página no permite menú de contexto");
	}

Ejercicio: Crea una página web y rellénala lo suficiente como para que aparezca la barra de scroll del navegador. Crea una función que muestre por consola las coordenadas del cliente, de la pantalla y de la página cuando el usuario haga click. Haz clic en varios lugares de la pantalla y comprueba los resultados. prueba a desplazar la página hasa el final y vuevle a comprobar los resultados.

document.addEventListener("click", mostrarInfo);

function mostrarInfo(evento)
{
	console.info("Coordenadas");
	console.log("Cliente X: " + evento.clientX + " - Y: " + evento.clientY);
	console.log("Pantalla X: " + evento.screenX + " - Y: " + evento.screenY);
	console.log("Página X: " + evento.pageX + " - Y: " + evento.pageY);
}

Ejercicio: Modifica el ejercicio anterior para qeu, además de mostrar las coordenadas, informe de que botón del ratón es el que se ha pulsado.

document.addEventListener("mouseup", mostrarInfo);

function mostrarInfo(evento)
{
	console.info("Coordenadas");
	console.log("Cliente X: " + evento.clientX + " - Y: " + evento.clientY);
	console.log("Pantalla X: " + evento.screenX + " - Y: " + evento.screenY);
	console.log("Página X: " + evento.pageX + " - Y: " + evento.pageY);

	switch(evento.button)
	{
		case 0: console.log("Botón izquierdo"); break;
		case 1: console.log("Botón central"); break;
		case 2: console.log("Botón derecho"); break;
	}
}

Funciones anónimas. También conocidas como funciones lambda, so nfnciones a las que no hace falta ponerles un nombre. Como ejemplo, a continuación aparece una función declara con un nombre (la forma común) y la misma función de forma anónima.

Declarada con nombre

	function duplicar(numero)
	{
		return numero * 2;
	}

	var doble = duplicar (4);

Declarada como función anónima:

	var duplicar = function(numero)
	{
		return numero * 2;
	}

	var doble = duplicar(4);
	
Funciones anónimas y autoejecutables: Una función anónima sepuede definir sin que sea asignada a ninguna variable. Por ejemplo:

	function(nombre)
	{
		console.log("Hola, " + nombre);
	}
	
Sin embargo, hacer esto es totalmente inservible. Definir una función sin nombre hace que sea imposible invocarla mas adelante. Sin embargo en muchas ocasiones necesitamos crar una función que se ejecuta inmediatamente. Para ello debemos convertirla en una función autoejecutable, encerrándola entre paréntesis y añadiento otro par de paréntesis al final:

	(function()
	{
		console.log("Hola mundo")
	})();

También se pueden enviar parámetros:

	(function(nombre)
	{
		console.log("Hola mundo")
	})("Sergio");
	
Eesta forma de crear funciones tiene una ventaja adicional. si no se poen los paréntesis y la invocación final, todo el código que se ejecuta lo hacen en el ámbito global. Esto ensucia el ámbito global.

Funciones como parámetros

Las funciones son objetos y como tales se pueden almacenar en variables, devolverse como ersultado de una función o incluso ser pasadas como parámetros.

function ejecutarFuncion(fn)
{
	console.log("Llamando a la función que me han pasado como parámetro: ");
	fn();
}

function funcionConNombre()
{
	console.log("Función con nombre");
}

var funcionEnVariable = function()
{
	console.log("Función en variable");
}

ejecutarFuncion(funcionConNombre);
ejecutarFuncion(funcionEnVariable);
ejecutarFuncion(function()
{
	console.log("Función pasada como parámetro");
});


Aunque a primera vista no lo parezca, las funciones anónimas se usan extensamente en JavaScript. En aquellas ocasiones en que uan función no se vaya a tuilizar en otros lugares y el código no sea excesivamente largo, hay que plantearse si no es mejor crear una función anónima para ejecutar dicho código. Un ejemplo clásico es el caso de los eventos. En mucahs ocasiones, la respueta a un evento es lo suficiente corta como pra escribirla en una función anónima.

Ejercicio: Trata de convertir el juego del "comecocos" en una función autoejecutable. Observa los rsultados en la consola antes y después de hacerlo. Comprueba que en la segunda ocasión las variables globales ya no aparecen en el ámbito global.

(function ()
{
var pacman ...
... callBack();})();

Ejercicio: Crea dos campos de texto de tipo numbre y dos botones, uno con el teto Sumar y otro con el texto Restar. Crea una función cn nombre pra que cuando hagas click sobre el botón sumar, aparezca en sonsola la suma de´ambos números. Ha lo mismo con el botón retar, pero en este caso con una función anónima.

js:

	document.getElementById("botonSumar").addEventListener("click", sumar);
	document.getElementById("botonRestar").addEventListener("click", function(evento){console.log("Resta: " + (parseInt(document.getElementById("numero1").value) - parseInt(document.getElementById("numero2").value)))});

	function sumar()
	{
		var n1 = parseInt(document.getElementById("numero1").value);
		var n2 = parseInt(document.getElementById("numero2").value);

		console.log("Suma: " + (n1 + n2));
	}

html:

	<input type="number" id="numero1" name="numero1"/>
	<input type="number" id="numero2" name="numero2"/>
	<button id="botonSumar">Sumar</button>
	<button id="botonRestar">Restar</button>

Ejercicio: Crea una función mostrarResultado que reciba como parámetro una función y que muestre por cnosola el resultado de dicha función. Crea a continuación una función anónima que devuelva la multiplicación de dos números, y asígnalá a una variable. Ahora llama a la función mostrarResultado pasando la segunda función como parámetro, de forma que se muestre en consola el resultado de la multiplicación.

	function mostrarResultado(fn)
	{
		console.info(fn(3, 5));
	}

	var resultado = function (numero1, numero2)
	{
		return numero1 * numero2;
	}

	mostrarResultado(resultado);

Objeto String: Un objeto de tipo STring es un objeto que representa una serie de caracteres dentro de una cacdena. Una instancia String se puede crear de varios modos, por ejemplo, llamado al constructor new String();

	var cadenaObjeto = new String("cadena");

También se pued ellamar a la función global String() sin poner new delante para crear una cadena primitiva

	var cadenaPrimitiva = String("cadena");

Las cadenas literales en el código fuente tamién son cadenas primitivas

	var cadenaPrimitiva2 = "cadena";

Diferencias entre cadenas objeto y primitivas

Las primitivas de tipo String y los objetos de tipo String dan resultados diferentes cuadno son evaluados en JavaScript. Las primitivas son tratasds como código fuente, mientras que los objetos String son tratads como un objeto de sencuencia de caracteres.

	var cadena1 = "2 + 2" // Crea una cadena primitiva
	var cadena2 = new String("2 + 2"); // Crea un objeto de tipo String
	eval(cadena1); // Devuelve el número 4
	eval(cadena2); // Devuelve la cadena "2 + 2"
	eval(cadena2.valueOf()); // Devuelve el número 4

Los objtos String se pueden convertir a cadenas primitivs con String.valueOf().

Acceder a caracteres individuales de una cadena

Hay dos maneras: El primero es el método charAt(posicion)

	"gato".charAt(1); // Devuelve 'a'
	
El segundo modo consiste en tratar la cadena como un array, donde cada índice se corresponde co nuncarácter individual. este modo no form parte del estándar ECMAScript, sino que es una catacterística de JavaSCript

	"gato"[1]; // Devuelve 'a'

El ambos casos, intetnar asignar un carácter indivicual no funcionará. Si intetnas modificar un carácter con charAt(), se produciará un error. Si lo intentas a través del índice no se producirá ningún error, pero tampcoco provocará cambios en la cadena

	var x = "gato";
	x[2] = "m"; // No se produce ningún cambio.
	x.chart(2) = "m"; // provoca un error.

Métodos y propiedades del objeto String

length: Propiedad que devuelve la longitud de una cadena de caracteres.
concat(x): Combina el texto de dos cadenas y devuelve una nueva cadena.
indexOf(subcad): Devuelve la posición de la primera ocurrencia del parámetro dentro de la cadena, o -1 si no lo encuentra
lastIndexOf(subcad): Devuelve la posicion de la última ocurrencia del parámetro dentro de la cadena, o -1 si no la encuentra
replace(orig, reemp): Reemplaza una expresión regular o una cadena por otra cadena.
toLowerCase(): devuelve el valor de la cadena convertido a minúsculas.
toUpperCase(): Devuelve el valor de la cadena convertido a mayúsculas.
substr(inicio[, longitud]): Devuelve los caracteres de una cadena comenzando en la posición especificada, y hasta el número de caracteres especificado.
substring[inicio[, fin]): Devuelve los caracteres de una cadena comenzando en la posición especificada, y terminando en la segunda posición (sin incluirla).

Ejercicio: Crea una función que lea una cadena de texto por tecaldo, e indique por consola si está formada solo por mayúsculas, solo por minúsculas, o por mayúsculas y minúsculas a la vez.

	function comprobarCadena(cadena)
	{
		if (cadena == cadena.toLowerCase())
		{
			console.info("La cadena esta en minúsculas");
		}
		else
		{
			if (cadena == cadena.toUpperCase())
			{
				console.info("La cadena está en mayúsculas");
			}
			else
			{
				console.log("Los caracters son mixtos");
			}
		}
	}

	var cadena = prompt("Introduzca una cadena de texto");
	comprobarCadena(cadena);

Ejercicio: Crea una página con un campo de texto, un área de texto, un <div> vacío y un botón. En el campo de teto debes poder escribir una palabra, y en eárea de texto debes añadir un texto largo. al hace rclick sobre el botón, el <div> se debe rellenar con el texto que hay en el área de texto, y los lugares donde aparezca lo que está escrito en el campo de texto deben aparecer resaltados con un estilo. Para resaltar un texto puedesusar, por ejempo, un <span> de este tipo.

	document.getElementById("botonCambiar").addEventListener("click", cambiarTexto);

	unction cambiarTexto()
	{
		var cadenaASustituir = document.getElementById("cadenaAResaltar").value;
		var nuevaCadena = "<span class='resaltado'>" + cadenaASustituir + "</span>";
		document.getElementById("divConTexto").innerHTML = replaceAll(document.getElementById("texto").value, cadenaASustituir, nuevaCadena);
	}

	function replaceAll(str, find, replace)
	{
		return str.replace(new RegExp(find, 'g'), replace);
	}
	
Ejercicio: Crea un campo de texto en el que puedas escribir una palabra o frase, y un botón. Escribe una función que compruebe si lo que hsa escrito en el campo de texto es un palíndromo al hacer click sobre el botón, sin tener en cuenta los espacios ni las diferencias entre mayúsculas y minúsculas y muestre el resultado por consola.

	document.getElementById("boton").addEventListener("click", comprobarPalindromo);

	function replaceAll(str, find, replace)
	{
		return str.replace(new RegExp(find, 'g'), replace);
	}

	function esPalindromo(cadena)
	{
		cadena = replaceAll(cadena, " ", ""); // Quitar espacios
		cadena = cadena.toUpperCase(cadena); // Convertida en mayúsculas

		/* Ahora comproabmos si es palíndromo */
		var tam = cadena.length / 2;
		for (var i = 0; i < tam; i++)
		{
			//console.log("i vale " + i + ". cadena[" + i + "] = " + cadena[i] + " cadena[" + cadena.length + "-" + (i  - 1)+ "] vale " + cadena[cadena.length - i - 1]);
			if (cadena[i] != cadena[cadena.length - i - 1])
				return false;
		}
		return true;
	}

	function comprobarPalindromo()
	{
		var cadena = document.getElementById("cadena").value;
		console.info("Cadena: " + cadena);
		if (esPalindromo(cadena))
			console.log("Resultado: Es palíndromo");
		else
			console.log("Resultado: No es palíndromo");
	}

html:

	<!DOCTYPE html>
	<html lang="es">
	<head>
	<meta charset="UTF-8">
	<title>Mas javascript</title>
	<script defer type="text/javascript" src="funciones.js"></script>
	<style>
	</style>
	</head>
	<body>
	<input type="text" id="cadena" name="cadena"/> <br/>
	<button id="boton">Comprobar</button>
	</body>
	</html>

CLASE 55: MIÉRCOLES 01/02/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Objeto Number
El objeto number es un objeto envolvente para valoers primitivos numéricos. Permite trabajar con valores numéricos como objetos. La forma de crear un objeto Number es la siguiente:

var numeroObjeto = new Number(valor);

Lautilización principal delobjeto Number es:

- Acceder a sus propiedades constantes, las cuales representan los números representables mas grande y mas pequeño, infinitos positivos y negativos y el valor NaN (Not a number).
- Crear objetos numéricos que también puedan soportar añadirles propiedes
En otras palabras, es muy poco común verse en la necesidad de crear un objeto de tipo Number.

Las propiedades de Number son propiedades de la clase, no de un objeto en si.

Number.MAX_VALUE: El número mas grande representar
Number.MIN_VALUE: El número mas pequeño representable
Number.NaN: Valor especial NaN (No es número)
Number.NEGATIVE_INFINITY: Valor especial para representar infinitos negativos
Number.POSITIVE_INFINITY: Valor especial para representar infinitos positivos
toFixed(digitos): Devuelve un valor con el número de decimales especifiado, redondenado si es necesario.
toPrecision(digitos): Devuelve un valor con el total de dígitos especificado, incluyendo la parte entera. Redondea el valor si es necesario.
inNaN(numero): Función (no es un método) que devuelve un booleando indicando si el parámetro representa una cantidad numérica o no.
parseInt(x), parseFloat(x): Funciones que convierten una cadena en un valor numérico o entero. Si la covnersión no se puede compeltar por la Aparición de algún carácter extraño, devuelve la conversión hasta ese punto. Si la cadena no empieza por un valor válido, devuelve NaN

Ejercicio: Crea un campo de texto y un botón. Crea una función que intente convertir lo que haya escrito en el campo de texto en un valor numérico, y muetster el resutlado en un cuadro de diálogo. Si no se puede convertir, que muestre un cuadro de diálogo con el texto "Ese no es un número válido".

js:

	document.getElementById("boton").addEventListener("click", comprobarNumero);

	function comprobarNumero()
	{
		var resultado = parseFloat(document.getElementById("texto").value);
		if (isNaN(resultado))
		{
			alert("No es un número válido");
		}
		else
		{
			alert("Número: " + resultado);
		}
	}

html:

	<body>
	<input type="text" id="texto" name="texto"/> <br/>
	<button id="boton">Comprobar</button>
	</body

Ejercicio: Crear cuatro campos de texto y un botón. En los dos primeros se tienen que poder introducir dos números decimales. Al hacer clic sobre el botón, en el tercer campo de texto debe aparecer el resultado de la multiplciación de ambos números, y en el cuarto el mismo resultado pero redondeado a dos decimales.

js:

	document.getElementById("boton").addEventListener("click", actualizar);

	function actualizar()
	{
		var numero1 = parseFloat(document.getElementById("numero1").value);
		var numero2 = parseFloat(document.getElementById("numero2").value);

		var resultado = numero1 * numero2;

		if (isNaN(resultado))
			document.getElementById("resultadoMultiplicacion").value = 0;
		else
			document.getElementById("resultadoMultiplicacion").value = resultado;

		var resultadoDosDecimales = resultado.toFixed(2);

		document.getElementById("resultadoDosDecimales").value = resultadoDosDecimales;
	}

html:

	<body>
	<input type="text" id="numero1" name="numero1"/> <br/>
	<input type="text" id="numero2" name="numero2"/> <br/>
	<input type="text" id="resultadoMultiplicacion" name="resultadoMultiplicacion"/> <br/>
	<input type="text" id="resultadoDosDecimales" name="resultadoDosDecimales"/> <br/>
	<button id="boton">Multiplicar</button>
	</body>

Math:
Math es un objeto incoporado por JavaScript que posee propiedades y métodos compuestos por constantes y funciones matemáticas.

A diferncia de los demás objetos globales, el objeto Math no se puede ediatr. Tdoas las propiedades y métodos de Math son estáticos. Las constantes se definen cno la máxima precisión disponible de los números reales en JavaScript

Math.PI: Proporcion entre la longnitud de una ncircunferencia y su diámetros, aproximadamente 3.14159
Math.E: Consante de Euler, la base de los logaritmos naturales, aproximadamente 2,718
Math.LN2: Logaritmo natural de 2, aproximadamente 0.693
Math.LN10: Logaritmo natural de 10, aproximadamente 2.393
Math.LOG10E: Lograitmo de E con base 10, aproximdamente 0.434.
Math.SQRT2: Raiz cuadrada de 2, aproximadamente 1.4142
Math.SQRT1_2: Raiz cuadrada de 1/2, que equivale a 1 dividido por la raiz cuadrada de 2., apxorimadamente 0.707.

Métodos:

Math.abs(x): Devuelve el valor absoluto de un número.

Seno, coseno y tangente funcionan con radianes.

	function gradoARadianes(grados)
	{
		return grados * Math.PI / 180;
	}

Math.cos(x): Devuelve el coseno de un número.
Math.sin(x): Devuelve el seno de un número.
Math.tan(x): Devuelve la tangente de un número.

Math.round(x): Devuelve el valor de un número redondeado al número entero más cercano.
Math.floor(x): Devuelveel mayorenter menor que o igual a un número.
Math.ceil(x): Devuelve el menor entero mayor que o igual a un número.
Math.max(x[, y[, ...]]): Devuelve el mayor de cero o mas números.
Math.min(x[, y[, ...]]): Devuelve el menor de cero o mas números.
Math.pow(x, y): Devuelve el valor del primer argumento elevado a la potencia del segundo argumento.
Math.sqrt(x): Devuelve la raíz cuadrada positivade un número.
Math.random(): Devuelve un número pseudo-aleatorio entre 0 y 1.

Ejercicio: Pide por teclado un número entre 0 y 360, repserentando un ángulo. Muestra por consola el valor de su seno, su conseno y su tangente.

	function gradoARadianes(grados)
	{
		return grados * Math.PI / 180;
	}

	function pedirNumero()
	{
		return prompt("Introduzca un ángulo en grados");
	}

	function mostrarResultado(grados)
	{
		radianes = gradoARadianes(grados);

		console.log("Seno de " + grados + ": " + Math.sin(radianes));
		console.log("Coseno de " + grados + ": " + Math.cos(radianes));
		console.log("Tangente de " + grados + ": " + Math.tan(radianes));
	}

	mostrarResultado(pedirNumero());

Ejercicio: Crea una fnción que genere un número aleatorio entre 1 y 100, y que pregunte al usaurio que lo adivine introduciendolo a través del tecaldo. la función debe responder porconsola si el número es mayor o menor. El usuario tiene 10 oportunidades para acertar, si lo consigue debe aparecerun cuadro de diálogo felicitándole, y si no debe aparecer otro diciéndole que ha perdido.

	function generarNumero()
	{
		return parseInt(Math.random()*100);
	}

	function jugar()
	{
		numero = generarNumero();

		acertado = false;
		var i = 0;

		do
		{
			numeroPedido = parseInt(prompt("Introduzca un número"));
			if (isNaN(numeroPedido))
			{
				console.warn("No has introducido un número")
			}
			else
			{
				if (numeroPedido > numero)
					console.log("Error, ¡el número debe ser mas pequeño!");
				else
				{
					if (numeroPedido < numero)
						console.log("Error, ¡el número debe ser mas grande!");
					else
						acertado = true;
				}
			}
			i++;
		}while (i < 10 && acertado == false)

		if (acertado == true)
			alert("Enhorabuena, ¡has acertado!");
		else
			alert("Has perdido");
	}

	jugar();

Ejercicio: Crea tres campos de tiponumber y un botón. En los dos primeros debes poder introducir el radio de la base y la altura de un cilindro, y al darle al botón debe aparecer en el tercero el volumen del cilindro. El volumen de un cilindro equivale a la altura dpor el área de la base. El área de la base es igual a sua rdio elevado al cuadrado por PI.

	document.getElementById("boton").addEventListener("click", calcularVolumen);

	function calcularVolumen()
	{
		var radio = parseFloat(document.getElementById("base").value);
		var altura = parseFloat(document.getElementById("altura").value);

		document.getElementById("resultado").value = altura * Math.PI * radio * radio;
	}
	
Objeto Date:
El objeto Date nos permite anipular las fechas: establecer una fecha, consultarla, obtener el dia o la hora actuales, y uchas otras cosas.

Para trabajar con fechas necesitamos un objeto de la clase DAet, sobre el que haremos las operaciones que neesitemos. Un objeto Date se puede crear de varias formas distintas

var fechaActual = new Date(); //Fecha y hora actual
var fecha1 = new Date(anio, mes);
var fecha1 = new Date(anio, mes, dia);
var fecha1 = new Date(anio, mes, dia, hora);
var fecha1 = new Date(anio, mes, dia, hora, minutos);
var fecha1 = new Date(anio, mes, dia, hora, minutos, segundos);

getDate(): Devuelve el día del mes
getDay(): Devuelve el día de la semana (de Domingo a Sábado)
getHours(): Devuelvela hora
getMinutes(): Devuelve los minutos
getMonth(): Devuelve el mes (el primer mes es el 0)
getSeconds(): Devuelve los segundos
getTime(): Devuelve los milisegundos transcurridos esde el día 1 de enero de 1970 y la fecha correspondiente al objeto
getYear(): Devuelve el año, al que se le ha restado 1900. Este método está obsoleto, ahora se utiliza getFullYear()
getFullYear(): Devuelve el año con todos los dígitos

setDate(dia): Actualiza el día del mes
setHours(hora): Actualiza la hora
setMinutes(minutos): Actualiza los minutos
setMonth(mes): Actualiza el mes
setSeconds(segundos): Actualiza los segundos
setTime(milisegundos): Actualiza la fecha compelta, en milisegundos desde 1970.
setYear(anio): Actualiza el año, al que le suma 1900
setFullYear(anio): Actualiza el año indicando todos los dígitos.
toString(): Devuelve uan represnetación de caden ade una fecha. El formato de la cadena depende de la configuración regional
toLocalString(): Devuelve una representación de cadena de una fecha siguiente la configuración regional.

Ejercicio: Crea una función que muestre por consola todos aquellos años desde el año actual hasta el 2050 que empiezan en lunes (es decir, el día 1 de Enero cae en lunes).

	function aniosHasta2050QueEmpiezanEnLunes()
	{
		var fechaActual = new Date();
		for (var i = fechaActual.getFullYear(); i <= 2050; i++)
		{
			var fechaNueva = new Date(i, 0, 1);
			if (fechaNueva.getDay() == 1)
			{
				console.log(fechaNueva);
			}
		}
	}

	aniosHasta2050QueEmpiezanEnLunes();

Ejercicio: Crea una función ue calcule el número de días que quedan desde la fecha actual hasta el día de navidad.	

Ejercicio: Crear un <div> en pantalla que muestre un reloj con la hora actual y que se vaya actualizando en tiempo real. Utiliza para ello la función setInterval(nombreFuncion, milisegundos), que llama a la función pasada como primer parámetro cada vez que pasan tantos milisegundos como se especifica en el segundo parámetro.

	function actualizarReloj()
	{

		var fecha = new Date();
		document.getElementById("reloj").innerHTML = fecha.getHours() + ":" + fecha.getMinutes() + ":" + fecha.getSeconds();

		setInterval(actualizarReloj, 1000);
	}

	actualizarReloj();


CLASE 56: JUEVES 02/02/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Expresiones regulares: El objeto predefinido RegExp

Para crear expresiones regulares, JavaScript no sproporciona una serie de simbolso especiales que nos permiten definir patrones. Para introducir el concepto, amos a empezar sólo con dos caracteres especiale: el "punto" (.), que representa cualquier carácter, y el carácter ?, que indica que el caracter hque hay después de el es opciona, es decir, puede aparecer 0 o 1 veces.

1 carácter opcional: .?

En forma literal:

var miExpresionRegular = 

Encontrar coincidencias: Partiendo del ejemplo anterior, podemos encontrar muchs palabras que cumplen dicho criterio. Por ejemplo: casado, pasta, asma o aseado.

Para comprobar si una caden acontiene un patrón determinado tenemos el método text(cadena) del objeto RegExp. Vamos a verlo en el siguiente ejemplo:

	function expresionesRegulares()
	{
		var miExpReg = /as?.a/;
		var msg = "Patron: as?.a \n";

		msg += "Contiene casado el patrón?: " + miExpReg.test("casado") + "\n";
		msg += "Contiene castaño el patrón?: " + miExpReg.test("castaño") + "\n";
		msg += "Contiene sabina el patrón?: " + miExpReg.test("sabina") + "\n";
		msg += "Contiene asa el patrón?: " + miExpReg.test("asa") + "\n";
		msg += "Contiene as el patrón?: " + miExpReg.test("as") + "\n";

		alert(msg);
	}

	expresionesRegulares();

Ejercicio: Partiendo de la función anterior, crea una función neuva que reciba cualquier palabra o frase y te devuelve true o false en función de si coincide o no con el patrón /as?.a/.

	function comprobarPalabra(palabra)
	{
		var miExpReg = /as?.a/;
		return miExpReg.test(palabra);
	}

Ejercicio: Modifica la función apra que cree el patrón instanciando el objeto RegExp

	function comprobarPalabra(palabra)
	{
		var miExpReg = new RegExp(/as?.a/);
		return miExpReg.test(palabra);
	}

Ejercicio: Crea una función que compruebe todas aquelals palabras que contienen una "e" segudia de una "o", y entre ellas opcionalmente uno o dos caracterse, de forma que eucmplan el criterio palabras como esto, veo, eco, perro.

	function comprobarEO(palabra)
	{
		var miExpReg = new RegExp(/e.?.?o/);
		return miExpReg.test(palabra);
	}

	function comprobarPalabrasEO()
	{
		var msg = "esto: " + comprobarEO("esto") + "\n";
		msg += "veo: " + comprobarEO("veo") + "\n";
		msg += "veo: " + comprobarEO("eco") + "\n";
		msg += "veo: " + comprobarEO("perro") + "\n";

		alert(msg);

	}

	comprobarPalabrasEO();

Caracteres especiales en expresinoes regulares

\: Carácter de esacape, hace que un carácger especial sea considerado como un carácter normal
a(o cualquier otra letra): Donde a es una letar cualqueira, indica que el patrón inclue una a en la posición especificada
{n}: El carácter anteriro a esta expresión debe aparecer exactamente nveces. Ejemplo bbb validaría b{3}
{n, m}: El carácter anterior a esta expresión debe aparecer un mínimo de n veces y un áximo de m veces.
^: Indica que la cadena debe comenzar obligatoriamente por el símbolo que le sigue
.: Indica la existencia de cualquier carácter
$: Indica que la letra anterior ha de ser obligatoriamente la última letra de la cadena
? (equivale a {0,1}): El carácter que le precede puede aparecer 0 o 1 veces en la cadena
a|b: Indica que en la cadena debe aparecer a o b, siendo a y b dos caracteres cualquiera.
sub1(?=sub2): Devuelve true solo si existe una subcadena donde la subcadena sub1 está antes de la subcadena sub2
sub1(?!sub2): Devuelve true en todas las subcadenas donde la subadena sub2 no está después de la sucadena sub1.
[abc]: Devuelve true si aparece cualquiera de los caracteres indicados dentro de los corchetes
", {0,}: Indica que la letra que le precede aparece cero o mas veces
+, {0,}: Indica que la letra que le precede aparece una o mas veces
[a-z]: Rango de caracteres. Se pueden definir varios conjuntos uno detrás de otro, por ejemplo: [A-Za-z] indica "letra mayúscula o minúscula".
[^a-z]: Vale cualquier carácter menos los de ese rango.
\d (equivale a [0-9]): Coincide con cualquier número entre 0 y 9
\D (equivale a [^0-9]): Coincide con cualquier carácter que no sea número
\s: Coincide con un espacio en blanco, tabulador o salto de línea
\S: Coincide con cualquier carácter que no sea un tabulador, espacio en blanco o salto de línea
\w: Coincide con cualquier letra minúscula, letar mayúscula, número o guion bajo. No tiene en cuenta las letras con tilde.
\W: Coincide con cualquier carácter que no sea una letra minúscula, letra mayúsucla, número o guion bajo.

Ejercicio: Dada la expresión: /^[A-C]\w+\ses\w+/, indica cual de las siguientes cadenas coincide con la expresión regular, y e ncaso afirmativo, indicar qué parte o partes:
- Juan es guapo: NO
- Antonio no es feo: NO
- Alfonso deja de ser guapo: NO
- Bruno ya es guapo: NO
- No es ahora: NO
- Ahora es no: NO
- Ana es millonaria: NO

Ejercicio: Crea una expresión regular que permita validar cualquier palabra que empiece por una o varias letras "a", y a continuación contenga entre dos y cuatro letras "b".

Expresión: /^a+b{2,4}/

Ejercicio: Crea una expresión regular que valide cualquier número entre el 0 y el 8000

	var expresion2 = new RegExp(/^([1-7]?\d{1,3}|8000)$/);
	console.info(expresion2.test("abba"));
	console.info(expresion2.test("0"));
	console.info(expresion2.test("2344"));
	console.info(expresion2.test("8000"));
	console.info(expresion2.test("8001"));
	console.info(expresion2.test("9000"));
	console.info(expresion2.test("900"));

Expresiones regulares con flags

Hasta ahora hemos visto cmo Javasript nos permite buscar trozos de expresiones detro de una caden a através d elas epxreisones regulares. Sin embargo, aún nos falta otener algo mas de control sobre estas coincidencias.

de forma litearl:

var miExpresionRegular = /as?.a/flagsAIncluir;

Listado de flags:

g: Buscada global de todas las coincidendias, es decir, no se detiene al encontrar la primera coincidencia. /as.a/g o new RegExp("as.a", "g")
i: No hace diferencia entre mayúsculas o minúsculas
n: Búsqueda multilínea. Busca en cadenas que tienen saltos de lína o retornos de carro, y conseidra cada uno de ellos como un inicio de línea (^) o fin ($).
Combinaciones: Se pueden especificar varios flags de forma simultánea

Métodos de los objetos de tipo ExpresionRegular
- exec(texto). Si este método encuentar una coincidencia, devuelve un array donde el elemento 0 contiene la coincidencia compelta, y los elementos 1 a n contienen als subcoincidencias correspondientes a paréntesis que se producen dentro de la coincidencia. Si está acdtivado el flag "g", la repetición de la búsqueda devuelve la siguiente coincidencia.

	var miRegExp = /p.sto/g; // Probar después con /p(.)sto/g
	var txt = "El pasto es pisto pero no pesto";
	while ((coincidencias = miRegExp.exec(txt)) !== null )
	{
		console.log(coincidencias);
	}

- test: Comprueba si hay una coincidencia o mas, y devuelve true. Si no, devuelve falso.
- match: Devuelve un array con las coindicendias encontradas, o null si no hay coincidencias.
	Ejemplo: var coincidencia = txt.match(miExprReg);
- search: Devuelve la posició n de comienzo de la primera coincidencia, o -1 si no hay coincidencia
	Ejemplo: var posicion = txt.search(miExprReg);
- replace: Devuelve una nueva cadena donde se reemplace una o varais coincidencias por lo especificado
	Ejepmlo: var nuevoTxt = txt.replace(miExpReg, "abcd");
- split: Devuelve un array con las subcadenas resultantes de dividir la cadena original en subcadenas delimitads por el carácter especificao, que queda excluido. Si se indican unas comillas acías, convierte la cadena en un array de caracteres.
	Emeplo: var partes = txt.split(miExpReg);
	
Paréntesis: En las expresiones regulares, los paréntesis sirven para agrupar varios caracterse y afectarlos por un carácter especial

	var miExpReg = /(p.s)?to/g;
	var txt = "El pasto es pisto y eso es todo";
	var resultado = txt.match(miExpReg);

Hace que resultado contenga pasto, pisto y to

Dentro de una sentencia replace, las coincidencias de subexpresinoes entre paréntesis pueden ser invocadas mediante variable especials $1, $2... 

	var miExpReg = /(\w+)\s(\w+)\s(\w+)/;
	var txt = "Celia Leonar Pajuelo";
	var cambiada = txt.replace(miExpReg, "$2 $3, $1");
	console.log(cambiada);

Ejercicio: Crea una expresion que valide las matriculas de lso vehículos españoles actuales
	var miExpReg = /^\d{4}[B-DF-HJ-NP-TV-Z]{3}$/;

Ejercicio: Valida una fecha con formato dd/mm/aaaa. NO hace falta tener en cuenta los días de cada més, supón que todos los meses tienen 31 días.

	var miExpREg = /^(0[1-9]|[12]\d|3[01])\/(0[1-9]|1[0-2])\/(\d{4})$/;

Base de datos de expresiones regulares: http://www.regexlib.com/

OBJETOS:

¿Que es un objeto? La mayoría de objetos de lso que trabajaremos en JavaScript ya vienen construidos dentro del propio lenguaje. Sin embargo, en muchas ocasiones nos veremos en la necesidad de crear objetos propios.

Un objeto en JavaScript es una colección de propiedades y métodos

- Una propiedad es un valor, o un conjunto de valores (en forma de matriz u objeto), que es miembro de un objeto
- Un método es una función que es miembro de un objeto.

Como crear un objeto

Un objeto, como hemos dicho, es una colección de propiedades y métodos. Para crear un objeto debemos inicializar sus propiedades.

Los objetos siempre van entre llaves y están formados por pares índice-valor, con unsímbolo de dos puntos entre ellos. Los pares se separan enter sí por una coma. El índice es una palara , sin comillas ni nada parecido. El valor puede ser cualquier cosa: Un valor primitivo, un array, o incluso otro objeto.

Este es un ejemplo sencillo de como se podría definir un objeto "coche":

Funciones constructoras: Esto es duuficnet cuando tenagmos que crear un único objeto de un tipo determinado. El problema usrge cuadno tenemos que crear muchos objetos del mismo tipo, por jempelo, un listado de alumnos en un colegio o universidad, o de coches en una cadena de montaje. Tener que crearlos y manejarlos de eta forma puede ser casi imposible.

Para solventar este problema existe la posibilidad de crear un "tipo de objeto" con las propiedades que queremos que tenga ese objeto, usando para ello lo que se denomina un constructor.

Un constructor no es más que una función con un nombre que empieza por mayúsculas, y que recibe una serie de parámetros e inicaliza un objeto nuevo. Veamos un ejemplo:

	function Coche(marca, modelo, anio)
	{
		this.marca = marca;
		this.modelo = modelo;
		this.anio = anio;
	}

Una vez que tenemos definida nuestra función constructora, podemos crear objetos de ese tipo utilizando la función new

	var miCoche = new Coche("Seat", "León", 2008);

Esta declaración cera un objeto de tipo Cche y lo almacena en la variable miCoche

Podemos crear tantos coches como veces sea necesario llamando al constructor.

Se pueden crear objetos que contengan objetos.

	function Persona(nombre, edad, sexo)
	{
		this.nombre = nombre;
		this.edad = edad;
		this.sexo = sexo;
	}

	function Coche(marca, modelo, anio, propietario)
	{
		this.marca = marca;
		this.modelo = modelo;
		this.anio = anio;
		this.propietario = propietario;
	}

Para asignar un propietario a un coche, lo primero es tener un propietario. Una forma sería:

	var simon = new Persona("Simon", 36, "M");
	var cocheDeSimon = new Coche("Opel", "Astra", 2012, simon);

Si queremos acceder a las propiedades del coche utilizaremos la notación punto (.), o bien array utilizando corchetes

	console.log(simon.edad);
	console.log(cocheDeSimon.marca);
	console.log(cocheDeSimon.anio);
	console.log(cocheDeSimon.propietario.nombre);
	console.log(cocheDeSimon.propietario.sexo);

	console.log(simon["nombre"]);
	console.log(cocheDeSimon["propietario"]["sexo"]);

Mostrar las propiedades de un objeto

En ocasiones puede ser necesario mostra todas las propiedade que contiene un objejo. Podemos utilziar la notación de corchetes y un bocle for _ in pra hacerlo. La siguiente función devuelve una cadena cno las propiedades de un objeto cuando se le pasan como arguemtnos el objeto y el nombre del objeto.

	function mostrarPropiedades(objeto, nombreObjeto)
	{
		var resultado = "";
		for (var i in objeto)
		{
			if (typeof(objeto[i]) == 'object')
			{
				resultado += mostrarPropiedades(objeto[i], nombreObjeto + "." + i);
			}
			else if (objeto.hasOwnProperty(i))
			{
				resultado += nombreObjeto + "." + i + " = " + objeto[i] + "\n";
			}
		}

		return resultado;
	}

	console.log(mostrarPropiedades(cocheDeSimon, "Coche"));

Ejercicio: Crea un objeto Alumno que contenga las propeidades nombre, apellidos, edad, curso y dirección y crea un objeto dirección que tenga las propiedades calle, número, ciudad y código postal.

	function Direccion(calle, numero, ciudad, codigoPostal)
	{
		this.calle = calle;
		this.numero = numero;
		this.ciudad = ciudad;
		this.codigoPostal = codigoPostal;
	}

	function Alumnno(nombre, apellidos, edad, curso, direccion)
	{
		this.nombre = nombre;
		this.apellidos = apellidos;
		this.edad = edad;
		this.curso = curso;
		this.direccion = direccion;
	}

Ejercicio: Utilizando los objetos del apartado anterior, crea tres alumnos con todos sus parámetros. A continuación, muestra por consola los nombres, los apellidos, la ciudad y el código postal de los tres alumnos.

	var direccion1 = new Direccion("C\\ Las Rosas", 24, "Cáceres", 12422);
	var direccion2 = new Direccion("C\\ Augusto Vázquez", 3, "Badajoz", 23422);
	var direccion3 = new Direccion("C\\ Menacho", 24, "Badajoz", 23422);

	var alumno1 = new Alumno("Juan", "Martín", 23, 3, direccion1);
	var alumno2 = new Alumno("Pedro", "Hernandez", 22, 1, direccion2);
	var alumno3 = new Alumno("Alfonso", "Dragados", 46, 5, direccion3);

	function mostrarAlumno(alumno)
	{
		console.log("Nombre: " + alumno.nombre);
		console.log("Apellidos: " + alumno.apellidos);
		console.log("Ciudad: " + alumno.direccion.ciudad);
		console.log("Código Postal: " + alumno.direccion.codigoPostal);
	}

	mostrarAlumno(alumno1);
	mostrarAlumno(alumno2);
	mostrarAlumno(alumno3);

Ejercicio: Muestra ahora por consola los tres alumnos creados, primero por console.log y luego con la función mostrarPropiedades. Comprueba las diferencias.

	function mostrarObjeto(objeto, nombreObjeto)
	{
		console.log(mostrarPropiedades(objeto, nombreObjeto));
	}

	function mostrarPropiedades(objeto, nombreObjeto)
	{
		var resultado = "";
		for (var i in objeto)
		{
			if (typeof(objeto[i]) == 'object')
			{
				resultado += mostrarPropiedades(objeto[i], nombreObjeto + "." + i);
			}
			else if (objeto.hasOwnProperty(i))
			{
				resultado += nombreObjeto + "." + i + " = " + objeto[i] + "\n";
			}
		}

		return resultado;
	}


	console.info(alumno1);
	mostrarObjeto(alumno1, "Alumno");

La propiedad Prototype

Cuando escribimso una función constructora, JavaScript crea automaticamente una neuva propiedad(que a su ve es un objeto) denominada Prototype

La propiedad prototype se usa principalmente para heredar las propiedades y métodos de otros objetos. Esto nos permite añadir métodos y propiedades a la función prottype de un objeto, o reescribir los métodos existentes para que funcionen de otra manera.

Ejemplo sencillo:

	function Impresora(misDocumentos)
	{
		this.documentos = misDocumentos;
	}

	Impresora.prototype.imprimir = function()
	{
		console.log(this.documentos);
	}

	var nuevaImpresora = new Impresora("Soy un documento nuevo");
	nuevaImpresora.imprimir();

Herencia con prototype

Ya hemos dicho que cuando un bojeto herea de otro ,hereda a su vez todas sus propiedades y métodos. En el siguiente ejemplo, podemos observar la forma de hcer esto con prototype

	function Animal(nombre)
	{
		this.nombre = nombre;
	}

	Animal.prototype.saludar = function()
	{
		alert("Soy un animal y me llamo " + this.nombre);
	}
	
	function Gato(nombre)
	{
		Animal.call(this, nombre); // Esto llama al constructor de la clase padre
	}

	Gato.prototype = new Animal();
	Gato.prototype.constructor = Gato;

	Gato.prototype.maullar = function()
	{
		alert("Miauuu");
	}
	
	var gatito = new Gato("pirrakas");
	gatito.saludar();
	gatito.maullar();

Si por el contrario, creamos una instancia de la clase animal y llamamos a maullar, este no funcionaría. Pero cualquiera de gato, al heredar las cosas de Animal, utiliza todos sus métodos y tiene todas sus propiedades.

CLASE 57: VIERNES 03/02/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Sobreescritura de métodos: Cambiar el funcionamiento de un método ya existente.

Veamos un ejemplo siguiendo con el código anterior. La función toString() está disponible en todos los objetos. Vamos a usarla sobre nuestro gato:

	alert(miGto.toString()); // Nos devuevle un feo [Objetc object]

Para sobreescribir el método, usamos prototype:

	function Gato(nombre)
	{
		Animal.call(this, nombre); // Esto llama al constructor de la clase padre
	}

	Gato.prototype = new Animal();
	Gato.prototype.constructor = Gato;

	Gato.prototype.maullar = function()
	{
		alert("Miauuu");
	}

	Gato.prototype.toString = function()
	{
		return "Creo que he visto un lindo gatito, llamado " + this.nombre;
	}

	var gatito = new Gato("pirrakas");
	gatito.saludar();
	gatito.maullar();

	alert(gatito.toString());

Objetos por valor y por referencia. En JavaScript los objetos y otros objetos complejos (de tipo object, array o function entre otros) siempre se pasan por referencia. Esto quiere decir que cuando pasamos un objeto, como parámetro de una función por ejemplo, lo que pasamos es el propio objeto, y no una copia. Podemos verlo en el sigueitne ejempllo:

	var alumno1 =
	{
		nombre: "Paula"
	}

	var alumno2 = alumno1;

	console.log(alumno1.nombre);
	console.log(alumno2.nombre);

	alumno1.nombre = "Antonio";

	console.log("Alumno 1: " + alumno1.nombre);
	console.log("Alumno 2: " + alumno2.nombre);

Ejercicios: El método alert es un método del objeto window. Sobreescribelo para que en ve de ahcer aparecer un cuandro de diálogo, muestre el mensaje en la consola.

	window.alert = function(parametro)
	{
		console.info(parametro);
	}

	alert("Prueba de sobreescritura de métodos");

Ejercicio: Crea un objeto de tipo Coche, con tres propiedades: marca, matricula y distancia. La distancia inicialmente debe ser 0. Crea un método describir que liste todas las características del coche. A continuación crea otro método conducir que reciba como parámetro un número de kilómetros y que los añada a la distancia total. Crea una isntancia de Coche, llama al meétodo describir sobre el, llama varias veces al método conducir con diferentes cantidades y por último llama una vez mas al método describir

	function Coche(marca, matricula)
	{
		this.marca = marca;
		this.matricula = matricula;
		this.distancia = 0;
	}

	Coche.prototype.describir = function()
	{
		console.info("Coche ------------");
		console.log("Marca: " + this.marca);
		console.log("Matricula: " + this.matricula);
		console.log("Distancia recorrida: " + this.distancia);
	}

	Coche.prototype.conducir = function(kilometros)
	{
		this.distancia += kilometros;
	}

	var lere = new Coche("Peugeot", "6666BBB");
	lere.describir();
	lere.conducir(43);
	lere.conducir(50);
	lere.conducir(2423);
	lere.conducir(288);
	lere.describir();

Ejercicio: Crea un objeto de tipo Poligono, con una propiedad denominada lados. Debe contener un método denominado describir, que escriba n consola "Soy un poligono y tengo x lados", siendo X el número de lados del polígono. A conginuación cra dos nuevos objetos denominados triangulo y cuadrado, que hereden de polígono, y que en el constructor establezcan el número de lados correcto para cada uno. Crea una instancia de Triangulo y otra de Cuadrado y llama al método describir en cada uno.

	function Poligono(lados)
	{
		this.lados = lados;
	}

	Poligono.prototype.describir = function()
	{
		console.info("Soy un polígono y tengo " + this.lados + " lados.")
	}

	function Triangulo()
	{
		Poligono.call(this, 3); // Esto llama al constructor de la clase padre
	}

	Triangulo.prototype = new Poligono();
	Triangulo.prototype.constructor = Triangulo;

	function Cuadrado()
	{
		Poligono.call(this, 4); // Esto llama al constructor de la clase padre
	}

	Cuadrado.prototype = new Poligono();
	Cuadrado.prototype.constructor = Cuadrado;

	var triangulo = new Triangulo();
	var cuadrado = new Cuadrado();

	triangulo.describir();
	cuadrado.describir();

JSON. ¿Que es JSON? es el acrónimo de JavaScript Objetct Notation ("Notación de objetos de javascript") y es un formato para el intercambio de datos.

Basicamente, JSON describe los datos con una sintaxis que se usapara identificar y gestionar los datos. Nació como una alternativa ligera al XML, y su fácil uso n JavaScript ha hecho que se haya convertido prácdticamente en un estándar de facto.

- Es un formto ligero para intercambio de datos
- Es independiente del lenguaje
- Es auto-descriptivo y fácil de entender

La sintaxis de JSON proviene de la sintaxis de objeto de JavaScript y está compuesta por texto plano. Todos los lenguajes de programación modernos tienen funciones para leer y generar datos en formato JSON.

- Los datos están separados por comas.
- Los datos se escriben en pares, primero el nombre o atributo encerrado entre comilals dobles, y a continuación el valor que contieen dicho atributo.
- Los objetos JSON están rodeados por llaves "{}".
- Se pueden utilizar corchetes "[]" para guardar arrays de elementos, incluidos otros objetos JSON.

	//JSON con un solo elemento
	var frutaJSON = {"nombre": "Manzana", "cantidad": 10};

	//JSON array de elementso JSON:
	var verdurasJSON = { "Verduras": [
	{ "nombre": "Lechuga", "cantidad": 5},
	{ "nombre": "Apio", "cantidad": 2}
	]};

acceso a los elemenntos JSON

Acceder a un elemento JSON es muy sencillo. Tan solo tenemos que utilziar la ntoación . al igual que con los objetos

var usuario = {"nombre": "Emiliano", "email": "emiliano@sinmail.com"};

console.log(usuario.nombre);
console.log(usuario.email);

Para acceder a un elemento dentro de un array, hay que indicar el índice del elemento al que queramo acceder dentro del arra, bien emplenado la notacion punto o array.

var empleados =
	{
	"empleados": [
		{"nombre": "Paloma", "apellido": "Gallego" },
		{"nombre": "Diego", "apellido": "Alegre" },
		{"nombre": "Luisa", "apellido": "Sanabria" }
		]
	};

console.log(empleados.empleados[1].nombre); // Con noatación punto
console.log(empleados["empleados"][2]["apellido"]); // Con noatación Array

Convertir un JSON, en un objeto JavaScript

Uno de los usos mas comunes de JSON es leer datos desde un servidor web, y mostrarlos en una página web. La sintaxis del método epara hacerlo es:

var objeto = JSON.parse(cadenaJSON);

Hay que tener en cuenta que el parámetro que deemos pasar al método parse debe ser una cadena de text. Por tanto, debemos hacer que nuestro servidor devuelva los resultados que deseemos utilizar en este formato.

	var librosStr = '{ "libros": [' + 
	'{ "nombre": "Un mundo feliz", "autor": "Aldous huxley"},' +
	'{ "nombre": "1984", "autor": "George Orwell"},' +
	'{ "nombre": "Las uvas de la ira", "autor": "John Steinbeck"}' +
	']}';

	var librosObjeto = JSON.parse(librosStr);
	console.log(librosObjeto);

Convertir un objeto JavaSCript en un JSON

var cadenaJSON = JSON.stringify(objetoJSON [, reeemplazo [, espacio]]);

- Este método ebe recibir como mínimo un parámetro, que será el objeto JSON a convertir. Puede recibir hasta dos parámetros opcionales mas
- Reemplazo es una función que altera el proceso de conversión a cadena de texto. Puede ser un array de los elelmentos que queremos que s incluyan en el JSON convertido
- Espacio es un objeto de tipo STring o Number que se usa para insertar un espacio en blanco dentro de la cadena de salida JSON, para mejorar su legibilidad. Si es un número índica cuántos espacios hay que agregar, con un áximo de 10. Si es una cadena, se usa dicha cadena como espacios en blanco (Solo los 10 primeros caracteres).

Uso simple para convertir un objeto JavaScript en una cadena de texto JSON

	var cadenaJSON = JSON.stringify({"Nombre": "Inés" });
	console.log(cadenaJSON);

Uso de un array como método de reemplazo para la conversión:

	var objetoJSON = { "hora": 14, "dia": 22, "mes": 7, "año": 2017};
	var cadenaJSON = JSON.stringify(objetoJSON, ["mes", "año"]);
	console.log(cadenaJSON);

Uso de espacios para mejorar la legibilidad

	var objetoJSON = { "artista": "Pablo Picasso", "arte": "pintura"};
	var cadenaJSON = JSON.stringify(objetoJSON, null, 3);
	console.log(cadenaJSON);

AJAX: Es el acrónimo de "Asynchronus JavaScript And XML" y es una técnica de desarrollo web para crear aplicaciones interactivas. En los últimos tiempos se ha convertido casi en en imprescindible, ya que  permite refrescar y cargar contenidos del servido rrapidamente, sin necesidad de hacer una recarga tradicional de la página web, con el tiempo que ello conlleva.

AJAX es una tecnología asíncrona, en el sentido de que lsod atos adicionales se solicitan al servidor y se cargan en segudno plano, sin interferir con el comportamiento de la página. Combina 3 tecnologías existentes:
- XHTML (o HTML) y CSS para el diseño
- DOM para mostrar e interactuar con la información presentada
- El objeto XMLHttpRequest par aintercambiar datos de forma asíncrona con el servidor web
- XML como formato para la transferencia de datos solicitados al servidor. Actualmente ha sido sustituido casi totalmente por JSON.

Un ejemplo sencillo:

Ejemplo de funcionamiento sencillo de AJAX en JavaScript, donde creamos un objeto XMLHttpRequest y recibimos los datos de un archivo txt. Primero debemos crear la página web

Ejercicio: CRea una página HTML condos listas desplegables. En la primera deben aparecer

CLASE 58: LUNES 04/02/2016
----------------------------------------------------------------------------------------------------------------------------------------------------------------

WORDPRESS:

Antes de nada, creamos una base de datos nueva que llamaremos curso_wp

Nos descargamos Wordpress de aquí:

https://wordpress.org/download/

lo extraemos y lo colocamos dentro de la carpeta htdocs.

vamos a localhost/wordpress y hacemos el proceso de instalación rellenando los datos que nos piden. En el caso de base de datos, usaremos la ya creada (curso_wp)

Como usuario de base de datos utilizaremos root, sin contraseña y servidor localhost.

En la siguiente pantalla creamos un usuario:
usuario: joseluis_f1@hotmail.com
contraseña: phpJose24.

Una vez terminado nos saldrá automaticamente el panel de administración.

Categorías:

En entradas, categoría. En superior, se pueden agrupar categorías como si fuera un arbol, colocando en superior la parte principal de una subcategoría que acabaramos de crear. Luego, en la entrada, en la parte derecha podemos seleccionar las categorías, así como las etiquetas para que sean usadas por los buscadores para indexar.

Imagen destacada: Imagen representativa de la entrada.

En ajustes gnerales:
Miembros: Miembros Cualquiera puede registrarse. Es útil marcarlo solo si es necesario, como una tienda o encuestas.

Escritura:
Servicios de actualización: Sirve para que cuando se hagan actualizaciones, se avise a los motores de búsqueda que hay nuevos datos.

Ajustes de lectura:

Número máximo de entradas a mostrar en el sitio: 
Número máximo de entradas a mostrar en el feed: Las entradas que se muestran en el RSS.

Añadir un menú
Apariencia, personalizar, menú, nuevo menú

Instalar temas: Descargar el tema, y luego en el menú de arriba darle a añadir tema y subir tema. Luego click en instalar ahora.

Los ajustes del anterior tema se quedan guardados por si se modifican en el nuevo tema.

Plantillas wordpress:
https://colorlib.com/wp/free-wordpress-themes/
https://colorlib.com/wp/themes/sparkling/
https://www.codeinwp.com/blog/best-free-wordpress-themes/

plantilla demo gratis y de pago:
https://themegrill.com/themes/colormag/

Plantillas HTML:
http://www.opendesigns.org/website-templates/
http://www.os-templates.com/free-website-templates/pedggie

CLASE 59: MARTES 07/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Plugins wordpress: añadir nuevos componentes. Se recomienda no tener dos plugins de lo mismo, ya que es posible que entren en conflicto.

Google XML Sitemaps se utiliza mucho para indexar y yoast seo es muy util

WooCommerce: para tiendas. Después de instalarlo hay que configurar. Para accedera la tienda hay que ir a Apariencia, menús

http://gaman.es/

CREAR UN TEMA:

1. Creamos una carpeta en C:\xampp\htdocs\wordpress\wp-content\themes con el nombre de nuestro tema

Para que exista un tema debe haber como mínimo dos archivos: style.css e index.php

En el css lo primero que tenemos que añadir es nuestra información de la siguiente manera:

	/*
	Theme Name: Mi tema
	Template Theme URI: http://www.mistemas.es
	Autor: Jose
	Description: Plantilla de prueba del curso de Wordspress.
	Version: 1.0
	*/

Debe haber también una imagen llamada screenshot de 1200 x 900 pixeles, como miniatura del tema.

2. Cabecera básica para el fichero header.php:

	<!DOCTYPE HTML>
	<html Lang="<?php bloginfo('languaje'); ?>">
	<head>
		<meta charset="<?php bloginfo('charset') ?>">
		<title><?php bloginfo("name") ?></title>
		<link rel="stylesheet" href="<?php bloginfo('stylesheet_url')?>">
		<?php wp_head();?>
	</head>
	<body>
		<header>
			<h1><?php bloginfo("name")?></h1>
		</header>
	</body>
	
3. Plantilla de footer.php

			<footer>
				<small>Curso de Wordpress (c) <?php echo date("Y"); ?></small>
			</footer>
			<?php wp_footer(); ?>
		</body>
	</html>

4. Plantilla de home.php:
	
	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>


	<?php if (have_posts() ):?>
	<section>
		<?php while (have_posts() ) : the_post(); ?>
			<article>
				<header>
					<h1><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>
					<time datetime="<?php the_time('Y-m-j'); ?>"><?php the_time("j f, Y")?></time>
				</header>
				<?php the_excerpt();?>
				<footer>
					<address>Por <?php the_author_posts_link() ?></address>
				</footer>
			</article>
		<?php endwhile; ?>

		<div class="pagination">
			<span class="in-left"><?php next_posts_link("<- Entradasantiguas"); ?></span>
			<span class="in-right"><?php previous_posts_link("Entradas recientes ->"); ?></span>
		</div>
		
	</section>

	<?php else : ?>
		<p><?php _e("No hay entradas"); ?></p>
	<?php endif; ?>

	<!-- Barra lateral -->
	<?php get_sidebar(); ?>

	<!-- Pié de página -->
	<?php get_footer(); ?>	

5. Plantilla de single.php (la página para visualizar posts)

	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>

	<!-- Contenido de la entrada -->
		<?php if ( have_posts() ) : the_post(); ?>

			<section>
				<h1><?php the_title() ?></h1>
				<time datetime="<?php the_time('Y-m-j');?>"><?php the_time('j F, Y');?></time>
				<?php the_content(); ?>
				<address>Por <?php the_author_posts_link()?></address>
			</section>

		<?php else : ?>
			<?php _e("Esta entrada no existe=");?>
		<?php endif; ?>

	<!-- Barra lateral -->
	<?php get_sidebar(); ?>

	<!-- Pié de página -->
	<?php get_footer(); ?>

6. index.php debe estar vacío. Se queda vacío ya que es la página predefinida a la que se dirige si no encuentra la página necesaria. Por ejemplo, si no se define la página de autor y se intenta entrar en ella a través de algún enlace, irá a la página index.

CLASE 60: MIÉRCOLES 08/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Pagina de inicio prefefinida (en caso de que no hagamos alguna on x entradas)

7. Nombre de la página: front_page.php

	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>

	<!-- Contenido de la página de inicio -->
		<?php if ( have_posts() ) : the_post(); ?>

			<section>
				<h1><?php the_title() ?></h1>
				<?php the_content(); ?>
			</section>
			
		<?php endif; ?>

	<!-- Barra lateral -->
	<?php get_sidebar(); ?>

	<!-- Pié de página -->
	<?php get_footer(); ?>

8. Para los menús: functions.php

9. Para hacer que salga el menú añadimos lo siguiente en el fichero header.php:

	<nav>
		<ul class="main-nav">
			<?php
			/* Creamos una lista y dentro de ella colocamos el menú navegation que hicimos anteriormente */
				wp_nav_menu(array("theme_location" => "navegation"));
			?>
		</ul>
	</nav>

De esta manera queda así:

	<!DOCTYPE HTML>
	<html Lang="<?php bloginfo('languaje'); ?>">
	<head>
		<meta charset="<?php bloginfo('charset') ?>">
		<title><?php bloginfo("name") ?></title>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
		<link rel="stylesheet" href="<?php bloginfo('stylesheet_url')?>">
		<?php wp_head();?>
	</head>
	<body>
		<header>
			<h1><?php bloginfo("name")?></h1>
		</header>
		<nav>
			<ul class="main-nav">
				<?php
				/* Creamos una lista y dentro de ella colocamos el menú navegation que hicimos anteriormente */
					wp_nav_menu(array("theme_location" => "navegation"));
				?>
			</ul>
		</nav>


10. Para las categorías: category.php

Antes de eso, hay que añadir en home.php debajo de time:

	<?php the_category();?>
	
	De esta manera queda esa parte así:
	
	<?php if (have_posts() ):?>
	<section>
	<?php while (have_posts() ) : the_post(); ?>
		<article>
			<header>
				<h1><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>
				<time datetime="<?php the_time('Y-m-j'); ?>"><?php the_time("j f, Y")?></time>
				<?php the_category();?>
			</header>
			<?php the_excerpt();?>
			<footer>
				<address>Por <?php the_author_posts_link() ?></address>
			</footer>
		</article>
	<?php endwhile; ?>
	
Ahora en category.php escribimos el siguiente código:

	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>

	<!-- Título de la página -->
	<h2>Páginas pertenecientes a <?php single_cat_title(); ?></h2>

	<!-- Listado de posts -->
	<?php if (have_posts() ):?>
	<section>
		<?php while (have_posts() ) : the_post(); ?>
			<article>
				<header>
					<h1><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>
					<time datetime="<?php the_time('Y-m-j'); ?>"><?php the_time("j f, Y")?></time>
					<?php the_category();?>
				</header>
				<?php the_excerpt();?>
				<footer>
					<address>Por <?php the_author_posts_link() ?></address>
				</footer>
			</article>
		<?php endwhile; ?>

		<div class="pagination">
			<span class="in-left"><?php next_posts_link("<- Entradasantiguas"); ?></span>
			<span class="in-right"><?php previous_posts_link("Entradas recientes ->"); ?></span>
		</div>
		
	</section>

	<?php else : ?>
		<p><?php _e("No hay entradas"); ?></p>
	<?php endif; ?>

	</div>

	<!-- Pié de página -->
	<?php get_footer(); ?>

11. Para las etiquetas, modifivamos el fichero single.php:

	<?php the_category(); ?>
	<?php the_content(); ?>
	<?php the_tags("<ul><li>", "</li><li>", "</li></ul>"); ?>
			
De esa manera nos queda así:
			
	<section>
		<h1><?php the_title() ?></h1>
		<time datetime="<?php the_time('Y-m-j');?>"><?php the_time('j F, Y');?></time>
		<?php the_category(); ?>
		<?php the_content(); ?>
		<?php the_tags("<ul><li>", "</li><li>", "</li></ul>"); ?>
		<address>Por <?php the_author_posts_link()?></address>
	</section>

Modificamos también home.php para que las etiquetas aparezcan en la página principal:

	<header>
		<h1><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>
		<time datetime="<?php the_time('Y-m-j'); ?>"><?php the_time("j f, Y")?></time>
		<?php the_category();?>
		<?php the_tags("<ul><li>", "</li><li>", "</li></ul>"); ?>
	</header>
	
la función the_tags recibe 3 parámetros: lo que tiene que aparecer al principio, lo que hay entre elemento y elemento, y lo que se escribe al final.

12. Comentarios. Modificamos single php en la parte de section:

	<section>
		<h1><?php the_title() ?></h1>
		<time datetime="<?php the_time('Y-m-j');?>"><?php the_time('j F, Y');?></time>
		<?php the_category(); ?>
		<?php the_content(); ?>
		<?php the_tags("<ul><li>", "</li><li>", "</li></ul>"); ?>
		<address>Por <?php the_author_posts_link()?></address>

		<!-- Zona de comentarios -->
		<?php comments_template(); ?>
	</section>

comments_template(); llama a la plantilla para colocar comentarios. En caso de no definirse, utiliza la plantilla por defecto de wordpress.

13. Widgets: sidebar.php:

	<aside>
		<!-- Zona de Widgets -->
		<?php dynamic_sidebar("sidebar");?>
	</aside>
	
Se modifica functions.php:
	
	<?php

	/* Añade aquí en forma de array los menús que quieras incluir */

	/*
	Se puede poner el índice que queramos. navegation es el menú estándar
	__ significa que se puede traducir
	navegation es el slug.
	*/

	function mis_menus()
	{
		register_nav_menus(
			array("navegation" => __( "Menú de prueba de tema" ),
				)
			);
	}

	/* Llamada a una acción de wordpress. El primero indica cuando se lanza una accion (al inicio) y la segunda que función genera. En estes caso hace que al inicio se agregue un nuevo menú */
	add_action("init", "mis_menus");

	/* Función que hemos llamado mis_widgets (se puede llamar como quieras)*/
	function mis_widgets()
	{
		/* A register_sideber se le pasan los parámetros de la zona */
		/* id es el slug por el cual se le va a conocer dentro de wordpress */
		/* before y after son los códigos que aparecerán antes y después*/
		register_sidebar(
			array(
				"name" => __("Sidebar"),
				"id" => "sidebar",
				"before_widget" => "<div class='widget'>",
				"after_widget" => "</div>",
				"before_title" => "<h3>",
				"after_title" => "</h3>",
			)
		);
	}

	add_action("init", "mis_widgets");

	?>

14. Búsqueda: search.php:

	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>

	<!-- Búsqueda -->
	<p>Resultados de búsqueda para <strong><?php echo get_search_query(); ?></strong></p>

	<div class="container-fluid">
	<!-- Barra lateral -->
	<div class="pull-right"><?php get_sidebar(); ?></div>

	<?php if (have_posts() ):?>
	<section>
		<?php while (have_posts() ) : the_post(); ?>
			<article>
				<header>
					<h1><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>
					<time datetime="<?php the_time('Y-m-j'); ?>"><?php the_time("j f, Y")?></time>
					<?php the_category();?>
					<?php the_tags("<ul><li>", "</li><li>", "</li></ul>"); ?>
				</header>
				<?php the_excerpt();?>
				<footer>
					<address>Por <?php the_author_posts_link() ?></address>
				</footer>
			</article>
		<?php endwhile; ?>

		<div class="pagination">
			<span class="in-left"><?php next_posts_link("<- Entradasantiguas"); ?></span>
			<span class="in-right"><?php previous_posts_link("Entradas recientes ->"); ?></span>
		</div>
		
	</section>

	<?php else : ?>
		<p><?php _e("No hay entradas"); ?></p>
	<?php endif; ?>

	</div>

	<!-- Pié de página -->
	<?php get_footer(); ?>

Y modificar el fichero de funciones functions.php

	<?php

	/* Añade aquí en forma de array los menús que quieras incluir */

	/*
	Se puede poner el índice que queramos. navegation es el menú estándar
	__ significa que se puede traducir
	navegation es el slug.
	*/

	function mis_menus()
	{
		register_nav_menus(
			array("navegation" => __( "Menú de prueba de tema" ),
				)
			);
	}

	/* Llamada a una acción de wordpress. El primero indica cuando se lanza una accion (al inicio) y la segunda que función genera. En estes caso hace que al inicio se agregue un nuevo menú */
	add_action("init", "mis_menus");

	/* Función que hemos llamado mis_widgets (se puede llamar como quieras)*/
	function mis_widgets()
	{
		/* A register_sideber se le pasan los parámetros de la zona */
		/* id es el slug por el cual se le va a conocer dentro de wordpress */
		/* before y after son los códigos que aparecerán antes y después*/
		register_sidebar(
			array(
				"name" => __("Sidebar"),
				"id" => "sidebar",
				"before_widget" => "<div class='widget'>",
				"after_widget" => "</div>",
				"before_title" => "<h3>",
				"after_title" => "</h3>",
			)
		);
	}

	add_action("init", "mis_widgets");

	function buscar_solo_posts($query)
	{
		// Comprobamos que si es de búsqueda, busque solo en las páginas de tipo post
		if ($query->is_search)
		{
			$query->set("post_type", "post");
		}
		return $query;
	}

	/* El filtro lleva dos parámetros, cuando se ejecuta y a que función llama. Se hace antes de pedir las entradas y se llama a la función buscar_solo_posts */
	add_filter("pre_get_posts", "buscar_solo_posts");

	?>
	
15. Plantillas: Plantila de contacto, llamada contacto.php

	<?php
	/**
	* Template Name: Plantilla de Contaco
	*/
	?>

	<!-- Incluímos el archivo de cabecera -->
	<?php get_header(); ?>

	<!-- Contenido de la página de inicio -->
	<?php if ( have_posts()) : the_post(); ?>
		<section>
			<h1><?php the_title();?></h1>
			<?php the_content(); ?>

			<form method="post" action="">
				<label for="name">Nombre</label><br>
				<input type="text" id="name" placeholder="Escribe aquí tu nombre y apellidos"></br>
				<label for="subject">Asunto</label><br>
				<input type="text" id="subject" placeholder="Motivo de tu consulta"></br>
				<label for="message">Mensaje</label><br>
				<textarea id="message"></textarea></br>
				<button type="submit">Envíar datos</button></br>
			</form>
		</section>
	<?php endif; ?>

	<!-- Incluímos la barra lateral -->
	<?php get_sidebar(); ?>

	<!-- Incluímos el pié de página -->
	<?php get_footer(); ?>

Para usarla, le damos en el panel de administración a "Página" y luego a "Añadir Página"

Algunos plugins no se instalan de forma normal. Como ejemplo para ello usaremos Contact Form 7.

Primero, lo instalamos y activamos de forma normal. Luego en plugins, buscamos "Contact Form" y le damos a ajustes
Ahí podemos ver los formularios de contacto que tenemos creado. Por defecto, habrá uno que es:

	[contact-form-7 id="70" title="Formulario de contacto 1"]

Si le damos a editar podemos ver los campos que tiene. Ahora, para insertar ese formulario de contacto le damos a página, crear nueva y podemos poner ahí ese codigo, el cual generará automaticamente el formulario.

Además, ese shortcode también se puede añadir a un widget. Por ejemplo, el widget "texto" permite escribir código html, incluído el shortcode que hemos puesto antes, así ya tendriamos un formulario de contacto en una barra lateral por ejemplo.

Web con estilos para textos:
https://wdexplorer.com/20-examples-beautiful-css-typography-design/Array

CLASE 61: JUEVES 09/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Creación de plugins:

Creamos una carpeta en la carpeta plugins que llamaremos entradas-a-colores y dentro de ella un fichero php llamado entradas-a-colores.php, con este contenido:

	<?php
	/*
	Plugin Name: Entradas a colores
	Plugin URI: http://misplugins.com
	Description: Cambmia el color de las entradas en función de su estado
	Version: 1.0
	Author: Jose Luis Martín Ávila
	Autor URI: joseluis_f1@hotmail.com
	License: GPLv2 o posterior
	*/

	function post_status_color()
	{
		/* Redefinimos las clases de los estados de publicación */
		
		?>
		<style>
		.status-draft { background: #FCE3F2 !important; }
		.status-pending { background: #FCFC85 !important; }
		.status-publish { /* Por defecto */ }
		.status-future { background: #C6EBF5 !important; }
		.status-private { background: #E7C7B4 !important; }
		</style>

		<?php
	}
	?>

Para llamar a una función hay dos tipos de formas:

filtro: modifica la salida por defecto de una acción predefinida, por ejemplo cuando se pinta el título o algo
hook: hace una acción nueva


Usuarios:
- Autor: Puede crear entradas
- Editor: Moderador para editar entradas y comentarios.
- Administrador: Control total

CLASE 62: VIERNES 10/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
tutoría

CLASE 63: LUNES 13/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

CANVAS: Creamos primero un html con una etiqueta canvas y un id para usasrlo con javascript:

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Canvas</title>
	<script defer src="canvas.js"></script>
</head>
<body>

	<canvas id="canvas" width="400" height="300"></canvas>

</body>
</html>

	function dibujar()
	{
		var ctx = document.getElementById("canvas");
		var ctx = canvas.getContext("2d");

		ctx.fillStyle = "rgb(200, 0, 0)";
		ctx.fillRect(10, 10, 50, 50);
		ctx.fillStyle = "rgba(0, 200, 0, 0.5)";
		ctx.fillRect(30, 30, 50, 50);

		/* Para el color de la línea */
		ctx.strokeStyle = "#0f0";
		ctx.lineWidth = 2;
		/*
		Para pintar una línea
		1. Colocamos la pluca en el punto inicial
		*/
		ctx.moveTo(30, 50);
		/* Establecemos el punto final */
		ctx.lineTo(100, 200);
		/* Indicamos mas coordenadas para otra línea */
		ctx.lineTo(150, 40);
		/* Le indicamos que la pinta */
		ctx.stroke();
		/* Si por el lado contraro, le indicamos ctx.fill() lo que hace es rellenarlo de color */
		ctx.fill();

		/*
		Dibujar un arco
		1. Coordenada X
		2. Coordenada Y
		3. Radio del círculo
		4. Ángulo inicila
		5. Angulo final
		6. Opcional. Si se añade true, pinta en sentido contrario a las agujas del reloj.
		*/

		ctx.moveTo(100, 100);
		//ctx.arc(100, 100, 50, 0, Math.PI);
		ctx.stroke();

		//ctx.arc(100, 100, 50, Math.PI / 2 , 3 * Math.PI);
		ctx.stroke();

		/* Circunferencia entera */
		ctx.arc(100, 100, 50, 0, 2 * Math.PI);
		ctx.stroke();

		/* Texto */
		ctx.strokeStyle = "rgb(0, 0, 200)";
		ctx.font = "Italic Bold 34pt Arial, sans-serif";
		ctx.fillText("Hola", 50, 100);
		ctx.strokeText("Adios", 150, 100);

		ctx.fillStyle = "rgb(230, 0,230)";
		ctx.textAlign = "center";
		ctx.textBaseline = "alphabetic"; /* top, middle, alphabetic, bottom */
		ctx.fillText("Nuevo textop", 200, 150);

		/* Sombras */
		ctx.shadowColor ="#000";
		ctx.shadowOffsetX = 4;
		ctx.shaddowOffsetY = 4;
		ctx.shadowBlur = 7;
		ctx.fillText("sombra", 250, 200);

	}

dibujar();

Ejercicio: Crear un dibujador de canvas automático.

CLASE 64: MARTES 14/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

JQuery: Framework de javascript que facilita la realización de varias tareas.

Jquery CDN: https://code.jquery.com/

<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>


/* Indicar que no se ejeucten las cosas hasta que no haya cargado todo */
$(document).ready(function()
{

});

también puede ser

/* Indicar que no se ejeucten las cosas hasta que no haya cargado todo */
$().ready(function()
{

});


Selector: $. Para seleccionar algo cuya id sea miParrafo:

$("#miParrafo")

Añadir, quitar o comprobar clases:

	$("#botonRojo").addClass("verde");
	$("#botonRojo").removeClass("verde");

	if ($("#botonRojo").hasClass("verde"))
	{
		alert("Tiene la calse verde");
	}
	else
	{
		alert("No tiene la clase verde");
	}
	
Ejercicio: Crear 3 botones que al pulsar 1 se cambie el color y al volver a pulsarlo se vuelva a quitar:

	$(function()
	{

		$("#miParrafo").css({"font-weight" : "bold"});
		$(".parrafo").css({"color" : "#f00"});
		$("p").css({"font-size": "30px"});

		$(".boton").click(cambiarColorBoton);

	});

	function cambiarColorBoton()
	{
		if ($(this).hasClass("azul"))
		{
			$(this).removeClass("azul");
		}
		else
		{
			$(this).addClass("azul");
		}
	}

		<!DOCTYPE html>
		<html>
		<head>
			<meta charset="utf-8">
			<title>JQuery</title>
			<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
			<script defer src="js/codigo.js"></script>

			<style>
			.azul
			{
				background-color: blue;
			}
			</style>
		</head>
		<body>

			<p>Hola Caracola</p>
			<p id="miParrafo" class="parrafo">Loren ipsum</p>
			<p class="parrafo">Dolor sit amet</p>
			<button class="boton">Pulsame</button>
			<button class="boton">Pulsame 2</button>
			<button class="boton">Pulsame 3</button>

		</body>
		</html>

Ejercicio: Realizar el mismo ejercicio para que cuando se pulse uno se desmarquen los demás

	$(function()
	{

		$("#miParrafo").css({"font-weight" : "bold"});
		$(".parrafo").css({"color" : "#f00"});
		$("p").css({"font-size": "30px"});

		$(".boton").click(cambiarColorBoton);

	});

	function cambiarColorBoton()
	{
		$(".boton").removeClass("pulsado");
		$(this).addClass("pulsado");
	}

Existe el méotodo toggleClass para añadir una clase de pulsado y despulsado con una sola línea:

	$(".boton").click(function()
	{
		$(this).toggleClass("pulsado");
	});

Si no está activa, la activa.Y si está activa, se elimina. De esa forma es mas fácil crear una clase para pulsado.	

Recuperar el valor de una caja de texto:
Si se pone un valor entre paréntesis, se pone el valor dentro de los paréntesis y si no se pone ningún valor, lo recupera.

	alert($("#nombre").val(); 
	
Ejercicio: Colocar un campo de texto y un botón, para que al hacer click en el botón aparezca dentro del cuadro de texto "Hola " mas lo que haya escrito antes:

js:

	$(".boton").click(function()
	{
		$("#nombre").val("Hola " + $("#nombre").val())
	});

html:

	<button class="boton">Saludar</button>
	<input type="text" id="nombre"/>

CLASE 65: MIÉRCOLES 15/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Mas atributos con jquery:

html:

	<p class="parrafo">Hola, esto es un <strong>párrafo</strong></p>

Coger el valor del html (igual que innerHTML):

	alert($(".parrafo").html());

Coger el valor textual (parecido a html pero quita las etiquetas):

	alert($(".parrafo").text());

Ejercicio: Crear dos listas, una de ellas con selección múltiple y mostrar un mensaje con el contenido:

	<select id="coche">
		<option value="volvo">Volvo</option>
		<option value="saab">Saab</option>
		<option value="mercedes">Mercedes</option>
		<optioN value="audi">Audi</option>
	</select>

	<select id="personas" multiple>
		<option value="khadgar">Khadgar</option>
		<option value="illidan">Illidan</option>
		<option value="arthas">Arthas</option>
		<option value="maiev">Maiev</option>
		<option value="jaina">Jaina</option>
		<option value="sylvanass">Sylvanas</option>
		<option value="trhall">Thrall</option>
		<option value="varyan">Varyan</option>
	</select>

	<button id="boton">Viajar</button>
	
js:
	
	$(function()
	{

		$("#boton").click(viajar);

	});

	function viajar()
	{
		var coche = $("#coche").val();
		/* Lo del final indica "si es falso, cógeme un array vacío */
		var personas = $("#personas").val() || [];
		alert("En un " + coche + " van: " + personas);
	}

Se pueden modificar mas atributos:

Cambiar un atributo:

	$("#boton").attr("disabled", true);

Eliminar un atributo:
	
	$("#boton").removeProp("disabled");
	
Obtener el valor de un atributo:	
	
	alert($("#boton").attr("disabled"));

Ejercicio: Utilizando las listas existentes, implemetnar un checkbox debajo de las dos listas y que se checkee cuando seleccionemos uno de la primera lista y 3 elementos de la multiple.

html:

	<select id="coche">
		<option value="volvo">Volvo</option>
		<option value="saab">Saab</option>
		<option value="mercedes">Mercedes</option>
		<optioN value="audi">Audi</option>
	</select>

	<select id="personas" disabled="disabled" multiple>
		<option value="khadgar">Khadgar</option>
		<option value="illidan">Illidan</option>
		<option value="arthas">Arthas</option>
		<option value="maiev">Maiev</option>
		<option value="jaina">Jaina</option>
		<option value="sylvanass">Sylvanas</option>
		<option value="trhall">Thrall</option>
		<option value="varyan">Varyan</option>
	</select>

	<input id="checkbox" type="checkbox" disabled="disabled" >Checkbox</input>
	
js:
	
	$(function()
	{

		$("#coche").change(cambiosCoche);
		$("#personas").change(cambiosPersonas);

	});

	function cambiosCoche()
	{
		$("#personas").attr("disabled", $(this).val());
	}

	function cambiosPersonas()
	{
		$("#checkbox").prop("checked", $(this).val().length == 3);
	}
	
PSEUDOSELECTORES:

Primero
	$("#miLista li:first").css({"color" : "red"});

Ultimo
	$("#miLista li:last").css({"color" : "red"});

Segundo (con nth empieza a contar desde 1)
	$("#miLista li:nth-child(2)").css({"color" : "red"});

Segundo por la cola
	$("#miLista li:nth-last-child(2)").css({"color" : "red"});

Todos menos los 4 primeros (ya que empieza de 0):	
$("#miLista li:gt(3)").css({"color" : "red"});

mas:
	- odd: elementos pares
	- even: impares
	- hidden: los ocultos
	- visible: los visibles
	- checked: Ideal para saber que radiobutton está marcado
	- selected: Ideal para saber que elemento de una lista de selección está marcado
	
Ejemplos con hidden y visible:

html:
	
	<div id="oculto" style="display: none">Holaa</div>

js: 

	alert($("div:hidden").attr("id"));

Ejemplo con checked:

html:

	<input id="radio" name="radio" type="radio" value="1">Uno
	<input id="radio" name="radio" type="radio" value="2">Dos
	<input id="radio" name="radio" type="radio" value="3">Tres

	<button id="boton">Mostrar seleccionado</button>
	
js:

	$(function()
	{

		$("#boton").click(function()
		{
			alert($("#radio:checked").val());
		});

	});
	
CLASE 66: JUEVES 16/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Selectores por valor:

html:

	<div id="div1" name="miDivFavorito" style="{height: 400px; width: 200px;}"></div>
	<div id="div2" name="esteNoMeGusta"></div>

js:

	$(function()
	{

		$("div[name='miDivFavorito']").css({"background-color" : "#00f"});

	});
	
Ejemplo: Buscar todas las que contengan on:

html:

	<div id="corazon"></div>
	<div id="camion"></div>
	<div id="hola"></div>
	<div id="balon"></div>
	
javascript:
	
	$(function()
	{

		alert($("div[id*='on']").length);

	});

empiezan en on:

	alert($("div[id^='on']").length);

Terminan en on:

	alert($("div[id$='on']").length);

Todos menos corazón

	alert($("div[id!='corazon']").length);

Todos los que contengan el atributo name, sin importar el contenido

	alert($("div[name]").length);
	
Selector para buscar palabras completas (separando por donde hay espacios)

	alert($("div[class~='btn']").length);
	
Que contengan la clase btn y que además su id empieze por cor

	alert($("div[class~='btn'][id^='cor']").length);

Seleccionar los div que tienen un párrafo o mas:

html:

	<div id="corazon">
		Corazón
		<p>Esto es un párrafo</p>
		<div>Esto es otro div</div>
		<p>Esto es otro <span>párrafo</span> distinto</p>
	</div>
	
js:

	alert($("div").has("p").html());
	
find: Sirve para filtrar los contenidos y quedarse con los que cumplen una condicion. Por ejemplo, los span que estén en un div:

	alert($("div").find("span").html());
	
filter: obtener todos los elementos que si cumplen esa condicion. Filter además permite hacer una función de búsqueda concreta. También se le puede pasar una función. Ejemplo para quedarnos con los impares:

	alert($("div").filter("even").html());
	
Cuantos divs hay que vayan de 3 en 3
	
	alert($("div").filter(function(index)
		{
			return index % 3 === 0;
		}).length
	);

Se puede complicar aún mas todo eso. A los elegidos anteriormente, nos quedamos con el último y cogemos su atributo id:

	alert($("div").filter(function(index)
		{
			return index % 3 === 0;
		}).last().attr("id")
	);
	
Anchura de un elemento:

	alert($("#tonteria").width());
		
Altura de un elemento:

	alert($("#tonteria").heigth());
	
Si además incluimos un valor dentro de esas funciones, podemos cambiarlo. Ejemplo

	alert($("#tonteria").width(300));

Obtener posición:

	alert($("#tonteria").position());

ANIMACIONES:

Aparecer y desaparecer un objeto:

	$("#botonAnimar").click(function()
	{
		$("#divAnimado").toggle("fast");
	});

Donde "fast" puede ser
	- fast: 200ms
	- normal: 400ms
	- slow: 600ms
	Cualquier cantidad en ms

Otras animaciones:
	$(elemento).fadeOut(tiempo): Oculta
	$(elemento).fadeIn(tiempo): Muestra
	$(elemento).fadeToggle: Muestra si está oculto, u oculta si es visible.
	$(elemento).slideUp: Oculta un objeto con un movimiento de persiana
	$(elemento).slideDown: Muestra un objeto con un movimiento de persiana
	$(elemento).slideToggle: Oculta o muestra un objeto con un movimiento de persiana
	
Se puede además añadir un retraso para que se ejecute cuando pase x tiempo. En este caso ocurre a los 500 milisegundos

	$("#divAnimado").delay(500).slideToggle("fast");
	
UTILIZAR ANIMACINOES PARA MENSAJES DE ERROR:

html:

	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="utf-8">
		<title>Animaciones</title>
		<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
		<script defer src="js/codigo.js"></script>
		<style>
		header
		{
			height: 300px;
			width: 100%;
			background-color: #ccf;
		}
		.flash
		{
			border: 1px solid #000;
			border-radius: 5px;
			padding: 5px 20px;
			display: table;
			text-align: center;
			min-width: 200px;
			position: absolute;
			top: 20px;
			left: 50%;
			transform: translate(-50%, 0);
			/* La mitad de lo que ocupa lo mueve a la izquierda, así queda centrado */			

		}
		.flash-success
		{
			background-color: #cfc;
			color: #383;
			border-color: #383;
		}
		.flash-error
		{
			background-color: #fcc;
			color: #833;
			border-color: #833;
		}
		</style>
	</head>
	<body>
	<header>
	</header>

		<div class="flash flash-success">Este es un mensaje de éxito</br>Y este también</div>

	</body>
	</html>

js:

	$(function()
	{
		$(".flash").delay(3000).fadeOut("slow");
	});

CLASE 67: VIERNES 17/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

DOM en jquery

	/* Insertar después de un elemento lo que le pasemos
	En ete caso, movemos el último elemento después de la primera posición */
	//$("#verduras > li:last").insertAfter($("#verduras > li:first"));

	/* After funciona al revés, pero hace lo mismo */
	//$("#verduras > li:first").after($("#verduras > li:last"));

	//$("#verduras > li:last").insertBefore($("#verduras > li:first"));

	//$("#verduras > li:first").before($("#verduras > li:last"));

	/* Coge el primer elemento y lo coloca en última posición */
	$("#verduras > li:first").appendTo($("#verduras"));	

	/* También se puede hacer al revés. Cogemos el elemento al que queremos añadir algo y luego le añadimos */
	$("#verduras").append($("#verduras > li:first"));
	
EJERCICIO: Colocar dos botones (avanzar y retroceder) y que al pulsar el de avanzar, el ultimo elemento se coloque el primero, y al darle a retroceder, el primero se va a la última posición

html:

	<ul id="verduras">
		<li>Tomate</li>
		<li>Lechuga</li>
		<li>Tubérculos
			<ul>
				<li>Patata</li>
				<li>Zanahorias</li>
				<li>Apio</li>
			</ul>
		</li>
		<li>Espinaca</li>
		<li>Coliflor</li>
	</ul>

	<button id="avanzar">Avanzar</button>
	<button id="retroceder">Retroceder</button>
	
js:

	$(function()
	{
		$("#avanzar").click(avanzar);
		$("#retroceder").click(retroceder);
	});

	function avanzar()
	{
		$("#verduras > li:last").insertBefore($("#verduras > li:first"));
	}

	function retroceder()
	{
		$("#verduras > li:first").insertAfter($("#verduras > li:last"));
	}
	
EJERCICIO: Crear dos selects multiples con dos botones y que se puedan intercambiar los datos entre las dos. El primer select tiene que tener ciudades que al pulsar el boton añadir se muevan al otro select. Y en el otro boton al pulsar debe mover los elementos del segudno select al primero:

html:

	<select multiple="multiple" id="ciudades">
		<option value="badajoz">Badajoz</option>
		<option value="madrid">Madrid</option>
		<option value="caceres">Cáceres</option>
		<option value="malaga">Málaga</option>
		<option value="valencia">Valencia</option>
	</select>

	<select multiple="multiple" id="ciudadesSeleccionadas">
	</select>

	</br>
	</br>
	<button id="anadir">Añadir</button>
	<button id="eliminar">Eliminar</button>

js:

	$(function()
	{
		$("#anadir").click(anadir);
		$("#eliminar").click(eliminar);
	});

	function anadir()
	{
		$("#ciudades > option:selected").appendTo($("#ciudadesSeleccionadas"));
	}

	function eliminar()
	{
		$("#ciudadesSeleccionadas > option:selected").appendTo($("#ciudades"));
	}
	
Copiar elementos: con el método clone().

	$("#ciudades > option:selected").clone().appendTo($("#ciudadesSeleccionadas"));

Eliminar elementos:

	$("#ciudades > option:selected").remove();

En algunas ocasiones es necesario eliminarlos pero solo visualmente para poder tratarlos. Para eso está el método detach():

	var elementos = $("#ciudades > option:selected").detach();
	elementos.css({"background-color" : "red"});
	elementos.appendTo($("#ciudades"));
	
remove elimina todo el contenido y si luego hay que insertarlo, se eliminan también los eventos asociados a ellos. Con detach, los eventos asociados se mantienen.

Creación de nodos. Ejemplo creando un párrafo y un enlace de dos formas distintas:

	/* Las variables que son de JQuery por convencion se ponen un $ delante para que sea mas fácil de diferenciar */
	var $parrafo = $("<p>Esto es un parrafo</p>");
	var $enlace =$("<a/>", {
		"html" : "esto es un <strong>enlace</strong>",
		"class" : "enlace",
		"href" : "http://www.google.com"
		});

	$("body").append($parrafo);
	$("body").append($enlace);
	
Animaciones personalizadas:

	/*
	Hay que darle los valores que quedan al final de la animación
	Lo convierte en casi transparente, coge la posición donde está y lo mueva 200px y la altura hace un toggle (0 o su tamaño)
	Como último, el tiempo en milisegundos que tarda
	*/
	$("#div1").animate(
	{
		opacity: 0.25,
		marginLeft: "+=200px",
		height: "toggle",
	}, 2000)
	
Además de esos dos parámetros, se pueden añadir otros dos:
	- aceleración de la animación: "swing" o "linear"
	- función que se ejecuta después de terminar la animación
	
Ejemplo:

html:

	<style>
	div
	{
		width: 100px;
		height: 100px;
	}
	#div1
	{
		background-color: yellow;
	}
	#div2
	{
		background-color: blue;
	}
	#div3
	{
		background-color: green;
	}
	</style>
	
	
	<div id="div1"></div>
	<div id="div2"></div>
	<div id="div3"></div>
	
js:

	$("#div1").animate(
	{
		opacity: 0.25,
		marginLeft: "+=200px",
		height: "toggle",
	}, 2000, "linear", function(){alert("hola")});
});

Ejercicio: Animar un Div para que se mueva y luego vuelva a su posición

	function animarDiv()
	{
		$("#div2").animate(
			{
				marginLeft: "+=200px",
			}, 2000, "swing", function()
				{
					$(this).animate(
					{
						marginLeft: "-=200px",
					}, 2000, "swing", animarDiv)
				}
		);
	}

Ejercicio: Simular el movimiento de girar una carta

function girarCarta()
	{
		$("#div3").animate(
			{
				marginLeft: "+=50px",
				width: 0
			},
			{
				duration: 1000,
				complete: function()
				{
					$(this).css({"background-color" : "red"})
					$(this).animate(
					{
						marginLeft: "-=50px",
						width: "100"
					}, 
						{
							duration: 1000
						}
					)
				}
			}
		);
	}
	
	Web para animacinoes: easings.net

CLASE 68: LUNES 20/02/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

JUEVES

Descargar Git:

https://git-scm.com/download/win

Instalar todo siguiente

Ejecutamos gitcmd

1. Crear una cuenta local en nuestro ordenador:
	git config --global user.name "Jose Luis Martin Avila"
	
	git config --global user.email "joseluis_f1@hotmail.com"
	
2. Ahora creamos una carpeta para guardar nuestro contenido. En este caso, la carpeta es cd/html/git
	escribimos: git init
	
3. Creamos un archivo txt con el vi:
	vi file1.txt
	
4. Ahora tenemos que añadirlo al stage. Hay 3 estados:
	- index, stage y repositorio (local o en la nube)
		- Cuando estamos trabajando con los ficheros en el ordenador, estamos en el index.
		- Cuando hemos terminado con el fichero y queremos "comprometerlo" lo pasamos al stage con: git add file1.txt
		Para saber los ficheros que tenemos, hacemos git status
		- Cuando se haya terminado con el se sube al repositorio, ya sea local o en la nube: git commit -m "descripcion de lo que se está subiendo"
		Se puede ver lo que se ha subido con git log

Borrar un archivo: git rm file1.txt

Registrarse:

https://github.com/kathyer/cursoPHP/settings/collaboration

Creamos un repositorio: cursoPHP

Dirección del repositorio: https://github.com/kathyer/cursoPHP.git

Para subir ficheros al repositorio:

	git remote add origin https://github.com/kathyer/cursoPHP.git

	git push -u origin master

Para descrgar los ficheros del repositorio

	git clone https://github.com/kathyer/cursoPHP.git
	
Si diera error de que la carpeta está ocupada, hay que añadir un . al final.
	
También se puede hacer entrando dentro de la carpeta del repositorio online y escribir el siguiente comando
	
	git pull origin master

Para hacer mas sencillo este proceso, nos descargamos sourceTree

	https://www.sourcetreeapp.com/
	
Contraseña: Fricolera24

Luego elegimos github y autenticación básica

https://stemkoski.github.io/Three.js/

FORK: Solicitar la modificación de un código ajeno

Para ello nos metemos en el codigo de otra persona, por ejemplo el de Oscar:

	https://github.com/omgp84/Olrait
	
Y le damos a fork. Si estamos logeados se creará una copia en nuestro github donde modificaremos las cosas. Seleccionamos algún archivo y le damos a editar (icono del lapiz).

Cuando hayamos terminado la modificación del código indicamos los cambios en el commit y lo aceptamos.

A continuación vamos a la página principal de la copia del código y le damos a new pull request, luego a view pull request

VIERNES

Autoevaluación metodologías ágiles

Se valora mas: la dos, colaborar con el cliente y adaptarse al cambio

Cuales de los siguientse son roles de Scrum:

	Dueño de proyecto, Scrum, Equipo, tester: Equipo

La forma recomendada de escribir una historia de usuario es:

	Mediante la formula "como... necesito... para..."

La duración recomendada de un Srpint en Scrum:

	depende del proyecto
	
Para que se hace una demo

	Para garantizar la aceptación

Cuál de las siguientes no es una práctica de eXtreme Programming:
	
	Semanas de 40 horas

	Una forma de verificar que el codigo está bien hecho

Que es un commit: 

	Todas las anteriores son correctas

Cuál de las siguientes combinaciones de estado-área no es posible en GIT
	
	nef file-HEAD
	
Que es un cherry-pick

	Una forma de traer el código de un commit a HEAD
	
Que es un test unitario

	Una validación
	
Un pull request es:

Una forma de controlar los cambios que se suben a un repositorio remoto

EVALUACIÓN:

¿Que es una gallina en Scrum?

	Alguien que pone huevos pero no participa en el trabajo
	
El diagrama de Burndown

	Se debe actualizar a diario

Una historia se considera "hecha"

	Todas las anteriores (Todas las tareas se han temrinado, funciona y se alcanza la aceptación)

TDD:

	Es una practica de XP (eXtreme Programming)

En los frameworks de prueba lo importante es:

	Detectar errores

En un sistema de control de versiones distribuido

	Cada usuario puede hacer de repositorio remoto para otros

En los métodos agiles

	Lo importante es entregar algo que de valor

Stash es

	Todas las anteriores (Comando de IT, almacén privado temporal y un software para repositorios remotos)

Merge siempre es mejor que rebase:

	Solo cuando no tenemos repositorios remotos

Es mejor:

	Poner un mensaje de commit auto-explicativo
	
janire@thinkingwithyou.com

657 049 779

@janirepaskua

----------------------------------
01 - 03 - 2017
Streaming:
janus rtc

http://www.gnuo-consultores.com/


CLASE X: MARTES 14/03/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------


- Para buscar donde estás registrado con un correo: 360social
- Colocar el perfil de linkedin en el curriculum y vinculado

- Después de los datos personales, hay que añadir el extracto profesional, corto y conciso. 3-4 líneas, 5 como mucho. En modo párrafo contando un poco sobre ti y tu experiencia profesional.
- Añadir experiencia profesional o formación, lo que tenga mas peso primero. Una formación como la de este curso, se tendría que añadir como formación complementaria y no como académica, con organismo, formacion y horas.

Competencias: Software que manejas y lenguajes de programación

Otros datos: Carné de conducir

Páginas para elaborar curriculums: cuvitt

Carta de presentación:
Complemetna a tu CV y debe invitar/motivar a querer leerlo en detalles. No más de media página.

Demostrar: por que eres el mejor candiadto para el puesto (que soluciones vas a aportar)

Webs para tarjetas de visita: vistaprint

Marca personal:
1. Definición y diferenciación.
- ¿Qué te hace diferente al resto?
- ¿Que le puedes ofrecer al mercado?
- ¿Quienes son tus referentes?
- ¿Cómo es tu marca?

2. Estrategia y objetivos
- ¿Por que quieres desarrollar tu marca
- ¿Que mensajes son los que voy a transmitir?
- ¿Que objetivos voy a cumplir con mi marca?

3. Visibilidad y plan de acción
- ¿Que herramientas vas a utilizar?
- ¿Blog y redes sociales?
- ¿Como vas a medir tus resultados?
- ¿Que mas necesito?

Plan de acción
- Redes/Blog
- CV
- Red de conactos
- Networking
- Posicionamietno profesional
- Formación

Algo positivo: Las entrevistas del final
Algo negativo: Empezar a trabajar tu marca personal
Algo a mejorar: La elaboración del curriculum

CLASE X+1: MIÉRCOLES 15/03/2016
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

- Foto profesional
- Nombre y apellidos completos
- Agotar todo lo posible el titular profesional
- Extracto, donde explicas quien eres y lo que haces. Que sea completo y conciso.

Datos personales
En datos personales y de contacto le damos al lapiz, y luego en nuestra url de perfil, le damos a la flecha para modificarlo. De esta forma podemos modificar nuestra URL y hacerla mas amigable

- Añadir aptitudes y logros (ahí pueden ir los cursos, proyectos y trabajos personales)

Para buscar empleo:

En la pestaña empleo, le damos a actualizar preferencias y marcamos la casilla
	- Informa a los técnicos de selección de que estás interesado en nuevas oportunidades

Indicar que es lo que buscas y que cargos quieres ocupar

ssi linkedin: para que te valore el perfil

Hootsuite: Para gestionar varias redes sociales en una misma plataforma.

Cuando agregas a alguien, no escribirle una parrafada diciendo que quieres trabajar ahí.

paginas de busca de empleo: infojobs, jobandtalent, ticjob, betabeers

Blogs:
	- http://www.talentoit.org/
	- Zumo de empleo
	
Positivo: Aprender el uso de linkedin
Negativo: Añadir y configurarlo, será coñazo
Interesante: el resto de páginas y blogs